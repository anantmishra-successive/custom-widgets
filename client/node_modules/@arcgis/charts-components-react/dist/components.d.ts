/// <reference types="@arcgis/charts-components" preserve="true" />
import type { EventName } from "@lit/react";
export declare const ArcgisChart: import("@lit/react").ReactWebComponent<HTMLArcgisChartElement & {
    class?: string;
}, {
    onArcgisAxesMinMaxChange: EventName<HTMLArcgisChartElement["arcgisAxesMinMaxChange"]>;
    onArcgisBadDataWarningRaise: EventName<HTMLArcgisChartElement["arcgisBadDataWarningRaise"]>;
    onArcgisConfigChange: EventName<HTMLArcgisChartElement["arcgisConfigChange"]>;
    onArcgisDataFetchComplete: EventName<HTMLArcgisChartElement["arcgisDataFetchComplete"]>;
    onArcgisDataProcessComplete: EventName<HTMLArcgisChartElement["arcgisDataProcessComplete"]>;
    onArcgisDataProcessError: EventName<HTMLArcgisChartElement["arcgisDataProcessError"]>;
    onArcgisLegendItemVisibilityChange: EventName<HTMLArcgisChartElement["arcgisLegendItemVisibilityChange"]>;
    onArcgisNoRenderPropChange: EventName<HTMLArcgisChartElement["arcgisNoRenderPropChange"]>;
    onArcgisRuntimeError: EventName<HTMLArcgisChartElement["arcgisRuntimeError"]>;
    onArcgisSelectionComplete: EventName<HTMLArcgisChartElement["arcgisSelectionComplete"]>;
    onArcgisSeriesColorChange: EventName<HTMLArcgisChartElement["arcgisSeriesColorChange"]>;
    onArcgisSeriesOrder: EventName<HTMLArcgisChartElement["arcgisSeriesOrder"]>;
    onArcgisUpdateComplete: EventName<HTMLArcgisChartElement["arcgisUpdateComplete"]>;
}>;
export declare const ArcgisChartsActionBar: import("@lit/react").ReactWebComponent<HTMLArcgisChartsActionBarElement & {
    class?: string;
}, {
    onArcgisActionBarToggle: EventName<HTMLArcgisChartsActionBarElement["arcgisActionBarToggle"]>;
    onArcgisDefaultActionSelect: EventName<HTMLArcgisChartsActionBarElement["arcgisDefaultActionSelect"]>;
}>;
