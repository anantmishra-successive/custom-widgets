import { Root } from '@amcharts/amcharts5';
import { RadarLineSeries } from '@amcharts/amcharts5/radar.js';
import { Axis, AxisRenderer, ColumnSeries, LineSeries } from '@amcharts/amcharts5/xy.js';
import { IField, RESTRendererType, WebBoxPlot, WebChart, WebChartBarChartSeries, WebChartBoxPlotSeries, WebChartDataTypes, WebChartHistogramSeries, WebChartLineChartSeries, WebChartPieChartSeries, WebChartRadarChartSeries, WebChartScatterplotSeries, WebRadarChart } from '@arcgis/charts-spec';
import { ChartSubType, CommonStrings, QueryObject, SeriesSymbolsMap, SubtypeInfo } from '../../../../utils';
import { ChartOptions } from '../../../common/interfaces';
import { ApplySelectionOnSeriesProps } from '../../selection/apply/interfaces';
import { LoaderHandle } from '../loading-indicator/interfaces';
import { UpdateBarChartSeriesStyleProps } from './bar-chart/interfaces';
import { UpdateBoxPlotCandleStickSeriesProps } from './box-plot/candle-stick/interfaces';
import { UpdateBoxPlotMeanLineSeriesProps } from './box-plot/mean-line/interfaces';
import { UpdateBoxPlotOutlierSeriesProps } from './box-plot/outlier/interfaces';
import { UpdateBoxPlotStepLineSeriesProps } from './box-plot/step-line/interfaces';
import { UpdateHistogramSeriesProps } from './histogram/interfaces';
import { UpdateLineChartSeriesProps } from './line-chart/interfaces';
import { UpdatePieChartSeriesProps } from './pie-chart/interfaces';
import { UpdateRadarChartSeriesProps } from './radar-chart/interfaces';
import { UpdateScatterplotMarkersStyleProps, UpdateTrendLineProps } from './scatter-plot/interfaces';
export interface InitializeSeriesProps<SeriesType extends WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartPieChartSeries | WebChartRadarChartSeries | WebChartScatterplotSeries> {
    chartConfig: WebChart;
    root: Root;
    options?: ChartOptions;
    seriesConfig: SeriesType;
    commonStrings: CommonStrings;
}
export interface InitializeXYSeriesProps<SeriesType extends WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartRadarChartSeries | WebChartScatterplotSeries> extends InitializeSeriesProps<SeriesType> {
    xAxis: Axis<AxisRenderer>;
    yAxis: Axis<AxisRenderer>;
}
export interface UpdateSeriesProps<DataTypes extends WebChartDataTypes, ConfigType extends WebBoxPlot | WebChart | WebRadarChart> {
    root: Root;
    chartConfig: ConfigType;
    colorMatch: boolean;
    data?: DataTypes;
    options?: ChartOptions;
    queryObject?: QueryObject;
    dataWasUpdated?: boolean;
    dataLabelFormatter?: ChartOptions["dataLabelFormatter"];
    seriesWereReinitialized?: boolean;
    rotationChanged?: boolean;
    sortChanged?: boolean;
    colorMatchChanged?: boolean;
    seriesStyleChanged?: boolean;
    subtypeInfo?: SubtypeInfo;
    rendererType?: RESTRendererType;
    fieldList?: IField[];
    chartSubType: ChartSubType;
    loaderHandle: LoaderHandle;
    commonStrings: CommonStrings;
}
export interface UpdateXYSeriesProps<DataTypes extends WebChartDataTypes, SeriesConfig extends WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartRadarChartSeries | WebChartScatterplotSeries, SeriesType extends ColumnSeries | LineSeries | RadarLineSeries, ConfigType extends WebBoxPlot | WebChart | WebRadarChart> extends UpdateSeriesProps<DataTypes, ConfigType> {
    seriesConfig: SeriesConfig;
    series: SeriesType;
    seriesIndex: number;
    numberOfSeries: number;
    seriesIndexMapper?: Map<string, number>;
    seriesSymbolMapForEvent: SeriesSymbolsMap;
    timeZoneChanged?: boolean;
}
export interface UpdateSeriesStyleProps<SeriesType extends ColumnSeries | LineSeries | RadarLineSeries, SeriesConfigType extends UpdateLineChartSeriesProps | WebChartBarChartSeries | WebChartLineChartSeries | WebChartRadarChartSeries> {
    series: SeriesType;
    seriesConfig: SeriesConfigType;
    seriesIndex: number;
    colorMatch: boolean;
    seriesIndexMapper?: Map<string, number>;
    seriesSymbolMapForEvent: SeriesSymbolsMap;
    rendererType?: RESTRendererType;
}
export type StyleCallbackProps = UpdateBarChartSeriesStyleProps | UpdateBoxPlotCandleStickSeriesProps | UpdateBoxPlotMeanLineSeriesProps | UpdateBoxPlotOutlierSeriesProps | UpdateBoxPlotStepLineSeriesProps | UpdateHistogramSeriesProps | UpdateLineChartSeriesProps | UpdatePieChartSeriesProps | UpdateRadarChartSeriesProps | UpdateScatterplotMarkersStyleProps | UpdateTrendLineProps;
export type StyleOrSelectionCallback = {
    type: "style";
    styleCallback: (props: StyleCallbackProps) => Promise<void> | void;
    callbackProps: StyleCallbackProps;
} | {
    type: "selection";
    callbackProps: ApplySelectionOnSeriesProps;
};
