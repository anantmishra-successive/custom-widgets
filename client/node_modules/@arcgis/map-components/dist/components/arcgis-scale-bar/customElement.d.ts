/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/lumina/controllers';
import { default as ScaleBarViewModel } from '@arcgis/core/widgets/ScaleBar/ScaleBarViewModel.js';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';
import { MeasurementSystem } from '../types';

type ScaleBarStyle = "line" | "ruler";
type ScaleBarUnit = MeasurementSystem | "dual";
declare const useScaleBarViewModel: (component: LitElement & Pick<ScaleBarViewModel, never> & import('../../controllers/useViewModel').ViewModelControllerUses<ScaleBarViewModel>) => ScaleBarViewModel;
/**
 * The Scale Bar component displays a scale bar representing the scale of the map.
 * It respects various coordinate systems and displays units in metric or imperial values.
 * Metric values show either kilometers, meters, centimeters, or millimeters depending on the scale, and likewise, imperial values show miles, feet, or inches depending on the scale.
 * When working with Web Mercator or geographic coordinate systems the scale bar takes into account projection distortion and dynamically adjusts the scale bar.
 *
 * When the scale bar is inside the map, the actual location of the scale bar is used to calculate the scale.
 * Otherwise, the center of the map is used to calculate the scale.
 *
 * **Known limitations**
 *
 * - This component is not currently supported within a Scene component.
 *
 * [Read more...](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-scale-bar/)
 */
export declare class ArcgisScaleBar extends LitElement {
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the [destroy](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-scale-bar/#destroy) method when you are done to
     * prevent memory leaks.
     *
     * @default false
     */
    autoDestroyDisabled: boolean;
    /**
     * The style for the scale bar.
     * When `unit` is set to `dual`, the style will always be `line`.
     *
     * @default "line"
     */
    barStyle: ScaleBarStyle;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     *
     * @see [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/)
     * @default "actual-size"
     */
    icon?: string;
    /** The component's default label. */
    label?: string;
    /**
     * Replace localized message strings with your own strings.
     *
     * _**Note**: Individual message keys may change between releases._
     */
    messageOverrides?: typeof this.messages._overrides;
    /** @default "top-left" */
    position: __esri.UIPosition;
    /**
     * By assigning the `id` attribute of the Map or Scene component to this property, you can position a child component anywhere in the DOM while still maintaining a connection to the Map or Scene.
     *
     * @see [Associate components with a Map or Scene component](https://developers.arcgis.com/javascript/latest/programming-patterns/#associate-components-with-a-map-or-scene-component)
     */
    referenceElement?: ArcgisReferenceElement | string;
    /**
     * Units to use for the scale bar.
     * When using `dual`, the scale bar displays both metric and imperial units.
     * When metric, distances will be shown in either kilometers, meters, centimeters, or millimeters depending on the scale. Similarly, imperial
     * units will be shown in either miles, feet, or inches.
     */
    get unit(): ScaleBarUnit | undefined;
    set unit(value: ScaleBarUnit | undefined);
    /** Permanently destroy the component. */
    destroy(): Promise<void>;
    /** Emitted when the component associated with a map or scene view is is ready to be interacted with. */
    readonly arcgisReady: TargetedEvent<this, void>;
    private messages: Partial<{
        componentLabel: string;
    }> & import('@arcgis/lumina/controllers').T9nMeta<{
        componentLabel: string;
    }>;
}
export {};
