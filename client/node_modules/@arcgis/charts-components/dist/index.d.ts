import type { ArcgisChart } from "./components/arcgis-chart";
import type { ArcgisChartsActionBar } from "./components/arcgis-charts-action-bar";

export type { WebChart } from '@arcgis/charts-spec';
export * from './utils';
export type { PanelNumberChangePayload, DataChangeErrorPayload, PopoverOpenChangePayload, ModelListChangePayload, DataProcessCompletePayload, AxesMinMaxChangePayload, SeriesColorChangePayload, NoRenderPropChangePayload, LegendItemVisibilityChangePayload, DefaultActionSelectPayload, SelectionCompletePayload, } from './utils/components/event-payloads';
export type { AxisLabelFormatCallback, ChartOptions, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, MessageOptions, NotifyOptions, PieChartLegendValueLabelFormatCallback, PreRenderCallback, } from './chart-rendering/common/interfaces';
export { BarChartDataPopoverKinds, BoxPlotDataPopoverKinds, ChartAuthoringPages, HistogramDataPopoverKinds, type IntervalPopoverProps, LineChartDataPopoverKinds, PieChartDataPopoverKinds, ScatterplotDataPopoverKinds, } from './interfaces';
export type { FontStyleChangePayload } from './components/arcgis-charts-config-font-style/resource';
export type { GuideChangePayload } from './components/arcgis-charts-config-guide/resource';
export { getAssetPath, setAssetPath } from './runtime';


export interface ArcgisChartCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLArcgisChartElement;
  currentTarget: HTMLArcgisChartElement;
}
export interface ArcgisChartsActionBarCustomEvent<T> extends CustomEvent<T> {
  detail: T;
  target: HTMLArcgisChartsActionBarElement;
  currentTarget: HTMLArcgisChartsActionBarElement;
}

export { ToEvents, TargetedEvent } from "@arcgis/lumina";

declare global {
  interface HTMLElementTagNameMap {
    "arcgis-chart": HTMLArcgisChartElement;
    "arcgis-charts-action-bar": HTMLArcgisChartsActionBarElement;
  }

  interface HTMLArcgisChartElementEventMap {
    "arcgisAxesMinMaxChange": ArcgisChart["arcgisAxesMinMaxChange"]["detail"];
    "arcgisBadDataWarningRaise": ArcgisChart["arcgisBadDataWarningRaise"]["detail"];
    "arcgisConfigChange": ArcgisChart["arcgisConfigChange"]["detail"];
    "arcgisDataFetchComplete": ArcgisChart["arcgisDataFetchComplete"]["detail"];
    "arcgisDataProcessComplete": ArcgisChart["arcgisDataProcessComplete"]["detail"];
    "arcgisDataProcessError": ArcgisChart["arcgisDataProcessError"]["detail"];
    "arcgisLegendItemVisibilityChange": ArcgisChart["arcgisLegendItemVisibilityChange"]["detail"];
    "arcgisNoRenderPropChange": ArcgisChart["arcgisNoRenderPropChange"]["detail"];
    "arcgisRuntimeError": ArcgisChart["arcgisRuntimeError"]["detail"];
    "arcgisSelectionComplete": ArcgisChart["arcgisSelectionComplete"]["detail"];
    "arcgisSeriesColorChange": ArcgisChart["arcgisSeriesColorChange"]["detail"];
    "arcgisSeriesOrder": ArcgisChart["arcgisSeriesOrder"]["detail"];
    "arcgisUpdateComplete": ArcgisChart["arcgisUpdateComplete"]["detail"];
  }

  interface HTMLArcgisChartElement extends ArcgisChart {
    addEventListener<K extends keyof HTMLArcgisChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartElement, ev: ArcgisChartCustomEvent<HTMLArcgisChartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLArcgisChartElementEventMap>(type: K, listener: (this: HTMLArcgisChartElement, ev: ArcgisChartCustomEvent<HTMLArcgisChartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
  interface HTMLArcgisChartsActionBarElementEventMap {
    "arcgisActionBarToggle": ArcgisChartsActionBar["arcgisActionBarToggle"]["detail"];
    "arcgisDefaultActionSelect": ArcgisChartsActionBar["arcgisDefaultActionSelect"]["detail"];
  }

  interface HTMLArcgisChartsActionBarElement extends ArcgisChartsActionBar {
    addEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLArcgisChartsActionBarElementEventMap>(type: K, listener: (this: HTMLArcgisChartsActionBarElement, ev: ArcgisChartsActionBarCustomEvent<HTMLArcgisChartsActionBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
  }
}