import { SpritePointerTypeEvent } from '@amcharts/amcharts4/.internal/core/SpriteEvents.js';
import { PointerEvent, PointerTypeEvent } from '@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js';
import { Axis, Chart, GaugeChart, Legend, PieChart, PieSeries, XYChart } from '@amcharts/amcharts4/charts.js';
import { Container, Label, MouseTouchEvent, Sprite, SpriteMouseTouchEvent, SpritePointEvent } from '@amcharts/amcharts4/core.js';
import { CommonStrings, ErrorStrings, QueryObject } from '../../utils';
import { WebChart, WebChartDataTypes, WebChartTypes } from '@arcgis/charts-spec';
import { AxisLabelFormatCallback, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback } from '../common/interfaces';
import { FooterElements, HeaderElements } from './chart-library-elements/header-and-footer/interfaces';
import { LoaderElements, LoaderHandle } from './chart-library-elements/loading-indicator/interfaces';
export declare const EventTypes: {
    readonly Ready: "ready";
    readonly Hidden: "hidden";
    readonly Shown: "shown";
    readonly Hit: "hit";
    readonly DoubleHit: "doublehit";
    readonly Up: "up";
    readonly SelectEnded: "selectended";
    readonly Over: "over";
    readonly Out: "out";
    readonly SizeChanged: "sizechanged";
    readonly VisibilityChanged: "visibilitychanged";
    readonly PositionChanged: "positionchanged";
    readonly Validated: "validated";
    readonly DataValidated: "datavalidated";
    readonly DataItemsValidated: "dataitemsvalidated";
    readonly Inited: "inited";
    readonly Opened: "opened";
    readonly Closed: "closed";
    readonly ChildAdded: "childadded";
    readonly DataRangeChanged: "datarangechanged";
    readonly LayoutValidated: "layoutvalidated";
};
export type EventTypes = (typeof EventTypes)[keyof typeof EventTypes];
export type HitEvent = SpriteMouseTouchEvent & SpritePointerTypeEvent & SpritePointEvent & {
    type: "doublehit" | "hit";
    target: Sprite;
};
export type UpEvent = MouseTouchEvent & PointerEvent & PointerTypeEvent & {
    type: "up";
    target: XYChart;
};
export type TouchEndEvent = MouseTouchEvent & PointerEvent & PointerTypeEvent & {
    type: "touchend";
    target: XYChart;
};
export type OverEvent = MouseTouchEvent & PointerEvent & PointerTypeEvent & {
    type: "over";
    target: Container;
};
export type DataRangeChangedEvent = {
    type: "datarangechanged";
    target: Axis;
};
export type AxisSizeChangedEvent = {
    type: "sizechanged";
    target: Axis;
};
export type AxisValidatedEvent = {
    type: "validated";
    target: Axis;
};
export type PieSeriesValidatedEvent = {
    type: "validated";
    target: PieSeries;
};
export interface LegendElements {
    legend: Legend;
    legendTitle: Label;
}
export interface ChartElements {
    headerElements: HeaderElements;
    footerElements: FooterElements;
    legendElements: LegendElements;
    loaderHandle: LoaderHandle;
    loaderElements: LoaderElements;
}
export interface ChartResult {
    chart: GaugeChart | PieChart | XYChart;
    chartElements?: ChartElements;
}
export interface UpdateAxesProps {
    chart: Chart;
    chartConfig: WebChart;
    rotationChanged?: boolean;
    axisLabelsBehaviorChanged?: [boolean, boolean];
    chartType?: WebChartTypes;
    isRotated?: boolean;
    dualAxisChanged?: boolean;
    timeIntervalInfoWasReset?: boolean;
    data?: WebChartDataTypes;
    queryObject?: QueryObject;
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    xAxisLabelFormatter?: AxisLabelFormatCallback;
    yAxisLabelFormatter?: AxisLabelFormatCallback;
    secondaryYAxisLabelFormatter?: AxisLabelFormatCallback;
    gaugeInnerLabelFormatter?: GaugeInnerLabelFormatCallback;
    commonStrings: CommonStrings;
    errorStrings: ErrorStrings;
}
