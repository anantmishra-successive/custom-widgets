import { Bullet, Chart } from '@amcharts/amcharts5';
import { StepLineSeries, CandlestickSeries, LineSeries } from '@amcharts/amcharts5/xy.js';
import { BoxPlotYFieldKeys } from '../../../../../utils';
import { WebBoxPlot, WebChartBoxPlotSeries, WebChartDataItem, WebChartLineChartSeries } from '@arcgis/charts-spec';
import { InitializeBoxPlotSeriesProps, UpdateBoxPlotSeriesProps } from './interfaces';
/**
 * Returns the data fields and properties common to all the box plot series.
 *
 * @param props.chartConfig The chart config
 * @param props.seriesConfig The series config
 * @param props.key The key to identify the stat related to the data field
 */
export declare function getBoxPlotSeriesCommonDataFields(props: {
    chartConfig: WebBoxPlot;
    seriesConfig: WebChartBoxPlotSeries | WebChartLineChartSeries;
    key: BoxPlotYFieldKeys;
}): {
    dataFields: {
        value: string;
        category: string;
    };
    properties: {
        value: string;
        category: string;
    };
};
/**
 * Updates a bullet/marker location from an outlier series.
 * By default they would render in the middle of their category, which causes issues on combinations allowing multiple
 * series on a same category.
 * Solution inspired by amCharts ticket https://help.amcharts.com/hc/en-us/requests/86807
 *
 * @param props.outlierSeries The outlier series
 * @param props.bullet The bullet to position
 * @param props.seriesConfigId The series config id
 */
export declare function updateOutlierLocation(props: {
    outlierSeries?: LineSeries;
    bullet: Bullet;
    seriesConfigId: string;
}): void;
/**
 * Function initializing the box plot series. Set only the properties that are not going to be modified
 * through a chart update. See updateBoxPlotChartSeries for the other properties.
 *
 * @param props.chartConfig The chart configuration
 * @param props.seriesIndex The index of the series to initialize
 */
export declare function initializeBoxPlotSeries(props: InitializeBoxPlotSeriesProps): (CandlestickSeries | LineSeries | StepLineSeries)[];
/**
 * Function updating a column series properties without having to recreate the whole series.
 *
 * @param props.chartConfig The chart configuration
 * @param props.series The series to update
 * @param props.seriesConfig The series configuration
 */
export declare function updateBoxPlotSeries(props: UpdateBoxPlotSeriesProps): void;
/**
 * Retrieves the box-plot mean lines data from the chart storage; sorts it based on the order of the boxes using the category;
 * then updates the chart storage with the sorted data.
 *
 * @param props.chart The chart
 * @param props.chartData The chart data items of which the order is used to sort the mean lines data
 * @param props.chartConfig The chart config
 */
export declare function sortBoxPlotMeanLinesData(props: {
    chart: Chart;
    chartData: WebChartDataItem[];
    chartConfig: WebBoxPlot;
}): void;
