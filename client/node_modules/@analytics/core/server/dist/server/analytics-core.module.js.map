{"version":3,"file":"analytics-core.module.js","sources":["../../../src/vendor/redux/utils/defs.js","../../../src/vendor/redux/createStore.js","../../../src/vendor/redux/combineReducers.js","../../../src/vendor/redux/compose.js","../../../src/vendor/redux/applyMiddleware.js","../../../src/constants.js","../../../src/utils/internalConstants.js","../../../src/events.js","../../../src/middleware/initialize.js","../../../src/modules/user.js","../../../src/middleware/identify.js","../../../src/utils/callback-stack.js","../../../src/utils/waitForReady.js","../../../src/utils/heartbeat.js","../../../src/middleware/plugins/engine.js","../../../src/middleware/plugins/index.js","../../../src/utils/filterDisabled.js","../../../src/middleware/storage.js","../../../src/middleware/dynamic.js","../../../src/modules/plugins.js","../../../src/utils/serialize.js","../../../src/modules/track.js","../../../src/modules/queue.js","../../../src/modules/page.js","../../../src/modules/context.js","../../../src/utils/getOSName/node.js","../../../src/utils/debug.js","../../../src/utils/ensureArray.js","../../../src/utils/enrichMeta.js","../../../src/utils/getCallback.js","../../../src/utils/timestamp.js","../../../src/index.js"],"sourcesContent":["export const FUNC = 'function'\nexport const UNDEF = 'undefined'\nexport const REDUCER = 'reducer'\n\nconst base = '@@redux/'\nexport const ACTION_INIT = base + 'INIT'\nexport const ACTION_TEST = base + Math.random().toString(36)\n","import { isObject } from '@analytics/type-utils'\nimport { FUNC, UNDEF, ACTION_INIT, REDUCER } from './utils/defs.js'\n\n// eslint-disable-next-line\nconst $$observable = /* #__PURE__ */ (() => (typeof Symbol === FUNC && Symbol.observable) || '@@observable')();\n\n/*\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nconst msg = ' != ' + FUNC\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === FUNC && typeof enhancer === UNDEF) {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== UNDEF) {\n    if (typeof enhancer !== FUNC) {\n      throw new Error('enhancer' + msg)\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== FUNC) {\n    throw new Error(REDUCER + msg)\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  /*\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState\n  }\n\n  /*\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== FUNC) {\n      throw new Error('Listener' + msg)\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    /* // add default info to actions... \n    console.log('dispatch before', _action)\n    const action = {\n      ..._action,\n      ...{\n        action: {\n          ..._action.action,\n          ...{ customInfo: 'yoooo'} \n        }\n      }\n    }\n    console.log('dispatch after', action)\n    /** */\n\n    if (!isObject(action)) {\n      throw new Error('Act != obj')\n    }\n\n    if (typeof action.type === UNDEF) {\n      throw new Error('ActType ' + UNDEF)\n    }\n\n    if (isDispatching) {\n      throw new Error('Dispatch in ' + REDUCER)\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = currentListeners = nextListeners\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== FUNC) {\n      throw new Error('next ' + REDUCER + msg)\n    }\n\n    currentReducer = nextReducer\n    dispatch({ type: ACTION_INIT })\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /*\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Observer != obj')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ACTION_INIT })\n\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n","import { isObject } from '@analytics/type-utils'\nimport warning from './utils/warning.js'\nimport { FUNC, UNDEF, REDUCER, ACTION_INIT, ACTION_TEST } from './utils/defs.js'\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionName = (actionType && actionType.toString()) || '?'\n\n  return ('action ' + actionName + REDUCER + ' ' + key + ' returns ' + UNDEF)\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName = action && action.type === ACTION_INIT ? 'preloadedState arg passed to createStore' : 'previous state received by ' + REDUCER\n\n  if (reducerKeys.length === 0) {\n    return ('Store has no valid reducers')\n  }\n\n  if (!isObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      ({}).toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(key =>\n    !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected keys ${unexpectedKeys.join('\", \"')} in ${argumentName}. ` +\n      `Expected to find 1 of the known reducer keys instead: ${reducerKeys.join('\", \"')}`\n    )\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    const initialState = reducer(undefined, { type: ACTION_INIT })\n    if (\n      typeof initialState === UNDEF ||\n      typeof reducer(undefined, { type: ACTION_TEST }) === UNDEF\n    ) {\n      throw new Error(REDUCER + ' ' + key + ' ' + UNDEF)\n    }\n  })\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (NODE_ENV !== 'production') {\n      if (typeof reducers[key] === UNDEF) {\n        warning(`No reducer > ${key}`)\n      }\n    }\n\n    if (typeof reducers[key] === FUNC) {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache)\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === UNDEF) {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    return hasChanged ? nextState : state\n  }\n}\n","/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n","import compose from './compose.js'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    const store = createStore(reducer, preloadedState, enhancer)\n    let dispatch = store.dispatch\n    let chain = []\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n","/**\n * Core Analytic constants. These are exposed for third party plugins & listeners\n * @typedef {Object} constants\n * @property {ANON_ID} ANON_ID - Anonymous visitor Id localstorage key\n * @property {USER_ID} USER_ID - Visitor Id localstorage key\n * @property {USER_TRAITS} USER_TRAITS - Visitor traits localstorage key\n */\nimport { PREFIX } from '@analytics/type-utils'\n\n\n/**\n * Anonymous visitor Id localstorage key\n * @typedef {String} ANON_ID\n */\nexport const ANON_ID = PREFIX + 'anon_id' // __anon_id\n/**\n * Visitor Id localstorage key\n * @typedef {String} USER_ID\n */\nexport const USER_ID = PREFIX + 'user_id' // __user_id\n/**\n * Visitor traits localstorage key\n * @typedef {String} USER_TRAITS\n */\nexport const USER_TRAITS = PREFIX + 'user_traits' // __user_traits\n","\nexport const LIB_NAME = 'analytics'\n\nexport const ID = 'userId'\n\nexport const ANONID = 'anonymousId'\n\nexport const ERROR_URL = 'https://lytics.dev/errors/'","/* Core Analytic Events */\n\nexport const coreEvents = [\n  /**\n   * `bootstrap` - Fires when analytics library starts up.\n   * This is the first event fired. '.on/once' listeners are not allowed on bootstrap\n   * Plugins can attach logic to this event\n   */\n  'bootstrap',\n  /**\n   * `params` - Fires when analytics parses URL parameters\n   */\n  'params',\n  /**\n   * `campaign` - Fires if params contain \"utm\" parameters\n   */\n  'campaign',\n  /**\n   * `initializeStart` - Fires before 'initialize', allows for plugins to cancel loading of other plugins\n   */\n  'initializeStart',\n  /**\n   * `initialize` - Fires when analytics loads plugins\n   */\n  'initialize',\n  /**\n   * `initializeEnd` - Fires after initialize, allows for plugins to run logic after initialization methods run\n   */\n  'initializeEnd',\n  /**\n   * `ready` - Fires when all analytic providers are fully loaded. This waits for 'initialize' and 'loaded' to return true\n   */\n  'ready',\n  /**\n   * `resetStart` - Fires if analytic.reset() is called.\n   * Use this event to cancel reset based on a specific condition\n   */\n  'resetStart',\n  /**\n   * `reset` - Fires if analytic.reset() is called.\n   * Use this event to run custom cleanup logic (if needed)\n   */\n  'reset',\n  /**\n   * `resetEnd` - Fires after analytic.reset() is called.\n   * Use this event to run a callback after user data is reset\n   */\n  'resetEnd',\n  /******************\n   * Page Events\n   ******************/\n  /**\n   * `pageStart` - Fires before 'page' events fire.\n   *  This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'pageStart',\n  /**\n   * `page` - Core analytics hook for page views.\n   *  If your plugin or integration tracks page views, this is the event to fire on.\n   */\n  'page',\n  /**\n   * `pageEnd` - Fires after all registered 'page' methods fire.\n   */\n  'pageEnd',\n  /**\n   * `pageAborted` - Fires if 'page' call is cancelled by a plugin\n   */\n  'pageAborted',\n  /****************\n   * Track Events\n   ***************/\n  /**\n   * `trackStart` - Called before the 'track' events fires.\n   *  This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'trackStart',\n  /**\n   * `track` - Core analytics hook for event tracking.\n   *  If your plugin or integration tracks custom events, this is the event to fire on.\n   */\n  'track',\n  /**\n   * `trackEnd` - Fires after all registered 'track' events fire from plugins.\n   */\n  'trackEnd',\n  /**\n   * `trackAborted` - Fires if 'track' call is cancelled by a plugin\n   */\n  'trackAborted',\n  /******************\n   * Identify Events\n   ******************/\n  /**\n   * `identifyStart` - Called before the 'identify' events fires.\n   * This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'identifyStart',\n  /**\n   * `identify` - Core analytics hook for user identification.\n   *  If your plugin or integration identifies users or user traits, this is the event to fire on.\n   */\n  'identify',\n  /**\n   * `identifyEnd` - Fires after all registered 'identify' events fire from plugins.\n   */\n  'identifyEnd',\n  /**\n   * `identifyAborted` - Fires if 'track' call is cancelled by a plugin\n   */\n  'identifyAborted',\n  /**\n   * `userIdChanged` - Fires when a user id is updated\n   */\n  'userIdChanged',\n  /******************\n   * Plugin Events\n   ******************/\n  /**\n   * `registerPlugins` - Fires when analytics is registering plugins\n   */\n  'registerPlugins',\n  /**\n   * `enablePlugin` - Fires when 'analytics.plugins.enable()' is called\n   */\n  'enablePlugin',\n  /**\n   * `disablePlugin` - Fires when 'analytics.plugins.disable()' is called\n   */\n  'disablePlugin',\n  /*\n   * `loadPlugin` - Fires when 'analytics.loadPlugin()' is called\n   */\n  // 'loadPlugin',\n  /******************\n   * Browser activity events\n   ******************/\n  /**\n   * `online` - Fires when browser network goes online.\n   * This fires only when coming back online from an offline state.\n   */\n  'online',\n  /**\n   * `offline` - Fires when browser network goes offline.\n   */\n  'offline',\n  /******************\n   * Storage events\n   ******************/\n  /**\n   * `setItemStart` - Fires when analytics.storage.setItem is initialized.\n   * This event gives plugins the ability to intercept keys & values and alter them before they are persisted.\n   */\n  'setItemStart',\n  /**\n   * `setItem` - Fires when analytics.storage.setItem is called.\n   * This event gives plugins the ability to intercept keys & values and alter them before they are persisted.\n   */\n  'setItem',\n  /**\n   * `setItemEnd` - Fires when setItem storage is complete.\n   */\n  'setItemEnd',\n  /**\n   * `setItemAborted` - Fires when setItem storage is cancelled by a plugin.\n   */\n  'setItemAborted',\n  /**\n   * `removeItemStart` - Fires when analytics.storage.removeItem is initialized.\n   * This event gives plugins the ability to intercept removeItem calls and abort / alter them.\n   */\n  'removeItemStart',\n  /**\n   * `removeItem` - Fires when analytics.storage.removeItem is called.\n   * This event gives plugins the ability to intercept removeItem calls and abort / alter them.\n   */\n  'removeItem',\n  /**\n   * `removeItemEnd` - Fires when removeItem storage is complete.\n   */\n  'removeItemEnd',\n  /**\n   * `removeItemAborted` - Fires when removeItem storage is cancelled by a plugin.\n   */\n  'removeItemAborted',\n]\n\n/* Keys on a plugin that are not considered events */\nexport const nonEvents = ['name', 'EVENTS', 'config', 'loaded']\n\nconst pluginEvents = {\n  registerPluginType: (name) => `registerPlugin:${name}`,\n  pluginReadyType: (name) => `ready:${name}`,\n}\n\nconst EVENTS = coreEvents.reduce((acc, curr) => {\n  acc[curr] = curr\n  return acc\n}, pluginEvents)\n\nexport default EVENTS\n\nexport function isReservedAction(type) {\n  return coreEvents.includes(type)\n}\n","/* eslint-disable camelcase */\nimport EVENTS from '../events.js'\nimport { ANON_ID, USER_ID, USER_TRAITS } from '../constants.js'\n\nconst utmRegex = /^utm_/\nconst propRegex = /^an_prop_/\nconst traitRegex = /^an_trait_/\n\n// Middleware runs during EVENTS.initialize\nexport default function initializeMiddleware(instance) {\n  const { setItem } = instance.storage\n  return store => next => action => {\n    /* Handle bootstrap event */\n    if (action.type === EVENTS.bootstrap) {\n      const { params, user, persistedUser, initialUser } = action\n      const isKnownId = persistedUser.userId === user.userId\n      /* 1. Set anonymous ID */\n      if (persistedUser.anonymousId !== user.anonymousId) {\n        setItem(ANON_ID, user.anonymousId)\n      }\n      /* 2. Set userId */\n      if (!isKnownId) {\n        setItem(USER_ID, user.userId)\n      }\n      /* 3. Set traits if they are different */\n      if (initialUser.traits) {\n         setItem(USER_TRAITS, {\n          ...(isKnownId && persistedUser.traits) ? persistedUser.traits : {},\n          ...initialUser.traits\n        })\n        /* TODO multi user setup\n        setItem(`${USER_TRAITS}.${user.userId}`, {\n          ...(isKnownId) ? existingTraits : {},\n          ...initialUser.traits\n        })\n        */\n      }\n      /* 4. Parse url params */\n      const paramsArray = Object.keys(action.params)\n      if (paramsArray.length) {\n        const { an_uid, an_event } = params\n        const groupedParams = paramsArray.reduce((acc, key) => {\n          // match utm params & dclid (display) & gclid (cpc)\n          if (key.match(utmRegex) || key.match(/^(d|g)clid/)) {\n            const cleanName = key.replace(utmRegex, '')\n            const keyName = (cleanName === 'campaign') ? 'name' : cleanName\n            acc.campaign[keyName] = params[key]\n          }\n          if (key.match(propRegex)) {\n            acc.props[key.replace(propRegex, '')] = params[key]\n          }\n          if (key.match(traitRegex)) {\n            acc.traits[key.replace(traitRegex, '')] = params[key]\n          }\n          return acc\n        }, {\n          campaign: {},\n          props: {},\n          traits: {}\n        })\n\n        store.dispatch({\n          type: EVENTS.params,\n          raw: params,\n          ...groupedParams,\n          ...(an_uid ? { userId: an_uid } : {}),\n        })\n\n        /* If userId set, call identify */\n        if (an_uid) {\n          // timeout to debounce and make sure integration is registered. Todo refactor\n          setTimeout(() => instance.identify(an_uid, groupedParams.traits), 0)\n        }\n\n        /* If tracking event set, call track */\n        if (an_event) {\n          // timeout to debounce and make sure integration is registered. Todo refactor\n          setTimeout(() => instance.track(an_event, groupedParams.props), 0)\n        }\n\n        // if url has utm params\n        if (Object.keys(groupedParams.campaign).length) {\n          store.dispatch({\n            type: EVENTS.campaign,\n            campaign: groupedParams.campaign\n          })\n        }\n      }\n    }\n    return next(action)\n  }\n}\n","import { get } from '@analytics/global-storage-utils'\nimport { isObject, PREFIX } from '@analytics/type-utils'\nimport { ANON_ID, USER_ID, USER_TRAITS } from '../constants.js'\nimport EVENTS from '../events.js'\n\n/* user reducer */\nexport default function userReducer(storage) {\n  return function user(state = {}, action = {}) {\n\n    if (action.type === EVENTS.setItemEnd) {\n      // Set anonymousId if changed by storage.setItem\n      if (action.key === ANON_ID) {\n        return { ...state, ...{ anonymousId: action.value }}\n      }\n      // Set userId if changed by storage.setItem\n      if (action.key === USER_ID) {\n        return { ...state, ...{ userId: action.value }}\n      }\n    }\n\n    switch (action.type) {\n      case EVENTS.identify:\n        return Object.assign({}, state, {\n          userId: action.userId,\n          traits: {\n            ...state.traits,\n            ...action.traits\n          }\n        })\n      case EVENTS.reset:\n        // Side effect to fix race condition in Node. TODO refactor\n        // This is from default storage.removeItem: (key) => globalContext[key] = undefined\n        [ USER_ID, ANON_ID, USER_TRAITS ].forEach((key) => {\n          // sync storage, not instance.storage\n          storage.removeItem(key)\n        })\n        return Object.assign({}, state, {\n          userId: null,\n          // TODO reset anon id automatically?\n          anonymousId: null,\n          traits: {},\n        })\n      default:\n        return state\n    }\n  }\n}\n\nexport function getPersistedUserData(storage) {\n  return {\n    userId: storage.getItem(USER_ID),\n    anonymousId: storage.getItem(ANON_ID),\n    traits: storage.getItem(USER_TRAITS)\n  }\n}\n\nexport const tempKey = (key) => PREFIX + 'TEMP' + PREFIX + key\n\nexport function getUserPropFunc(storage) {\n  return function getUserProp(key, instance, payload) {\n    /* 1. Try current state */\n    const currentId = instance.getState('user')[key]\n    if (currentId) {\n      /*\n      console.log(`from state ${key}`, currentId)\n      /** */\n      return currentId\n    }\n\n    /* 2. Try event payload */\n    if (payload && isObject(payload) && payload[key]) {\n      /*\n      console.log(`from payload ${key}`, payload[key])\n      /** */\n      return payload[key]\n    }\n\n    /* 3. Try persisted data */\n    const persistedInfo = getPersistedUserData(storage)[key]\n    if (persistedInfo) {\n      /*\n      console.log(`from persistedInfo ${key}`, persistedInfo)\n      /** */\n      return persistedInfo\n    }\n\n    /* 4. Else, try to get in memory placeholder. TODO watch this for future issues */\n    return get(tempKey(key)) || null\n  }\n}\n","import { uuid } from 'analytics-utils'\nimport { remove } from '@analytics/global-storage-utils'\nimport { tempKey } from '../modules/user.js'\nimport { USER_ID, USER_TRAITS, ANON_ID } from '../constants.js'\nimport { ID, ANONID } from '../utils/internalConstants.js'\nimport EVENTS from '../events.js'\n\nexport default function identifyMiddleware(instance) {\n  const { setItem, removeItem, getItem } = instance.storage\n  return store => next => action => {\n    const { userId, traits, options } = action\n    /* Reset user id and traits */\n    if (action.type === EVENTS.reset) {\n      // Remove stored data\n      [ USER_ID, USER_TRAITS, ANON_ID ].forEach((key) => {\n        // Fires async removeItem dispatch\n        removeItem(key)\n      });\n      [ ID, ANONID, 'traits' ].forEach((key) => {\n        // Remove from global context\n        remove(tempKey(key))\n      })\n    }\n\n    if (action.type === EVENTS.identify) {\n      /* If no anon id. Set it! */\n      if (!getItem(ANON_ID)) {\n        setItem(ANON_ID, uuid())\n      }\n\n      const currentId = getItem(USER_ID)\n      const currentTraits = getItem(USER_TRAITS) || {}\n\n      if (currentId && (currentId !== userId)) {\n        store.dispatch({\n          type: EVENTS.userIdChanged,\n          old: {\n            userId: currentId,\n            traits: currentTraits,\n          },\n          new: {\n            userId,\n            traits\n          },\n          options: options,\n        })\n      }\n\n      /* Save user id */\n      if (userId) {\n        setItem(USER_ID, userId)\n      }\n\n      /* Save user traits */\n      if (traits) {\n        setItem(USER_TRAITS, {\n          ...currentTraits,\n          ...traits\n        })\n      }\n    }\n    return next(action)\n  }\n}\n","import { isFunction } from '@analytics/type-utils'\n\n// Stack to temporarily hold deferred promises/callbacks\nconst stack = {}\n\nfunction runCallback(id, payload) {\n  if (stack[id] && isFunction(stack[id])) {\n    // console.log(`run ${id}`)\n    stack[id](payload)\n    delete stack[id]\n  }\n}\n\nexport { stack, runCallback }","/**\n * Wait until a given analytics provider is ready.\n * @param  {Object} data - passthrough resolve data\n * @param  {Function} predicate - function that resolves true\n * @param  {Number} timeout - max wait time\n * @return {Promise}\n */\nexport default function waitForReady(data, predicate, timeout) {\n  return new Promise((resolve, reject) => {\n    if (predicate()) {\n      return resolve(data)\n    }\n    // Timeout. Add to queue\n    if (timeout < 1) {\n      return reject({ ...data, queue: true }) // eslint-disable-line\n    }\n    // Else recursive retry\n    return pause(10).then(_ => {\n      return waitForReady(data, predicate, timeout - 10).then(resolve, reject)\n    })\n  })\n}\n\nfunction pause(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { isFunction, isObject } from '@analytics/type-utils'\nimport { ID, ANONID } from './internalConstants.js'\n\nfunction abort(reason) {\n  return { abort: reason }\n}\n\nexport function processQueue(store, getPlugins, instance) {\n  const abortedCalls = {}\n  const pluginMethods = getPlugins()\n  const { plugins, context, queue, user } = store.getState()\n  const isOnline = !context.offline\n  /* If network connection found and there is items in queue, process them all */\n  if (isOnline && queue && queue.actions && queue.actions.length) {\n    const pipeline = queue.actions.reduce((acc, item, index) => {\n      const isLoaded = plugins[item.plugin].loaded\n      if (isLoaded) {\n        acc.process.push(item)\n        acc.processIndex.push(index)\n      } else {\n        acc.requeue.push(item)\n        acc.requeueIndex.push(index)\n      }\n      return acc\n    }, {\n      processIndex: [],\n      process: [],\n      requeue: [],\n      requeueIndex: []\n    })\n\n    if (pipeline.processIndex && pipeline.processIndex.length) {\n      pipeline.processIndex.forEach((i) => {\n        const processAction = queue.actions[i]\n        // console.log('RePROCESS THIS>', processAction)\n        // Call methods directly right now\n        const currentPlugin = processAction.plugin\n        const currentMethod = processAction.payload.type\n        const method = pluginMethods[currentPlugin][currentMethod]\n        if (method && isFunction(method)) {\n          /* enrich queued payload with userId / anon id if missing */\n          /* TODO hoist enrich into where action queued? */\n          // console.log('before', processAction.payload)\n          const enrichedPayload = enrich(processAction.payload, user)\n          // console.log('user.userId', user.userId)\n          // console.log('user.anonymousId', user.anonymousId)\n          // console.log('after enrich', enrichedPayload)\n          let retVal\n          const isAborted = abortedCalls[enrichedPayload.meta.rid]\n          /* if not aborted call method */\n          if (!isAborted) {\n            // TODO make async\n            retVal = method({\n              payload: enrichedPayload,\n              config: plugins[currentPlugin].config,\n              instance,\n              abort\n            })\n            // If aborted, cancel the downstream calls\n            if (retVal && isObject(retVal) && retVal.abort) {\n              abortedCalls[enrichedPayload.meta.rid] = true\n              return\n            }\n          }\n\n          /* Then redispatch for .on listeners / other middleware */\n          if (!isAborted) {\n            const pluginEvent = `${currentMethod}:${currentPlugin}`\n            store.dispatch({\n              ...enrichedPayload,\n              type: pluginEvent,\n              /* Internal data for analytics engine */\n              _: {\n                called: pluginEvent,\n                from: 'queueDrain'\n              }\n            })\n          }\n        }\n      })\n\n      /* Removed processed actions */\n      const reQueueActions = queue.actions.filter((value, index) => {\n        // note !~ === return pipeline.processIndex.indexOf(index) === -1\n        return !~pipeline.processIndex.indexOf(index)\n      })\n\n      /* Set queue actions. TODO refactor to non mutatable or move out of redux */\n      queue.actions = reQueueActions\n\n      /*\n      if (!reQueueActions.length) {\n        console.log('Queue clears')\n        console.log('abortedCalls', abortedCalls)\n      }\n      /** */\n    }\n  }\n}\n\n/* Heartbeat retries queued events */\nexport default function heartBeat(store, getPlugins, instance) {\n  // 3e3 === 3000 ms\n  return setInterval(() => processQueue(store, getPlugins, instance), 3e3)\n}\n\n// Assign userId && anonymousId values if present in payload but null\nfunction enrich(payload = {}, user = {}) {\n  return [ ID, ANONID ].reduce((acc, key) => {\n    if (payload.hasOwnProperty(key) && user[key] && (user[key] !== payload[key])) {\n      // console.log(`${key} stale update with ${user[key]}`)\n      acc[key] = user[key]\n    }\n    return acc\n  }, payload)\n}\n","import EVENTS from '../../events.js'\nimport fitlerDisabledPlugins from '../../utils/filterDisabled.js'\nimport { isFunction, isObject, isString } from '@analytics/type-utils'\nimport { runCallback } from '../../utils/callback-stack.js'\n\nconst endsWithStartRegex = /Start$/\nconst bootstrapRegex = /^bootstrap/\nconst readyRegex = /^ready/\n\nexport default async function (action, getPlugins, instance, store, eventsInfo) {\n  const pluginObject = isFunction(getPlugins) ? getPlugins() : getPlugins\n  const originalType = action.type\n  const updatedType = originalType.replace(endsWithStartRegex, '')\n\n  /* If action already dispatched exit early. This makes it so plugin methods are not fired twice. */\n  if (action._ && action._.called) {\n    // console.log('Already called', action._.called)\n    return action\n  }\n\n  const state = instance.getState()\n  /* Remove plugins that are disabled by options or by settings */\n  let activePlugins = fitlerDisabledPlugins(pluginObject, state.plugins, action.options)\n\n  /* If analytics.plugin.enable calls do special behavior */\n  if (originalType === EVENTS.initializeStart && action.fromEnable) {\n    // Return list of all enabled plugins that have NOT been initialized yet\n    activePlugins = Object.keys(state.plugins).filter((name) => {\n      const info = state.plugins[name]\n      return action.plugins.includes(name) && !info.initialized\n    }).map((name) => pluginObject[name])\n  }\n  // console.log(`engine activePlugins ${action.type}`, activePlugins)\n\n  const allActivePluginKeys = activePlugins.map((p) => p.name)\n  // console.log('allActivePluginKeys', allActivePluginKeys)\n  const allMatches = getAllMatchingCalls(originalType, activePlugins, pluginObject)\n  // console.log('allMatches', allMatches)\n\n  /* @TODO cache matches and purge on enable/disable/add plugin */\n\n  /**\n   * Process all 'actionBefore' hooks\n   * Example:\n   *  This is processes 'pageStart' methods from plugins and update the event to send through the chain\n   */\n  const actionBefore = await processEvent({\n    action: action,\n    data: {\n      exact: allMatches.before,\n      namespaced: allMatches.beforeNS\n    },\n    state: state,\n    allPlugins: pluginObject,\n    allMatches,\n    instance,\n    store,\n    EVENTS: eventsInfo\n  })\n  // console.log('____ actionBefore out', actionBefore)\n\n  /* Abort if ‘eventBefore’ returns abort data */\n  if (shouldAbortAll(actionBefore, allActivePluginKeys.length)) {\n    return actionBefore\n  }\n\n  /* Filter over the plugin method calls and remove aborted plugin by name */\n  // const activeAndNonAbortedCalls = activePlugins.filter((plugin) => {\n  //   if (shouldAbort(actionBefore, plugin.name)) return false\n  //   return true\n  // })\n  // console.log(`activeAndNonAbortedCalls ${action.type}`, activeAndNonAbortedCalls)\n\n  let actionDuring\n  if (originalType === updatedType) {\n    /* If type the same don't double process */\n    actionDuring = actionBefore\n  } else {\n    /**\n     * Process all 'action' hooks\n     * Example: This is process 'page' methods from plugins and update the event to send through\n     */\n    actionDuring = await processEvent({\n      action: {\n        ...actionBefore,\n        type: updatedType\n      },\n      data: {\n        exact: allMatches.during,\n        namespaced: allMatches.duringNS\n      },\n      state: state,\n      allPlugins: pluginObject,\n      allMatches,\n      instance,\n      store,\n      EVENTS: eventsInfo\n    })\n  }\n  // console.log('____ actionDuring', actionDuring)\n\n  /**\n   * Process all 'actionEnd' hooks\n   * Example:\n   *  This is process 'pageEnd' methods from plugins and update the event to send through\n   */\n  // Only trigger `eventTypeEnd` if originalAction has Start ending.\n  if (originalType.match(endsWithStartRegex)) {\n    const afterName = `${updatedType}End`\n    const actionAfter = await processEvent({\n      action: {\n        ...actionDuring,\n        type: afterName\n      },\n      data: {\n        exact: allMatches.after,\n        namespaced: allMatches.afterNS\n      },\n      state: state,\n      allPlugins: pluginObject,\n      allMatches,\n      instance,\n      store,\n      EVENTS: eventsInfo\n    })\n    // console.log('____ actionAfter', actionAfter)\n\n    /* Fire callback if supplied */\n    if (actionAfter.meta && actionAfter.meta.hasCallback) {\n      /*\n      console.log('End of engine action has callback')\n      console.log(actionAfter.meta)\n      console.log('stack', stack)\n      /** */\n\n      // @TODO figure out exact args calls and .on will get\n      runCallback(actionAfter.meta.rid, { payload: actionAfter })\n    }\n  }\n\n  return actionBefore\n}\n\n/**\n * Async reduce over matched plugin methods\n * Fires plugin functions\n */\nasync function processEvent({\n  data,\n  action,\n  instance,\n  state,\n  allPlugins,\n  allMatches,\n  store,\n  EVENTS\n}) {\n  const { plugins, context } = state\n  const method = action.type\n  const isStartEvent = method.match(endsWithStartRegex)\n  // console.log(`data ${method}`, data)\n  // console.log(`data allMatches ${method}`, allMatches)\n  let abortable = data.exact.map((x) => {\n    return x.pluginName\n  })\n\n  /* If abort is called from xyzStart */\n  if (isStartEvent) {\n    abortable = allMatches.during.map((x) => {\n      return x.pluginName\n    })\n  }\n\n  /* make args for functions to concume */\n  const makeArgs = argumentFactory(instance, abortable)\n  // console.log('makeArgs', makeArgs)\n\n  /* Check if plugin loaded, if not mark action for queue */\n  const queueData = data.exact.reduce((acc, thing) => {\n    const { pluginName, methodName } = thing\n    let addToQueue = false\n    // Queue actions if plugin not loaded except for initialize and reset\n    if (!methodName.match(/^initialize/) && !methodName.match(/^reset/)) {\n      addToQueue = !plugins[pluginName].loaded\n    }\n    /* If offline and its a core method. Add to queue */\n    if (context.offline && (methodName.match(/^(page|track|identify)/))) {\n      addToQueue = true\n    }\n    acc[`${pluginName}`] = addToQueue\n    return acc\n  }, {})\n\n  /* generate plugin specific payloads */\n  const payloads = await data.exact.reduce(async (scoped, curr, i) => {\n    const { pluginName } = curr\n    const curScope = await scoped\n    if (data.namespaced && data.namespaced[pluginName]) {\n      const scopedPayload = await data.namespaced[pluginName].reduce(async (acc, p, count) => {\n        // await value\n        const curScopeData = await acc\n        if (!p.method || !isFunction(p.method)) {\n          return curScopeData\n        }\n\n        /* Make sure plugins don’t call themselves */\n        validateMethod(p.methodName, p.pluginName)\n\n        function genAbort(currentAct, pname, otherPlug) {\n          return function (reason, plugins) {\n            const callsite = otherPlug || pname\n            // console.log(`__abort msg: ${reason}`)\n            // console.log(`__abort ${pname}`)\n            // console.log(`__abort xxx: ${plugins}`)\n            // console.log(`__abort otherPlug`, otherPlug)\n            return {\n              ...currentAct,\n              abort: {\n                reason: reason,\n                plugins: plugins || [pname],\n                caller: method,\n                from: callsite\n              }\n            }\n          }\n        }\n\n        const val = await p.method({\n          payload: curScopeData,\n          instance,\n          abort: genAbort(curScopeData, pluginName, p.pluginName),\n          config: getConfig(p.pluginName, plugins, allPlugins),\n          plugins: plugins\n        })\n        const returnValue = isObject(val) ? val : {}\n        return Promise.resolve({\n          ...curScopeData,\n          ...returnValue\n        })\n      }, Promise.resolve(action))\n\n      /* Set scoped payload */\n      curScope[pluginName] = scopedPayload\n    } else {\n      /* Set payload as default action */\n      curScope[pluginName] = action\n    }\n    return Promise.resolve(curScope)\n  }, Promise.resolve({}))\n  // console.log(`aaa scoped payloads ${action.type}`, payloads)\n\n  // Then call the normal methods with scoped payload\n  const resolvedAction = await data.exact.reduce(async (promise, curr, i) => {\n    const lastLoop = data.exact.length === (i + 1)\n    const { pluginName } = curr\n    const currentPlugin = allPlugins[pluginName]\n    const currentActionValue = await promise\n\n    let payloadValue = (payloads[pluginName]) ? payloads[pluginName] : {}\n    /* If eventStart, allow for value merging */\n    if (isStartEvent) {\n      payloadValue = currentActionValue\n    }\n\n    if (shouldAbort(payloadValue, pluginName)) {\n      // console.log(`> Abort from payload specific \"${pluginName}\" abort value`, payloadValue)\n      abortDispatch({\n        data: payloadValue,\n        method,\n        instance,\n        pluginName,\n        store\n      })\n      return Promise.resolve(currentActionValue)\n    }\n    if (shouldAbort(currentActionValue, pluginName)) {\n      // console.log(`> Abort from ${method} abort value`, currentActionValue)\n      if (lastLoop) {\n        abortDispatch({\n          data: currentActionValue,\n          method,\n          instance,\n          // pluginName,\n          store\n        })\n      }\n      return Promise.resolve(currentActionValue)\n    }\n\n    if (queueData.hasOwnProperty(pluginName) && queueData[pluginName] === true) {\n      // console.log('Queue this instead', pluginName)\n      store.dispatch({\n        type: `queue`,\n        plugin: pluginName,\n        payload: payloadValue,\n        /* Internal data for analytics engine */\n        _: {\n          called: `queue`,\n          from: 'queueMechanism' // for debugging\n        }\n      })\n      return Promise.resolve(currentActionValue)\n    }\n    /*\n    const checkForLoaded = () => {\n      const p = instance.getState('plugins')\n      return p[currentPlugin.name].loaded\n    }\n    // const p = instance.getState('plugins')\n    console.log(`loaded \"${currentPlugin.name}\" > ${method}:`, p[currentPlugin.name].loaded)\n    // await waitForReady(currentPlugin, checkForLoaded, 10000).then((d) => {\n    //   console.log(`Loaded ${method}`, currentPlugin.name)\n    // }).catch((e) => {\n    //   console.log(`Error ${method} ${currentPlugin.name}`, e)\n    //   // TODO dispatch failure\n    // })\n    */\n\n    // @TODO figure out if we want queuing semantics\n\n    const funcArgs = makeArgs(payloads[pluginName], allPlugins[pluginName])\n\n    // console.log(`funcArgs ${method} ${pluginName}`, funcArgs)\n\n    /* Run the plugin function */\n    const val = await currentPlugin[method]({\n      // currentPlugin: pluginName,\n      abort: funcArgs.abort,\n      // Send in original action value or scope payload\n      payload: payloadValue,\n      instance,\n      config: getConfig(pluginName, plugins, allPlugins),\n      plugins: plugins\n    })\n\n    const returnValue = isObject(val) ? val : {}\n    const merged = {\n      ...currentActionValue,\n      ...returnValue\n    }\n\n    const scopedPayload = payloads[pluginName] // || currentActionValue\n    if (shouldAbort(scopedPayload, pluginName)) {\n      // console.log(`>> HANDLE abort ${method} ${pluginName}`)\n      abortDispatch({\n        data: scopedPayload,\n        method,\n        instance,\n        pluginName,\n        store\n      })\n    } else {\n      const nameSpaceEvent = `${method}:${pluginName}`\n      const actionDepth = (nameSpaceEvent.match(/:/g) || []).length\n      if (actionDepth < 2 && !method.match(bootstrapRegex) && !method.match(readyRegex)) {\n        const updatedPayload = (isStartEvent) ? merged : payloadValue\n        // Dispatched for `.on('xyz') listeners.\n        instance.dispatch({\n          ...updatedPayload,\n          type: nameSpaceEvent,\n          _: {\n            called: nameSpaceEvent,\n            from: 'submethod'\n          }\n        })\n      }\n    }\n    // console.log('merged', merged)\n    return Promise.resolve(merged)\n  }, Promise.resolve(action))\n\n  // Dispatch End. Make sure actions don't get double dispatched. EG userIdChanged\n  if (!method.match(endsWithStartRegex) &&\n      !method.match(/^registerPlugin/) &&\n      // !method.match(/^disablePlugin/) &&\n      // !method.match(/^enablePlugin/) &&\n      !method.match(readyRegex) &&\n      !method.match(bootstrapRegex) &&\n      !method.match(/^params/) &&\n      !method.match(/^userIdChanged/)\n  ) {\n    if (EVENTS.plugins.includes(method)) {\n      // console.log(`Dont dispatch for ${method}`, resolvedAction)\n      // return resolvedAction\n    }\n    /*\n      Verify this original action setup.\n      It's intended to keep actions from double dispatching themselves\n    */\n    if (resolvedAction._ && resolvedAction._.originalAction === method) {\n      // console.log(`Dont dispatch for ${method}`, resolvedAction)\n      return resolvedAction\n    }\n\n    let endAction = {\n      ...resolvedAction,\n      ...{\n        _: {\n          originalAction: resolvedAction.type,\n          called: resolvedAction.type,\n          from: 'engineEnd'\n        }\n      }\n    }\n\n    /* If all plugins are aborted, dispatch xAborted */\n    if (shouldAbortAll(resolvedAction, data.exact.length) && !method.match(/End$/)) {\n      endAction = {\n        ...endAction,\n        ...{\n          type: resolvedAction.type + 'Aborted',\n        }\n      }\n    }\n\n    store.dispatch(endAction)\n  }\n\n  return resolvedAction\n}\n\nfunction abortDispatch({ data, method, instance, pluginName, store }) {\n  const postFix = (pluginName) ? ':' + pluginName : ''\n  const abortEvent = method + 'Aborted' + postFix\n  store.dispatch({\n    ...data,\n    type: abortEvent,\n    _: {\n      called: abortEvent,\n      from: 'abort'\n    }\n  })\n}\n\nfunction getConfig(name, pluginState, allPlugins) {\n  const pluginData = pluginState[name] || allPlugins[name]\n  if (pluginData && pluginData.config) {\n    return pluginData.config\n  }\n  return {}\n}\n\nfunction getPluginFunctions(methodName, plugins) {\n  return plugins.reduce((arr, plugin) => {\n    return (!plugin[methodName]) ? arr : arr.concat({\n      methodName: methodName,\n      pluginName: plugin.name,\n      method: plugin[methodName],\n    })\n  }, [])\n}\n\nfunction formatMethod(type) {\n  return type.replace(endsWithStartRegex, '')\n}\n\n/**\n * Return array of event names\n * @param  {String} eventType - original event type\n * @param  {String} namespace - optional namespace postfix\n * @return {array} - type, method, end\n */\nfunction getEventNames(eventType, namespace) {\n  const method = formatMethod(eventType)\n  const postFix = (namespace) ? `:${namespace}` : ''\n  // `typeStart:pluginName`\n  const type = `${eventType}${postFix}`\n  // `type:pluginName`\n  const methodName = `${method}${postFix}`\n  // `typeEnd:pluginName`\n  const end = `${method}End${postFix}`\n  return [ type, methodName, end ]\n}\n\n/* Collect all calls for a given event in the system */\nfunction getAllMatchingCalls(eventType, activePlugins, allPlugins) {\n  const eventNames = getEventNames(eventType)\n  // console.log('eventNames', eventNames)\n  // 'eventStart', 'event', & `eventEnd`\n  const core = eventNames.map((word) => {\n    return getPluginFunctions(word, activePlugins)\n  })\n  // Gather nameSpaced Events\n  return activePlugins.reduce((acc, plugin) => {\n    const { name } = plugin\n    const nameSpacedEvents = getEventNames(eventType, name)\n    // console.log('eventNames namespaced', nameSpacedEvents)\n    const [ beforeFuncs, duringFuncs, afterFuncs ] = nameSpacedEvents.map((word) => {\n      return getPluginFunctions(word, activePlugins)\n    })\n\n    if (beforeFuncs.length) {\n      acc.beforeNS[name] = beforeFuncs\n    }\n    if (duringFuncs.length) {\n      acc.duringNS[name] = duringFuncs\n    }\n    if (afterFuncs.length) {\n      acc.afterNS[name] = afterFuncs\n    }\n    return acc\n  }, {\n    before: core[0],\n    beforeNS: {},\n    during: core[1],\n    duringNS: {},\n    after: core[2],\n    afterNS: {}\n  })\n}\n\nfunction shouldAbort({ abort }, pluginName) {\n  if (!abort) return false\n  if (abort === true) return true\n  return includes(abort, pluginName) || (abort && includes(abort.plugins, pluginName))\n}\n\nfunction shouldAbortAll({ abort }, pluginsCount) {\n  if (!abort) return false\n  if (abort === true || isString(abort)) return true\n  const { plugins } = abort\n  return (isArray(abort) && (abort.length === pluginsCount)) || (isArray(plugins) && (plugins.length === pluginsCount))\n}\n\nfunction isArray(arr) {\n  return Array.isArray(arr)\n}\n\nfunction includes(arr, name) {\n  if (!arr || !isArray(arr)) return false\n  return arr.includes(name)\n}\n\n/**\n * Generate arguments to pass to plugin methods\n * @param  {Object} instance - analytics instance\n * @param  {array} abortablePlugins - plugins that can be cancelled by caller\n * @return {*} function to inject plugin params\n */\nfunction argumentFactory(instance, abortablePlugins) {\n  // console.log('abortablePlugins', abortablePlugins)\n  return function (action, plugin, otherPlugin) {\n    const { config, name } = plugin\n    let method = `${name}.${action.type}`\n    if (otherPlugin) {\n      method = otherPlugin.event\n    }\n\n    const abortF = (action.type.match(endsWithStartRegex))\n      ? abortFunction(name, method, abortablePlugins, otherPlugin, action)\n      : notAbortableError(action, method)\n\n    return {\n      /* self: plugin, for future maybe */\n      // clone objects to avoid reassign\n      payload: formatPayload(action),\n      instance: instance,\n      config: config || {},\n      abort: abortF\n    }\n  }\n}\n\nfunction abortFunction(pluginName, method, abortablePlugins, otherPlugin, action) {\n  return function (reason, plugins) {\n    const caller = (otherPlugin) ? otherPlugin.name : pluginName\n    let pluginsToAbort = (plugins && isArray(plugins)) ? plugins : abortablePlugins\n    if (otherPlugin) {\n      pluginsToAbort = (plugins && isArray(plugins)) ? plugins : [pluginName]\n      if (!pluginsToAbort.includes(pluginName) || pluginsToAbort.length !== 1) {\n        throw new Error(`Method ${method} can only abort ${pluginName} plugin. ${JSON.stringify(pluginsToAbort)} input valid`)\n      }\n    }\n    return {\n      ...action, // 🔥 todo verify this merge is ok\n      abort: {\n        reason: reason,\n        plugins: pluginsToAbort,\n        caller: method,\n        _: caller\n      }\n    }\n  }\n}\n\nfunction notAbortableError(action, method) {\n  return () => {\n    throw new Error(action.type + ' action not cancellable. Remove abort in ' + method)\n  }\n}\n\n/**\n * Verify plugin is not calling itself with whatever:myPluginName self refs\n */\nfunction validateMethod(actionName, pluginName) {\n  const text = getNameSpacedAction(actionName)\n  const methodCallMatchesPluginNamespace = text && (text.name === pluginName)\n  if (methodCallMatchesPluginNamespace) {\n    const sub = getNameSpacedAction(text.method)\n    const subText = (sub) ? 'or ' + sub.method : ''\n    throw new Error([ pluginName + ' plugin is calling method ' + actionName,\n      'Plugins cant call self',\n      `Use ${text.method} ${subText} in ${pluginName} plugin insteadof ${actionName}`]\n      .join('\\n')\n    )\n  }\n}\n\nfunction getNameSpacedAction(event) {\n  const split = event.match(/(.*):(.*)/)\n  if (!split) {\n    return false\n  }\n  return {\n    method: split[1],\n    name: split[2],\n  }\n}\n\nfunction formatPayload(action) {\n  return Object.keys(action).reduce((acc, key) => {\n    // redact type from { payload }\n    if (key === 'type') {\n      return acc\n    }\n    if (isObject(action[key])) {\n      acc[key] = Object.assign({}, action[key])\n    } else {\n      acc[key] = action[key]\n    }\n    return acc\n  }, {})\n}\n\n/*\nfunction getMatchingMethods(eventType, activePlugins) {\n  const exact = getPluginFunctions(eventType, activePlugins)\n  // console.log('exact', exact)\n  // Gather nameSpaced Events\n  return activePlugins.reduce((acc, plugin) => {\n    const { name } = plugin\n    const clean = getPluginFunctions(`${eventType}:${name}`, activePlugins)\n    if (clean.length) {\n      acc.namespaced[name] = clean\n    }\n    return acc\n  }, {\n    exact: exact,\n    namespaced: {}\n  })\n}\n*/\n","import EVENTS, { nonEvents } from '../../events.js'\nimport { runCallback, stack } from '../../utils/callback-stack.js'\nimport waitForReady from '../../utils/waitForReady.js'\nimport { processQueue } from '../../utils/heartbeat.js'\nimport runPlugins from './engine.js'\n\nexport default function pluginMiddleware(instance, getPlugins, systemEvents) {\n  const isReady = {}\n  return store => next => async action => {\n    const { type, abort, plugins } = action\n    let updatedAction = action\n\n    if (abort) {\n      return next(action)\n    }\n\n    /* Analytics.plugins.enable called, we need to init the plugins */\n    if (type === EVENTS.enablePlugin) {\n      store.dispatch({\n        type: EVENTS.initializeStart,\n        plugins: plugins,\n        disabled: [],\n        fromEnable: true,\n        meta: action.meta\n      })\n    }\n    \n    if (type === EVENTS.disablePlugin) {\n      // If cached callback, resolve promise/run callback. debounced to fix race condition\n      setTimeout(() => runCallback(action.meta.rid, { payload: action }), 0)\n    }\n\n    /* @TODO implement\n    if (type === EVENTS.loadPlugin) {\n      // Rerun initialize calls in plugins\n      const allPlugins = getPlugins()\n      const pluginsToLoad = Object.keys(allPlugins).filter((name) => {\n        return plugins.includes(name)\n      }).reduce((acc, curr) => {\n        acc[curr] = allPlugins[curr]\n        return acc\n      }, {})\n      const initializeAction = {\n        type: EVENTS.initializeStart,\n        plugins: plugins\n      }\n      const updated = await runPlugins(initializeAction, pluginsToLoad, instance, store, systemEvents)\n      return next(updated)\n    }\n    */\n\n    //  || type.match(/^initializeAbort:/)\n    if (type === EVENTS.initializeEnd) {\n      const allPlugins = getPlugins()\n      const pluginsArray = Object.keys(allPlugins)\n      const allRegisteredPlugins = pluginsArray.filter((name) => {\n        return plugins.includes(name)\n      }).map((name) => {\n        return allPlugins[name]\n      })\n      let completed = []\n      let failed = []\n      let disabled = action.disabled\n      // console.log('allRegisteredPlugins', allRegisteredPlugins)\n      const waitForPluginsToLoad = allRegisteredPlugins.map((plugin) => {\n        const { loaded, name, config } = plugin\n        const loadedFn = () => loaded({ config }) // @TODO add in more to api to match other funcs?\n        /* Plugins will abort trying to load after 10 seconds. 1e4 === 10000 MS */\n        return waitForReady(plugin, loadedFn, 1e4).then((d) => {\n          if (!isReady[name]) {\n            // only dispatch namespaced rdy once\n            store.dispatch({\n              type: EVENTS.pluginReadyType(name), // `ready:${name}`\n              name: name,\n              events: Object.keys(plugin).filter((name) => {\n                return !nonEvents.includes(name)\n              })\n            })\n            isReady[name] = true\n          }\n          completed = completed.concat(name)\n\n          return plugin\n          // It's loaded! run the command\n        }).catch((e) => {\n          // Timeout Add to queue\n          // console.log('Error generic waitForReady. Push this to queue', e)\n          if (e instanceof Error) {\n            throw new Error(e)\n          }\n          failed = failed.concat(e.name)\n          // Failed to fire, add to queue\n          return e\n        })\n      })\n\n      Promise.all(waitForPluginsToLoad).then((calls) => {\n        // setTimeout to ensure runs after 'page'\n        const payload = {\n          plugins: completed,\n          failed: failed,\n          disabled: disabled\n        }\n        setTimeout(() => {\n          if (pluginsArray.length === (waitForPluginsToLoad.length + disabled.length)) {\n            store.dispatch({\n              ...{ type: EVENTS.ready },\n              ...payload,\n              \n            })\n          }\n        }, 0)\n      })\n    }\n\n    /* New plugin system */\n    if (type !== EVENTS.bootstrap) {\n      if (/^ready:([^:]*)$/.test(type)) {\n        // Immediately flush queue\n        setTimeout(() => processQueue(store, getPlugins, instance), 0)\n      }\n      const updated = await runPlugins(action, getPlugins, instance, store, systemEvents)\n      return next(updated)\n    }\n\n    return next(updatedAction)\n  }\n}\n","import { isBoolean } from '@analytics/type-utils'\n\nexport default function fitlerDisabledPlugins(allPlugins, settings = {}, options = {}) {\n  return Object.keys(allPlugins).filter((name) => {\n    const fromCallOptions = options.plugins || {}\n    // If enabled/disabled by options. Override settings\n    if (isBoolean(fromCallOptions[name])) {\n      return fromCallOptions[name]\n    }\n    // If all: false disable everything unless true explicitly set\n    if (fromCallOptions.all === false) {\n      return false\n    }\n    // else use state.plugin settings\n    if (settings[name] && settings[name].enabled === false) {\n      return false\n    }\n    return true\n  }).map((name) => allPlugins[name])\n}\n","import EVENTS from '../events.js'\n\nexport default function storageMiddleware(storage) {\n  return store => next => action => {\n    const { type, key, value, options } = action\n    if (type === EVENTS.setItem || type === EVENTS.removeItem) {\n      if (action.abort) {\n        return next(action)\n      }\n      // Run storage set or remove\n      if (type === EVENTS.setItem) {\n        storage.setItem(key, value, options)\n      } else {\n        storage.removeItem(key, options)\n      }\n    }\n    return next(action)\n  }\n}\n\n/*\n  Todo: emit events for keys we care about\n  window.addEventListener('storage', (event) => console.log(event));\n*/\n","import { compose } from '../vendor/redux/index.js'\n\n/* Class to fix dynamic middlewares from conflicting with each other\nif more than one analytic instance is active */\nexport default class DynamicMiddleware {\n  before = []\n  after = []\n  addMiddleware = (middlewares, position) => {\n    this[position] = this[position].concat(middlewares)\n  }\n  removeMiddleware = (middleware, position) => {\n    const index = this[position].findIndex(d => d === middleware)\n    if (index === -1) return\n\n    this[position] = [\n      ...this[position].slice(0, index),\n      ...this[position].slice(index + 1),\n    ]\n  }\n  /* Not currently in use\n  resetMiddlewares = (position) => {\n    if (!position) {\n      this.before = []\n      this.after = []\n    } else {\n      this[position] = []\n    }\n  }\n  */\n  dynamicMiddlewares = (position) => {\n    return store => next => action => {\n      const middlewareAPI = {\n        getState: store.getState,\n        dispatch: (act) => store.dispatch(act),\n      }\n      const chain = this[position].map(middleware => middleware(middlewareAPI))\n      return compose(...chain)(next)(action)\n    }\n  }\n}\n","// Integrations Reducer. Follows ducks pattern http://bit.ly/2DnERMc\nimport EVENTS from '../events.js'\n\nexport default function createReducer(getPlugins) {\n  return function plugins(state = {}, action) {\n    let newState = {}\n    if (action.type === 'initialize:aborted') {\n      return state\n    }\n    if (/^registerPlugin:([^:]*)$/.test(action.type)) {\n      const name = getNameFromEventType(action.type, 'registerPlugin')\n      const plugin = getPlugins()[name]\n      if (!plugin || !name) {\n        return state\n      }\n      const isEnabled = action.enabled\n      const config = plugin.config\n      newState[name] = {\n        enabled: isEnabled,\n        /* if no initialization method. Set initialized true */\n        initialized: (isEnabled) ? Boolean(!plugin.initialize) : false,\n        /* If plugin enabled === false, set loaded to false, else check plugin.loaded function */\n        loaded: (isEnabled) ? Boolean(plugin.loaded({ config })) : false,\n        config\n      }\n      return { ...state, ...newState }\n    }\n    if (/^initialize:([^:]*)$/.test(action.type)) {\n      const name = getNameFromEventType(action.type, EVENTS.initialize)\n      const plugin = getPlugins()[name]\n      if (!plugin || !name) {\n        return state\n      }\n      const config = plugin.config\n      newState[name] = {\n        ...state[name],\n        ...{\n          initialized: true,\n          /* check plugin.loaded function */\n          loaded: Boolean(plugin.loaded({ config }))\n        }\n      }\n      return { ...state, ...newState }\n    }\n    if (/^ready:([^:]*)$/.test(action.type)) {\n      // const name = getNameFromEventType(action.type, 'ready')\n      newState[action.name] = {\n        ...state[action.name],\n        ...{ loaded: true }\n      }\n      return { ...state, ...newState }\n    }\n    switch (action.type) {\n      /* case EVENTS.pluginFailed:\n        // console.log('PLUGIN_FAILED', action.name)\n        newState[action.name] = {\n          ...state[action.name],\n          ...{ loaded: false }\n        }\n        return { ...state, ...newState }\n      */\n      /* When analytics.plugins.disable called */\n      case EVENTS.disablePlugin:\n        return { \n          ...state,\n          ...togglePluginStatus(action.plugins, false, state)\n        }\n      /* When analytics.plugins.enable called */\n      case EVENTS.enablePlugin:\n        return {\n          ...state, \n          ...togglePluginStatus(action.plugins, true, state)\n        }\n      default:\n        return state\n    }\n  }\n}\n\nfunction getNameFromEventType(type, baseName) {\n  return type.substring(baseName.length + 1, type.length)\n}\n\nfunction togglePluginStatus(plugins, status, currentState) {\n  return plugins.reduce((acc, pluginKey) => {\n    acc[pluginKey] = {\n      ...currentState[pluginKey],\n      ...{\n        enabled: status \n      }\n    }\n    return acc\n  }, currentState)\n}\n","export default function serialize(obj) {\n  try {\n   return JSON.parse(JSON.stringify(obj))\n  } catch (err) {}\n  return obj\n}","// Track Module. Follows ducks pattern http://bit.ly/2DnERMc\nimport EVENTS from '../events.js'\nimport serialize from '../utils/serialize.js'\n\n// Track State\nconst initialState = {\n  last: {},\n  history: [],\n}\n\n// track reducer\nexport default function trackReducer(state = initialState, action) {\n  const { type, event, properties, options, meta } = action\n\n  switch (type) {\n    case EVENTS.track:\n      const trackEvent = serialize({\n        event,\n        properties,\n        ...(Object.keys(options).length) && { options: options },\n        meta\n      })\n      return {\n        ...state,\n        ...{\n          last: trackEvent,\n          // Todo prevent LARGE arrays https://bit.ly/2MnBwPT\n          history: state.history.concat(trackEvent)\n        }\n      }\n    default:\n      return state\n  }\n}\n","import EVENTS from '../events.js'\n/*\nTODO figure out if this should live in state...\nQueue could be in mermory as well.\nBut also needs to be persisted to storage\n*/\n\nconst initialState = {\n  actions: [],\n}\n\nexport default function queueReducer(state = initialState, action) {\n  const { type, payload } = action\n\n  switch (type) {\n    case 'queue':\n      let actionChain\n      /* prioritize identify in event queue */\n      if (payload && payload.type && payload.type === EVENTS.identify) {\n        actionChain = [action].concat(state.actions)\n      } else {\n        actionChain = state.actions.concat(action)\n      }\n      return {\n        ...state,\n        actions: actionChain\n      }\n    case 'dequeue':\n      return []\n    // todo push events to history\n    default:\n      return state\n  }\n}\n\nexport const queueAction = (data, timestamp) => {\n  return {\n    type: 'queue',\n    timestamp: timestamp,\n    data: data\n  }\n}\n","// Page View Reducer. Follows ducks pattern http://bit.ly/2DnERMc\nimport { isBrowser } from '@analytics/type-utils'\nimport serialize from '../utils/serialize.js'\n\nimport EVENTS from '../events.js'\n\nconst hashRegex = /#.*$/\n\nfunction canonicalUrl() {\n  if (!isBrowser) return\n  const tags = document.getElementsByTagName('link')\n  for (var i = 0, tag; tag = tags[i]; i++) {\n    if (tag.getAttribute('rel') === 'canonical') {\n      return tag.getAttribute('href')\n    }\n  }\n}\n\nfunction urlPath(url) {\n  const regex = /(http[s]?:\\/\\/)?([^\\/\\s]+\\/)(.*)/g\n  const matches = regex.exec(url)\n  const pathMatch = (matches && matches[3]) ? matches[3].split('?')[0].replace(hashRegex, '') : ''\n  return '/' + pathMatch\n}\n\n/**\n * Return the canonical URL and rmove the hash.\n * @param  {string} search - search param\n * @return {string} return current canonical URL\n */\nfunction currentUrl(search) {\n  const canonical = canonicalUrl()\n  if (!canonical) return window.location.href.replace(hashRegex, '')\n  return canonical.match(/\\?/) ? canonical : canonical + search\n}\n\n/**\n * Page data for overides\n * @typedef {object} PageData\n * @property {string} [title] - Page title\n * @property {string} [url] - Page url\n * @property {string} [path] - Page path\n * @property {string} [search] - Page search\n * @property {string} [width] - Page width\n * @property {string} [height] - Page height\n*/\n\n/**\n * Get information about current page\n * @typedef {Function} getPageData\n * @param  {PageData} [pageData = {}] - Page data overides\n * @return {PageData} resolved page data\n */\nexport const getPageData = (pageData = {}) => {\n  if (!isBrowser) return pageData\n  const { title, referrer } = document\n  const { location, innerWidth, innerHeight } = window\n  const { hash, search } = location\n  const url = currentUrl(search)\n  const page = {\n    title: title,\n    url: url,\n    path: urlPath(url),\n    hash: hash,\n    search: search,\n    width: innerWidth,\n    height: innerHeight,\n  }\n  if (referrer && referrer !== '') {\n    page.referrer = referrer\n  }\n\n  return {\n    ...page,\n    /* .page() user overrrides */\n    ...pageData\n  }\n}\n\nconst initialState = {\n  last: {},\n  history: [],\n}\n\n// page reducer\nexport default function page(state = initialState, action) {\n  const { properties, options, meta } = action\n  switch (action.type) {\n    case EVENTS.page:\n      const viewData = serialize({\n        properties,\n        meta,\n        ...(Object.keys(options).length) && { options: options },\n      })\n      return {\n        ...state,\n        ...{\n          last: viewData,\n          // Todo prevent LARGE arrays https://bit.ly/2MnBwPT\n          history: state.history.concat(viewData)\n        }\n      }\n    default:\n      return state\n  }\n}\n","// Context Reducer.  Follows ducks pattern http://bit.ly/2DnERMc\nimport { getBrowserLocale, getTimeZone, uuid } from 'analytics-utils'\nimport { isBrowser } from '@analytics/type-utils'\nimport EVENTS from '../events.js'\nimport { LIB_NAME } from '../utils/internalConstants.js'\nimport getOSNameNode from '../utils/getOSName/node.js'\nimport getOSNameBrowser from '../utils/getOSName/browser.js'\n\nlet osName\nlet referrer\nlet locale\nlet timeZone\nif (BROWSER) {\n  osName = getOSNameBrowser()\n  referrer = (isBrowser) ? document.referrer : null\n  locale = getBrowserLocale()\n  timeZone = getTimeZone()\n} else {\n  osName = getOSNameNode()\n  referrer = {}\n}\n\nconst initialState = {\n  initialized: false,\n  sessionId: uuid(),\n  app: null,\n  version: null,\n  debug: false,\n  offline: (isBrowser) ? !navigator.onLine : false, // use node network is-online\n  os: {\n    name: osName,\n  },\n  userAgent: (isBrowser) ? navigator.userAgent : 'node', // https://github.com/bestiejs/platform.js\n  library: {\n    name: LIB_NAME,\n    // TODO fix version number. npm run publish:patch has wrong version\n    version: VERSION\n  },\n  timezone: timeZone,\n  locale: locale,\n  campaign: {},\n  referrer: referrer,\n}\n\n// context reducer\nexport default function context(state = initialState, action) {\n  const { initialized } = state\n  const { type, campaign } = action\n  switch (type) {\n    case EVENTS.campaign:\n      return {\n        ...state,\n        ...{ campaign: campaign }\n      }\n    case EVENTS.offline:\n      return {\n        ...state,\n        ...{ offline: true }\n      }\n    case EVENTS.online:\n      return {\n        ...state,\n        ...{ offline: false }\n      }\n    default:\n      if (!initialized) {\n        return {\n          ...initialState,\n          ...state,\n          ...{ initialized: true }\n        }\n      }\n      return state\n  }\n}\n\nconst excludeItems = ['plugins', 'reducers', 'storage']\n// Pull plugins and reducers off intital config\nexport function makeContext(config) {\n  return Object.keys(config).reduce((acc, current) => {\n    if (excludeItems.includes(current)) {\n      return acc\n    }\n    acc[current] = config[current]\n    return acc\n  }, {})\n}\n","// import os from 'os'\n\n// TODO fix os. os getting stripped out for node build\nexport default function getNodeOS() {\n  return 'na' // os.platform()\n}\n","import { set, globalContext, KEY } from '@analytics/global-storage-utils'\nimport { compose } from '../vendor/redux/index.js'\nimport { LIB_NAME } from './internalConstants.js'\n\nexport function Debug() {\n  // Global key is window.__global__.analytics\n  set(LIB_NAME, [])\n  // Return debugger\n  return (createStore) => {\n    return (reducer, preloadedState, enhancer) => {\n      const store = createStore(reducer, preloadedState, enhancer)\n      const origDispatch = store.dispatch\n      const dispatch = (action) => {\n        const a = action.action || action\n        globalContext[KEY][LIB_NAME].push(a)\n        return origDispatch(action)\n      }\n      return Object.assign(store, { dispatch: dispatch })\n    }\n  }\n}\n\nexport function composeWithDebug(config) {\n  return function () {\n    return compose(compose.apply(null, arguments), Debug(config))\n  }\n}\n","import { isArray } from '@analytics/type-utils'\n\nexport default function ensureArray(singleOrArray) {\n  if (!singleOrArray) return []\n  if (isArray(singleOrArray)) return singleOrArray\n  return [singleOrArray] \n}","import getCallback from './getCallback.js'\nimport { stack } from './callback-stack.js'\nimport timestamp from './timestamp.js'\nimport { uuid } from 'analytics-utils'\n\n// Async promise resolver\nfunction deferredPromiseResolver(resolver, callback) {\n  return (data) => {\n    if (callback) callback(data)\n    resolver(data)\n  }\n}\n\nexport default function generateMeta(meta = {}, resolve, possibleCallbacks) {\n    const rid = uuid()\n    if (resolve) {\n      // stack[`${rid}-info`] = meta\n      stack[rid] = deferredPromiseResolver(resolve, getCallback(possibleCallbacks))\n    }\n    return {\n      ...meta,\n      rid: rid,\n      ts: timestamp(),\n      ...(!resolve) ? {} : { hasCallback: true },\n    }\n  }","import { isFunction } from '@analytics/type-utils'\n\n/**\n * Grab first function found from arguments\n * @param {array} [argArray] - arguments array to find first function\n * @returns {Function|undefined}\n */\nexport default function getCallbackFromArgs(argArray) {\n  const args = argArray || Array.prototype.slice.call(arguments)\n  let cb\n  for (let i = 0; i < args.length; i++) {\n    if (isFunction(args[i])) {\n      cb = args[i]; break;\n    }\n  }\n  return cb\n}","\nexport default function timeStamp() {\n  return new Date().getTime()\n}\n","import { uuid, paramsParse, dotProp } from 'analytics-utils'\nimport { get, set, remove } from '@analytics/global-storage-utils'\nimport { isBrowser, isFunction, isObject, isString } from '@analytics/type-utils'\nimport { createStore, combineReducers, applyMiddleware, compose } from './vendor/redux/index.js'\nimport * as CONSTANTS from './constants.js'\nimport { ID, ANONID, ERROR_URL } from './utils/internalConstants.js'\nimport EVENTS, { coreEvents, nonEvents, isReservedAction } from './events.js'\n// Middleware\nimport * as middleware from './middleware/index.js'\nimport DynamicMiddleware from './middleware/dynamic.js'\n// Modules\nimport pluginsMiddleware from './modules/plugins.js'\nimport track from './modules/track.js'\nimport queue from './modules/queue.js'\nimport page, { getPageData } from './modules/page.js'\nimport context, { makeContext } from './modules/context.js'\nimport user, { getUserPropFunc, tempKey, getPersistedUserData } from './modules/user.js'\n/* Utils */\nimport { watch } from './utils/handleNetworkEvents.js'\nimport { Debug, composeWithDebug } from './utils/debug.js'\nimport heartBeat from './utils/heartbeat.js'\nimport ensureArray from './utils/ensureArray.js'\nimport enrichMeta from './utils/enrichMeta.js'\nimport './pluginTypeDef.js'\n\n/**\n * Analytics library configuration\n *\n * After the library is initialized with config, the core API is exposed & ready for use in the application.\n *\n * @param {object} config - analytics core config\n * @param {string} [config.app] - Name of site / app\n * @param {string|number} [config.version] - Version of your app\n * @param {boolean} [config.debug] - Should analytics run in debug mode\n * @param {Array.<AnalyticsPlugin>}  [config.plugins] - Array of analytics plugins\n * @return {AnalyticsInstance} Analytics Instance\n * @example\n *\n * import Analytics from 'analytics'\n * import pluginABC from 'analytics-plugin-abc'\n * import pluginXYZ from 'analytics-plugin-xyz'\n *\n * // initialize analytics\n * const analytics = Analytics({\n *   app: 'my-awesome-app',\n *   plugins: [\n *     pluginABC,\n *     pluginXYZ\n *   ]\n * })\n *\n */\nfunction analytics(config = {}) {\n  const customReducers = config.reducers || {}\n  const initialUser = config.initialUser || {}\n  // @TODO add custom value resolvers for userId and anonId\n  // const resolvers = config.resolvers || {}\n  // if (BROWSER) {\n  //   console.log('INIT browser')\n  // }\n  // if (SERVER) {\n  //   console.log('INIT SERVER')\n  // }\n  /* Parse plugins array */\n  const parsedOptions = (config.plugins || []).reduce((acc, plugin) => {\n    if (isFunction(plugin)) {\n      /* Custom redux middleware */\n      acc.middlewares = acc.middlewares.concat(plugin)\n      return acc\n    }\n    // Legacy plugin with name\n    if (plugin.NAMESPACE) plugin.name = plugin.NAMESPACE\n    if (!plugin.name) {\n      /* Plugins must supply a \"name\" property. See error url for more details */\n      throw new Error(ERROR_URL + '1')\n    }\n    // Set config if empty\n    if (!plugin.config) plugin.config = {}\n    // if plugin exposes EVENTS capture available events\n    const definedEvents = (plugin.EVENTS) ? Object.keys(plugin.EVENTS).map((k) => {\n      return plugin.EVENTS[k]\n    }) : []\n\n    const enabledFromMerge = !(plugin.enabled === false)\n    const enabledFromPluginConfig = !(plugin.config.enabled === false)\n    // top level { enabled: false } takes precedence over { config: enabled: false }\n    acc.pluginEnabled[plugin.name] = enabledFromMerge && enabledFromPluginConfig\n    delete plugin.enabled\n\n    if (plugin.methods) {\n      acc.methods[plugin.name] = Object.keys(plugin.methods).reduce((a, c) => {\n        // enrich methods with analytics instance\n        a[c] = appendArguments(plugin.methods[c])\n        return a\n      }, {})\n      // Remove additional methods from plugins\n      delete plugin.methods\n    }\n    // Convert available methods into events\n    const methodsToEvents = Object.keys(plugin)\n    // Combine events\n    const allEvents = methodsToEvents.concat(definedEvents)\n    // Dedupe events list\n    const allEventsUnique = new Set(acc.events.concat(allEvents))\n    acc.events = Array.from(allEventsUnique)\n\n    acc.pluginsArray = acc.pluginsArray.concat(plugin)\n\n    if (acc.plugins[plugin.name]) {\n      throw new Error(plugin.name + 'AlreadyLoaded')\n    }\n    acc.plugins[plugin.name] = plugin\n    if (!acc.plugins[plugin.name].loaded) {\n      // set default loaded func\n      acc.plugins[plugin.name].loaded = () => true\n    }\n    return acc\n  }, {\n    plugins: {},\n    pluginEnabled: {},\n    methods: {},\n    pluginsArray: [],\n    middlewares: [],\n    events: []\n  })\n  \n  /* Storage by default is set to global & is not persisted */\n  const storage = (config.storage) ? config.storage : {\n    getItem: get,\n    setItem: set,\n    removeItem: remove\n  }\n\n  const getUserProp = getUserPropFunc(storage)\n\n  // mutable integrations object for dynamic loading\n  let customPlugins = parsedOptions.plugins\n\n  /* Grab all registered events from plugins loaded */\n  const allPluginEvents = parsedOptions.events.filter((name) => {\n    return !nonEvents.includes(name)\n  }).sort()\n  const uniqueEvents = new Set(allPluginEvents.concat(coreEvents).filter((name) => {\n    return !nonEvents.includes(name)\n  }))\n  const allSystemEvents = Array.from(uniqueEvents).sort()\n\n  /* plugin methods(functions) must be kept out of state. thus they live here */\n  const getPlugins = () => customPlugins\n\n  const {\n    addMiddleware,\n    removeMiddleware,\n    dynamicMiddlewares\n  } = new DynamicMiddleware()\n\n  const nonAbortable = () => {\n    // throw new Error(`${ERROR_URL}3`)\n    throw new Error('Abort disabled inListener')\n  }\n  \n  // Parse URL parameters\n  const params = paramsParse()\n  // Initialize visitor information\n  const persistedUser = getPersistedUserData(storage)\n  const visitorInfo = {\n    ...persistedUser,\n    ...initialUser,\n    ...(!params.an_uid) ? {} : { userId: params.an_uid },\n    ...(!params.an_aid) ? {} : { anonymousId: params.an_aid },\n  }\n  // If no anon id set, create one\n  if (!visitorInfo.anonymousId) {\n    visitorInfo.anonymousId = uuid()\n  }\n\n  /**\n   * Async Management methods for plugins. \n   * \n   * This is also where [custom methods](https://bit.ly/329vFXy) are loaded into the instance.\n   * @typedef {Object} Plugins\n   * @property {EnablePlugin} enable - Set storage value\n   * @property {DisablePlugin} disable - Remove storage value\n   * @example\n   *\n   * // Enable a plugin by namespace\n   * analytics.plugins.enable('keenio')\n   *\n   * // Disable a plugin by namespace\n   * analytics.plugins.disable('google-analytics')\n   */\n  const plugins = {\n    /**\n     * Enable analytics plugin\n     * @typedef {Function} EnablePlugin\n     * @param  {string|string[]} plugins - name of plugins(s) to disable\n     * @param  {Function} [callback] - callback after enable runs\n     * @returns {Promise}\n     * @example\n     *\n     * analytics.plugins.enable('google-analytics').then(() => {\n     *   console.log('do stuff')\n     * })\n     *\n     * // Enable multiple plugins at once\n     * analytics.plugins.enable(['google-analytics', 'segment']).then(() => {\n     *   console.log('do stuff')\n     * })\n     */\n    enable: (plugins, callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.enablePlugin,\n          plugins: ensureArray(plugins),\n          _: { originalAction: EVENTS.enablePlugin },\n        }, resolve, [ callback ])\n      })\n    },\n    /**\n     * Disable analytics plugin\n     * @typedef {Function} DisablePlugin\n     * @param  {string|string[]} plugins - name of integration(s) to disable\n     * @param  {Function} [callback] - callback after disable runs\n     * @returns {Promise}\n     * @example\n     *\n     * analytics.plugins.disable('google').then(() => {\n     *   console.log('do stuff')\n     * })\n     *\n     * analytics.plugins.disable(['google', 'segment']).then(() => {\n     *   console.log('do stuff')\n     * })\n     */\n    disable: (plugins, callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.disablePlugin,\n          plugins: ensureArray(plugins),\n          _: { originalAction: EVENTS.disablePlugin },\n        }, resolve, [callback])\n      })\n    },\n    /*\n     * Load registered analytic providers.\n     * @param  {String} plugins - integration namespace\n     *\n     * @example\n     * analytics.plugins.load('segment')\n     @TODO implement\n    load: (plugins) => {\n      store.dispatch({\n        type: EVENTS.loadPlugin,\n        // Todo handle multiple plugins via array\n        plugins: (plugins) ? [plugins] : Object.keys(getPlugins()),\n      })\n    },\n    */\n    /* @TODO if it stays, state loaded needs to be set. Re PLUGIN_INIT above\n    add: (newPlugin) => {\n      if (typeof newPlugin !== 'object') return false\n      // Set on global integration object\n      customPlugins = Object.assign({}, customPlugins, {\n        [`${newPlugin.name}`]: newPlugin\n      })\n      // then add it, and init state key\n      store.dispatch({\n        type: EVENTS.pluginRegister,\n        name: newPlugin.name,\n        plugin: newPlugin\n      })\n    }, */\n    // Merge in custom plugin methods\n    ...parsedOptions.methods\n  }\n  \n  let readyCalled = false\n  /**\n   * Analytic instance returned from initialization\n   * @typedef {Object} AnalyticsInstance\n   * @property {Identify} identify - Identify a user\n   * @property {Track} track - Track an analytics event\n   * @property {Page} page - Trigger page view\n   * @property {User} user - Get user data\n   * @property {Reset} reset - Clear information about user & reset analytics\n   * @property {Ready} ready - Fire callback on analytics ready event\n   * @property {On} on - Fire callback on analytics lifecycle events.\n   * @property {Once} once - Fire callback on analytics lifecycle events once.\n   * @property {GetState} getState - Get data about user, activity, or context.\n   * @property {Storage} storage - storage methods\n   * @property {Plugins} plugins - plugin methods\n   */\n  const instance = {\n    /**\n    * Identify a user. This will trigger `identify` calls in any installed plugins and will set user data in localStorage\n    * @typedef {Function} Identify\n    * @param  {String}   userId  - Unique ID of user\n    * @param  {Object}   [traits]  - Object of user traits\n    * @param  {Object}   [options] - Options to pass to identify call\n    * @param  {Function} [callback] - Callback function after identify completes\n    * @returns {Promise}\n    * @api public\n    *\n    * @example\n    *\n    * // Basic user id identify\n    * analytics.identify('xyz-123')\n    *\n    * // Identify with additional traits\n    * analytics.identify('xyz-123', {\n    *   name: 'steve',\n    *   company: 'hello-clicky'\n    * })\n    *\n    * // Fire callback with 2nd or 3rd argument\n    * analytics.identify('xyz-123', () => {\n    *   console.log('do this after identify')\n    * })\n    *\n    * // Disable sending user data to specific analytic tools\n    * analytics.identify('xyz-123', {}, {\n    *   plugins: {\n    *     // disable sending this identify call to segment\n    *     segment: false\n    *   }\n    * })\n    *\n    * // Send user data to only to specific analytic tools\n    * analytics.identify('xyz-123', {}, {\n    *   plugins: {\n    *     // disable this specific identify in all plugins except customerio\n    *     all: false,\n    *     customerio: true\n    *   }\n    * })\n    */\n    identify: async (userId, traits, options, callback) => {\n      const id = isString(userId) ? userId : null\n      const data = isObject(userId) ? userId : traits\n      const opts = options || {}\n      const user = instance.user()\n\n      /* sets temporary in memory id. Not to be relied on */\n      set(tempKey(ID), id)\n\n      const resolvedId = id || data.userId || getUserProp(ID, instance, data)\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.identifyStart,\n          userId: resolvedId,\n          traits: data || {},\n          options: opts,\n          anonymousId: user.anonymousId,\n          // Add previousId if exists\n          ...(user.id && (user.id !== id) && { previousId: user.id }),\n        }, resolve, [traits, options, callback])\n      })\n    },\n    /**\n     * Track an analytics event. This will trigger `track` calls in any installed plugins\n     * @typedef {Function} Track\n     * @param  {String}   eventName - Event name\n     * @param  {Object}   [payload]   - Event payload\n     * @param  {Object}   [options]   - Event options\n     * @param  {Function} [callback]  - Callback to fire after tracking completes\n     * @returns {Promise}\n     * @api public\n     *\n     * @example\n     *\n     * // Basic event tracking\n     * analytics.track('buttonClicked')\n     *\n     * // Event tracking with payload\n     * analytics.track('itemPurchased', {\n     *   price: 11,\n     *   sku: '1234'\n     * })\n     *\n     * // Fire callback with 2nd or 3rd argument\n     * analytics.track('newsletterSubscribed', () => {\n     *   console.log('do this after track')\n     * })\n     *\n     * // Disable sending this event to specific analytic tools\n     * analytics.track('cartAbandoned', {\n     *   items: ['xyz', 'abc']\n     * }, {\n     *   plugins: {\n     *     // disable track event for segment\n     *     segment: false\n     *   }\n     * })\n     *\n     * // Send event to only to specific analytic tools\n     * analytics.track('customerIoOnlyEventExample', {\n     *   price: 11,\n     *   sku: '1234'\n     * }, {\n     *   plugins: {\n     *     // disable this specific track call all plugins except customerio\n     *     all: false,\n     *     customerio: true\n     *   }\n     * })\n     */\n    track: async (eventName, payload, options, callback) => {\n      const name = isObject(eventName) ? eventName.event : eventName\n      if (!name || !isString(name)) {\n        throw new Error('EventMissing')\n      }\n      const data = isObject(eventName) ? eventName : (payload || {})\n      const opts = isObject(options) ? options : {}\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.trackStart,\n          event: name,\n          properties: data,\n          options: opts,\n          userId: getUserProp(ID, instance, payload),\n          anonymousId: getUserProp(ANONID, instance, payload),\n        }, resolve, [payload, options, callback])\n      })\n    },\n    /**\n     * Trigger page view. This will trigger `page` calls in any installed plugins\n     * @typedef {Function} Page\n     * @param  {PageData} [data] - Page data overrides.\n     * @param  {Object}   [options] - Page tracking options\n     * @param  {Function} [callback] - Callback to fire after page view call completes\n     * @returns {Promise}\n     * @api public\n     *\n     * @example\n     *\n     * // Basic page tracking\n     * analytics.page()\n     *\n     * // Page tracking with page data overrides\n     * analytics.page({\n     *   url: 'https://google.com'\n     * })\n     *\n     * // Fire callback with 1st, 2nd or 3rd argument\n     * analytics.page(() => {\n     *   console.log('do this after page')\n     * })\n     *\n     * // Disable sending this pageview to specific analytic tools\n     * analytics.page({}, {\n     *   plugins: {\n     *     // disable page tracking event for segment\n     *     segment: false\n     *   }\n     * })\n     *\n     * // Send pageview to only to specific analytic tools\n     * analytics.page({}, {\n     *   plugins: {\n     *     // disable this specific page in all plugins except customerio\n     *     all: false,\n     *     customerio: true\n     *   }\n     * })\n     */\n    page: async (data, options, callback) => {\n      const d = isObject(data) ? data : {}\n      const opts = isObject(options) ? options : {}\n\n      /*\n      // @TODO add custom value resolvers for userId and anonId\n      if (resolvers.getUserId) {\n        const asyncUserId = await resolvers.getUserId()\n        console.log('x', x)\n      }\n      */\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.pageStart,\n          properties: getPageData(d),\n          options: opts,\n          userId: getUserProp(ID, instance, d),\n          anonymousId: getUserProp(ANONID, instance, d),\n        }, resolve, [data, options, callback])\n      })\n    },\n    /**\n     * Get user data\n     * @typedef {Function} User\n     * @param {string} [key] - dot.prop.path of user data. Example: 'traits.company.name'\n     * @returns {string|object} value of user data or null\n     *\n     * @example\n     *\n     * // Get all user data\n     * const userData = analytics.user()\n     *\n     * // Get user id\n     * const userId = analytics.user('userId')\n     *\n     * // Get user company name\n     * const companyName = analytics.user('traits.company.name')\n     */\n    user: (key) => {\n      if (key === ID || key === 'id') {\n        return getUserProp(ID, instance)\n      }\n      if (key === ANONID || key === 'anonId') {\n        return getUserProp(ANONID, instance)\n      }\n      const user = instance.getState('user')\n      if (!key) return user\n      return dotProp(user, key)\n    },\n    /**\n     * Clear all information about the visitor & reset analytic state.\n     * @typedef {Function} Reset\n     * @param {Function} [callback] - Handler to run after reset\n     * @returns {Promise}\n     * @example\n     *\n     * // Reset current visitor\n     * analytics.reset()\n     */\n    reset: (callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.resetStart\n        }, resolve, callback)\n      })\n    },\n    /**\n     * Fire callback on analytics ready event\n     * @typedef {Function} Ready\n     * @param  {Function} callback - function to trigger when all providers have loaded\n     * @returns {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * analytics.ready((payload) => {\n     *   console.log('all plugins have loaded or were skipped', payload);\n     * })\n     */\n    ready: (callback) => {\n      // If ready already fired. Call callback immediately\n      if (readyCalled) callback({ plugins, instance })\n      return instance.on(EVENTS.ready, (x) => {\n        if (callback) callback(x)\n        readyCalled = true\n      })\n    },\n    /**\n     * Attach an event handler function for analytics lifecycle events.\n     * @typedef {Function} On\n     * @param  {String}   name - Name of event to listen to\n     * @param  {Function} callback - function to fire on event\n     * @return {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * // Fire function when 'track' calls happen\n     * analytics.on('track', ({ payload }) => {\n     *   console.log('track call just happened. Do stuff')\n     * })\n     *\n     * // Remove listener before it is called\n     * const removeListener = analytics.on('track', ({ payload }) => {\n     *   console.log('This will never get called')\n     * })\n     *\n     * // cleanup .on listener\n     * removeListener()\n     */\n    on: (name, callback) => {\n      if (!name || !isFunction(callback)) {\n        return false\n      }\n      if (name === EVENTS.bootstrap) {\n        throw new Error('.on disabled for ' + name)\n      }\n      const startRegex = /Start$|Start:/\n      if (name === '*') {\n        const beforeHandler = store => next => action => {\n          if (action.type.match(startRegex)) {\n            callback({ // eslint-disable-line\n              payload: action,\n              instance,\n              plugins: customPlugins\n            })\n          }\n          return next(action)\n        }\n        const afterHandler = store => next => action => {\n          if (!action.type.match(startRegex)) {\n            callback({ // eslint-disable-line\n              payload: action,\n              instance,\n              plugins: customPlugins\n            })\n          }\n          return next(action)\n        }\n        addMiddleware(beforeHandler, before)\n        addMiddleware(afterHandler, after)\n        /**\n         * Detach listeners\n         * @typedef {Function} DetachListeners\n         */\n        return () => {\n          removeMiddleware(beforeHandler, before)\n          removeMiddleware(afterHandler, after)\n        }\n      }\n\n      const position = (name.match(startRegex)) ? before : after // eslint-disable-line\n      const handler = store => next => action => {\n        // Subscribe to EVERYTHING\n        if (action.type === name) {\n          callback({ // eslint-disable-line\n            payload: action,\n            instance: instance,\n            plugins: customPlugins,\n            abort: nonAbortable\n          })\n        }\n        /* For future matching of event subpaths `track:*` etc\n        } else if (name.match(/\\*$/)) {\n          const match = (name === '*') ? '.' : name\n          const regex = new RegExp(`${match}`, 'g')\n        } */\n        return next(action)\n      }\n      addMiddleware(handler, position)\n      return () => removeMiddleware(handler, position)\n    },\n    /**\n     * Attach a handler function to an event and only trigger it once.\n     * @typedef {Function} Once\n     * @param  {String} name - Name of event to listen to\n     * @param  {Function} callback - function to fire on event\n     * @return {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * // Fire function only once per 'track'\n     * analytics.once('track', ({ payload }) => {\n     *   console.log('This is only triggered once when analytics.track() fires')\n     * })\n     *\n     * // Remove listener before it is called\n     * const listener = analytics.once('track', ({ payload }) => {\n     *   console.log('This will never get called b/c listener() is called')\n     * })\n     *\n     * // cleanup .once listener before it fires\n     * listener()\n     */\n    once: (name, callback) => {\n      if (!name || !isFunction(callback)) {\n        return false\n      }\n      if (name === EVENTS.bootstrap) {\n        throw new Error('.once disabled for ' + name)\n      }\n      const detachListener = instance.on(name, ({ payload }) => {\n        callback({ // eslint-disable-line\n          payload: payload,\n          instance: instance,\n          plugins: customPlugins,\n          abort: nonAbortable\n        })\n        // detach listener after its called once\n        detachListener()\n      })\n      return detachListener\n    },\n    /**\n     * Get data about user, activity, or context. Access sub-keys of state with `dot.prop` syntax.\n     * @typedef {Function} GetState\n     * @param  {string} [key] - dot.prop.path value of state\n     * @return {any}\n     *\n     * @example\n     *\n     * // Get the current state of analytics\n     * analytics.getState()\n     *\n     * // Get a subpath of state\n     * analytics.getState('context.offline')\n     */\n    getState: (key) => {\n      const state = store.getState()\n      if (key) return dotProp(state, key)\n      return Object.assign({}, state)\n    },\n    /*\n     * Emit events for other plugins or middleware to react to.\n     * @param  {Object} action - event to dispatch\n     */\n    dispatch: (action) => {\n      const actionData = isString(action) ? { type: action } : action\n      if (isReservedAction(actionData.type)) {\n        throw new Error('reserved action ' + actionData.type)\n      }\n      const _private = action._ || {}\n      // Dispatch actionStart\n      // const autoPrefixType = `${actionData.type.replace(/Start$/, '')}Start`\n\n      const dispatchData = {\n        ...actionData,\n        _: {\n          originalAction: actionData.type,\n          ..._private\n        }\n        // type: `${autoPrefixType}`\n      }\n      store.dispatch(dispatchData)\n    },\n    // Do not use. Will be removed. Here for Backwards compatibility.\n    // Moved to analytics.plugins.enable\n    enablePlugin: plugins.enable,\n    /// Do not use. Will be removed. Here for Backwards compatibility.\n    /// Moved to analytics.plugins.disable\n    disablePlugin: plugins.disable,\n    // Do not use. Will be removed. Here for Backwards compatibility.\n    // New plugins api\n    plugins: plugins,\n    /**\n     * Storage utilities for persisting data.\n     * These methods will allow you to save data in localStorage, cookies, or to the window.\n     * @typedef {Object} Storage\n     * @property {GetItem} getItem - Get value from storage\n     * @property {SetItem} setItem - Set storage value\n     * @property {RemoveItem} removeItem - Remove storage value\n     *\n     * @example\n     *\n     * // Pull storage off analytics instance\n     * const { storage } = analytics\n     *\n     * // Get value\n     * storage.getItem('storage_key')\n     *\n     * // Set value\n     * storage.setItem('storage_key', 'value')\n     *\n     * // Remove value\n     * storage.removeItem('storage_key')\n     */\n    storage: {\n      /**\n       * Get value from storage\n       * @typedef {Function} GetItem\n       * @param {String} key - storage key\n       * @param {Object} [options] - storage options\n       * @return {Any}\n       *\n       * @example\n       *\n       * analytics.storage.getItem('storage_key')\n       */\n      getItem: storage.getItem,\n      /**\n       * Set storage value\n       * @typedef {Function} SetItem\n       * @param {String} key - storage key\n       * @param {any} value - storage value\n       * @param {Object} [options] - storage options\n       *\n       * @example\n       *\n       * analytics.storage.setItem('storage_key', 'value')\n       */\n      setItem: (key, value, options) => {\n        store.dispatch({\n          type: EVENTS.setItemStart,\n          key: key,\n          value: value,\n          options: options\n        })\n      },\n      /**\n       * Remove storage value\n       * @typedef {Function} RemoveItem\n       * @param {String} key - storage key\n       * @param {Object} [options] - storage options\n       *\n       * @example\n       *\n       * analytics.storage.removeItem('storage_key')\n       */\n      removeItem: (key, options) => {\n        store.dispatch({\n          type: EVENTS.removeItemStart,\n          key: key,\n          options: options\n        })\n      },\n    },\n    /*\n     * Set the anonymous ID of the visitor\n     * @param {String} anonymousId - anonymous Id to set\n     * @param {Object} [options] - storage options\n     *\n     * @example\n     *\n     * // Set anonymous ID\n     * analytics.setAnonymousId('1234567')\n     */\n    setAnonymousId: (anonymousId, options) => {\n      /* sets temporary in memory id. Not to be relied on */\n      // set(tempKey(ANONID), anonymousId)\n      instance.storage.setItem(CONSTANTS.ANON_ID, anonymousId, options)\n    },\n    /*\n     * Events exposed by core analytics library and all loaded plugins\n     * @type {Array}\n     */\n    events: {\n      core: coreEvents,\n      plugins: allPluginEvents,\n      // byType: (type) => {} @Todo grab logic from engine and give inspectable events\n    }\n  }\n  const enrichMiddleware = storeAPI => next => action => {\n    if (!action.meta) {\n      action.meta = enrichMeta()\n    }\n    return next(action)\n  }\n  const middlewares = parsedOptions.middlewares.concat([\n    enrichMiddleware,\n    /* Core analytics middleware */\n    dynamicMiddlewares(before), // Before dynamic middleware <-- fixed pageStart .on listener\n    /* Plugin engine */\n    middleware.plugins(instance, getPlugins, {\n      all: allSystemEvents,\n      plugins: allPluginEvents\n    }),\n    middleware.storage(storage),\n    middleware.initialize(instance),\n    middleware.identify(instance, storage),\n    /* after dynamic middleware */\n    dynamicMiddlewares(after)\n  ])\n\n  /* Initial analytics state keys */\n  const coreReducers = {\n    context: context,\n    user: user(storage),\n    page: page,\n    track: track,\n    plugins: pluginsMiddleware(getPlugins),\n    queue: queue\n  }\n\n  let composeEnhancers = compose\n  let composeWithGlobalDebug = compose\n  if (isBrowser && config.debug) {\n    const devTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    if (devTools) {\n      composeEnhancers = devTools({ trace: true, traceLimit: 25 })\n    }\n    composeWithGlobalDebug = function() {\n      if (arguments.length === 0) return Debug()\n      if (isObject(typeof arguments[0])) return composeWithDebug(arguments[0])\n      return composeWithDebug().apply(null, arguments)\n    }\n  }\n\n  const initialConfig = makeContext(config)\n\n  const initialPluginState = parsedOptions.pluginsArray.reduce((acc, plugin) => {\n    const { name, config, loaded } = plugin\n    const isEnabled = parsedOptions.pluginEnabled[name]\n    acc[name] = {\n      enabled: isEnabled,\n      // If plugin enabled & has no initialize method, set initialized to true, else false\n      initialized: (isEnabled) ? Boolean(!plugin.initialize) : false,\n      loaded: Boolean(loaded({ config })),\n      config\n    }\n    return acc\n  }, {})\n  \n  const initialState = {\n    context: initialConfig,\n    user: visitorInfo,\n    plugins: initialPluginState,\n    // Todo allow for more userland defined initial state?\n  }\n\n  /* Create analytics store! */\n  const store = createStore(\n    // register reducers\n    combineReducers({ ...coreReducers, ...customReducers }),\n    // set user defined initial state\n    initialState,\n    // register middleware & plugins used\n    composeWithGlobalDebug(\n      composeEnhancers(\n        applyMiddleware(...middlewares),\n      )\n    )\n  )\n\n  /* Supe up dispatch with callback promise resolver. Happens in enrichMeta */\n  function enhanceDispatch(fn) {\n    return function (event, resolver, callbacks) {\n      // console.log('original event', event)\n      const meta = enrichMeta(event.meta, resolver, ensureArray(callbacks))\n      // if (resolver) console.log('dispatch resolver', resolver)\n      // if (callbacks) console.log('dispatch callbacks', callbacks)\n      const newEvent = { ...event, ...{ meta: meta } }\n      // console.log('newEvent', newEvent)\n      return fn.apply(null, [ newEvent ])\n    }\n  }\n\n  // Automatically apply meta to dispatch calls\n  store.dispatch = enhanceDispatch(store.dispatch)\n\n  /* Synchronously call bootstrap & register Plugin methods */\n  const pluginKeys = Object.keys(customPlugins)\n\n  /* Bootstrap analytic plugins */\n  store.dispatch({\n    type: EVENTS.bootstrap,\n    plugins: pluginKeys,\n    config: initialConfig,\n    params: params,\n    user: visitorInfo,\n    initialUser,\n    persistedUser\n  })\n\n  const enabledPlugins = pluginKeys.filter((name) => parsedOptions.pluginEnabled[name])\n  const disabledPlugins = pluginKeys.filter((name) => !parsedOptions.pluginEnabled[name])\n \n  /* Register analytic plugins */\n  store.dispatch({\n    type: EVENTS.registerPlugins,\n    plugins: pluginKeys,\n    enabled: parsedOptions.pluginEnabled,\n  })\n\n  /* dispatch register for individual plugins */\n  parsedOptions.pluginsArray.map((plugin, i) => {\n    const { bootstrap, config, name } = plugin\n    if (bootstrap && isFunction(bootstrap)) {\n      bootstrap({ instance, config, payload: plugin })\n    }\n    /* Register plugins */\n    store.dispatch({\n      type: EVENTS.registerPluginType(name),\n      name: name,\n      enabled: parsedOptions.pluginEnabled[name],\n      plugin: plugin\n    })\n\n    /* All plugins registered initialize, is last loop */\n    if (parsedOptions.pluginsArray.length === (i + 1)) {\n      store.dispatch({\n        type: EVENTS.initializeStart,\n        plugins: enabledPlugins,\n        disabled: disabledPlugins\n      })\n    }\n  })\n\n  if (BROWSER) {\n    /* Watch for network events */\n    watch((offline) => {\n      store.dispatch({\n        type: (offline) ? EVENTS.offline : EVENTS.online,\n      })\n    })\n    /* Tick heartbeat for queued events */\n    heartBeat(store, getPlugins, instance)\n  }\n\n  function appendArguments(fn) {\n    return function () {\n      /* Get original args */\n      const args = Array.prototype.slice.call(arguments)\n      /* Create clone of args */\n      let newArgs = new Array(fn.length)\n      for (let i = 0; i < args.length; i++) {\n        newArgs[i] = args[i]\n      }\n      /* Append new arg to end */\n      newArgs[newArgs.length] = instance\n      // Set instance on extended methods\n      return fn.apply({ instance }, newArgs)\n    }\n  }\n\n  /* Return analytics instance */\n  return instance\n}\n\n// Duplicated strings\nconst before = 'before'\nconst after = 'after'\n\nexport default analytics\n\n/*\n * analytics.init exported for standalone browser build\n * CDN build exposes global _analytics variable\n *\n * Initialize instance with _analytics.init() or _analytics['default']()\n */\nexport { analytics as init }\n\n/*\n * analytics.Analytics exported for node usage\n *\n * Initialize instance with _analytics.init() or _analytics['default']()\n */\nexport { analytics as Analytics }\n/*\n * Core Analytic events. These are exposed for third party plugins & listeners\n * Use these magic strings to attach functions to event names.\n * @type {Object}\n */\nexport { EVENTS }\n\nexport { CONSTANTS }\n"],"names":["FUNC","UNDEF","REDUCER","base","ACTION_INIT","ACTION_TEST","Math","random","toString","$$observable","Symbol","observable","msg","createStore","reducer","preloadedState","enhancer","_ref2","undefined","Error","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","isObject","type","listeners","i","length","replaceReducer","nextReducer","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","this","getUndefinedStateErrorMessage","key","actionType","compose","funcs","call","arguments","arg","reduce","a","b","apply","applyMiddleware","_arguments","chain","store","middlewareAPI","map","middleware","_extends","ANON_ID","PREFIX","USER_ID","USER_TRAITS","LIB_NAME","ID","ANONID","coreEvents","nonEvents","EVENTS$1","acc","curr","registerPluginType","name","pluginReadyType","utmRegex","propRegex","traitRegex","initializeMiddleware","instance","setItem","storage","EVENTS","bootstrap","params","user","persistedUser","initialUser","isKnownId","userId","anonymousId","traits","paramsArray","Object","keys","an_uid","an_event","groupedParams","match","cleanName","replace","campaign","props","raw","setTimeout","identify","track","userReducer","state","setItemEnd","value","assign","reset","forEach","removeItem","getPersistedUserData","getItem","tempKey","identifyMiddleware","_instance$storage","options","remove","uuid","currentId","currentTraits","userIdChanged","old","new","stack","runCallback","id","payload","isFunction","waitForReady","data","predicate","timeout","Promise","resolve","reject","queue","then","_","abort","reason","processEvent","_ref4","allPlugins","allMatches","plugins","context","method","isStartEvent","endsWithStartRegex","abortable","exact","x","pluginName","during","makeArgs","abortablePlugins","plugin","otherPlugin","config","event","abortF","caller","pluginsToAbort","isArray","includes","JSON","stringify","abortFunction","notAbortableError","formatPayload","argumentFactory","queueData","thing","methodName","addToQueue","loaded","offline","scoped","curScope","_temp5","_temp4","namespaced","p","count","curScopeData","actionName","text","getNameSpacedAction","sub","join","validateMethod","currentAct","pname","otherPlug","from","getConfig","val","returnValue","scopedPayload","payloads","promise","lastLoop","currentPlugin","currentActionValue","payloadValue","shouldAbort","abortDispatch","hasOwnProperty","called","funcArgs","merged","nameSpaceEvent","bootstrapRegex","readyRegex","e","resolvedAction","originalAction","endAction","shouldAbortAll","abortEvent","pluginState","pluginData","getPluginFunctions","arr","concat","getEventNames","eventType","namespace","postFix","_ref3","pluginsCount","isString","Array","split","pluginMiddleware","getPlugins","systemEvents","isReady","_temp2","_exit","_result","updatedAction","enablePlugin","initializeStart","disabled","fromEnable","meta","disablePlugin","rid","initializeEnd","pluginsArray","allRegisteredPlugins","filter","completed","failed","waitForPluginsToLoad","d","events","all","calls","ready","_temp","test","abortedCalls","pluginMethods","_store$getState","actions","pipeline","item","process","processIndex","requeue","requeueIndex","processAction","currentMethod","retVal","enrichedPayload","enrich","isAborted","pluginEvent","reQueueActions","processQueue","eventsInfo","pluginObject","originalType","updatedType","activePlugins","settings","fromCallOptions","isBoolean","enabled","info","initialized","allActivePluginKeys","core","word","_nameSpacedEvents$map","beforeFuncs","duringFuncs","afterFuncs","beforeNS","duringNS","afterNS","before","after","getAllMatchingCalls","actionBefore","_temp3","actionDuring","actionAfter","hasCallback","_processEvent","runPlugins","updated","_next","storageMiddleware","DynamicMiddleware","_this","addMiddleware","middlewares","position","removeMiddleware","findIndex","dynamicMiddlewares","act","createReducer","newState","getNameFromEventType","isEnabled","Boolean","initialize","togglePluginStatus","baseName","substring","status","pluginKey","serialize","obj","parse","err","initialState","last","history","trackReducer","trackEvent","properties","queueReducer","actionChain","hashRegex","urlPath","url","matches","exec","referrer","getPageData","pageData","isBrowser","_document","document","title","_window","window","location","innerWidth","innerHeight","hash","search","canonical","tag","tags","getElementsByTagName","getAttribute","canonicalUrl","href","currentUrl","page","path","width","height","viewData","sessionId","app","version","debug","navigator","onLine","os","userAgent","library","timezone","timeZone","locale","online","excludeItems","Debug","set","origDispatch","globalContext","KEY","composeWithDebug","ensureArray","singleOrArray","generateMeta","possibleCallbacks","resolver","callback","argArray","cb","args","prototype","getCallback","ts","Date","getTime","analytics","customReducers","reducers","parsedOptions","NAMESPACE","ERROR_URL","definedEvents","k","pluginEnabled","methods","c","fn","newArgs","allEvents","allEventsUnique","Set","get","getUserProp","getUserPropFunc","customPlugins","allPluginEvents","sort","uniqueEvents","allSystemEvents","_DynamicMiddleware","nonAbortable","paramsParse","visitorInfo","an_aid","enable","disable","readyCalled","opts","resolvedId","identifyStart","previousId","eventName","trackStart","pageStart","dotProp","resetStart","on","startRegex","beforeHandler","afterHandler","handler","once","detachListener","actionData","dispatchData","setItemStart","removeItemStart","setAnonymousId","CONSTANTS","storeAPI","enrichMeta","coreReducers","pluginsMiddleware","composeEnhancers","composeWithGlobalDebug","devTools","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","initialConfig","current","makeContext","initialPluginState","reducerKeys","finalReducers","shapeAssertionError","finalReducerKeys","assertReducerShape","hasChanged","nextState","previousStateForKey","nextStateForKey","errorMessage","combineReducers","callbacks","newEvent","pluginKeys","enabledPlugins","disabledPlugins","registerPlugins"],"mappings":"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"}