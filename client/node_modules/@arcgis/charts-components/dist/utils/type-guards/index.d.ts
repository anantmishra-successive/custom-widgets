import { CategoryFormatOptions, DateTimeFormatOptions, IFeatureLayer, ISimpleFillSymbol, ISimpleLineSymbol, ISimpleMarkerSymbol, NumberFormatOptions, WebBoxPlot, WebChart, WebChartBarChartSeries, WebChartBoxPlotSeries, WebChartDataTypes, WebChartGenericDataItem, WebChartHistogramDataItem, WebChartLineChartSeries, WebChartRadarChartSeries, WebChartScatterplotDataItem, WebChartSeries, WebChartStackedKinds, WebChartTextSymbol, WebGaugeChart } from '@arcgis/charts-spec';
import { ChartTypes } from '../misc';
import { ChartConfig } from '../types';
import { ModelTypes } from '../../model';
export type StringIndexable<T> = Record<string, unknown> & T;
/**
 * Web chart series with rotated property
 */
export type WebChartSeriesWithRotatedProp = WebChartSeries & {
    rotated?: boolean;
};
/**
 * Check if the chart config supports rotation or not
 * @param config - the chart config
 */
export declare function isRotationSupported(config: WebChart): config is WebChart & {
    series: WebChartSeriesWithRotatedProp[];
};
/**
 * Web chart series with stackedType property
 */
type WebChartSeriesWithStackedTypeProp = WebChartSeries & {
    stackedType?: WebChartStackedKinds;
};
/**
 * Check if the chart config supports rotation or not
 * @param config - the chart config
 */
export declare function isStackedTypeSupported(config: WebChart): config is WebChart & {
    series: WebChartSeriesWithStackedTypeProp[];
};
/**
 * Type guard for ISimpleFillSymbol
 * @param symbol
 */
export declare function isSFS(symbol: any): symbol is ISimpleFillSymbol;
/**
 * Type guard for ISimpleLineSymbol
 * @param symbol
 */
export declare function isSLS(symbol: any): symbol is ISimpleLineSymbol;
/**
 * Type guard for ISimpleMarkerSymbol
 * @param symbol
 */
export declare function isSMS(symbol: any): symbol is ISimpleMarkerSymbol;
/**
 * Type guard for WebChartTextSymbol
 * @param symbol
 */
export declare function isWebChartTextSymbol(symbol: any): symbol is WebChartTextSymbol;
/**
 * Determines if the provided `config` has a `iLayer` property.
 * @param config
 */
export declare function hasILayer<T extends ModelTypes>(config: ChartConfig<T> | undefined): config is ChartConfig<T, T extends "boxPlot" ? WebBoxPlot : T extends "gauge" ? WebGaugeChart : WebChart>;
export declare function hasILayer(config: WebChart | undefined): config is WebChart & {
    iLayer: IFeatureLayer;
};
/**
 * Determines if the provided `config` is the specified chart type `T`.
 * @param config The chart config to check.
 * @param chartType The chart type to check against.
 */
export declare function isChartType<T extends ChartConfig>(config: WebChart | undefined, chartType: ChartTypes | undefined): config is T;
/**
 * Determines if the series is a box plot series.
 * @param series The series to check.
 */
export declare function isBoxPlotSeries(series: WebChartSeries | undefined): series is WebChartBoxPlotSeries;
/**
 * Determines if the series is a line chart series.
 * @param series The series to check.
 */
export declare function isLineChartSeries(series: WebChartSeries | undefined): series is WebChartLineChartSeries;
export declare function isRadarChartSeries(series: WebChartSeries | undefined): series is WebChartRadarChartSeries;
/**
 * Determines if the series is a bar chart series.
 * @param series The series to check.
 */
export declare function isBarChartSeries(series: WebChartSeries | undefined): series is WebChartBarChartSeries;
/**
 * Type guard to check if the series is a BarChartSeries.
 * @param {WebChartSeries[]} series - The series to check.
 * @returns {series is WebChartBarChartSeries[]}
 */
export declare const isBarChartSeriesArray: (series: WebChartSeries[]) => series is WebChartBarChartSeries[];
/**
 * Type guard to check if the series is a LineChartSeries.
 * @param {WebChartSeries[]} series - The series to check.
 * @returns {series is WebChartLineChartSeries[]}
 */
export declare const isLineChartSeriesArray: (series: WebChartSeries[]) => series is WebChartLineChartSeries[];
/**
 * Type guard to check if the series is a RadarChartSeries.
 * @param {WebChartSeries[]} series - The series to check.
 * @returns {series is WebChartLineChartSeries[]}
 */
export declare const isRadarChartSeriesArray: (series: WebChartSeries[]) => series is WebChartRadarChartSeries[];
/**
 * Determines if the series array is of type box plot series.
 * @param series The series to check.
 */
export declare function isBoxPlotSeriesArray(series: WebChartSeries[]): series is WebChartBoxPlotSeries[];
/**
 * Type guard for axis format being NumberFormatOptions
 * @param valueFormat - valueFormat to check
 */
export declare function isNumberFormatOptions(valueFormat: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined): valueFormat is NumberFormatOptions;
/**
 * Type guard for WebChartDataTypes being WebChartHistogramDataItem
 * @param data - dataItem to check
 */
export declare function isWebChartHistogramDataItemOrUndefined(data: WebChartDataTypes | undefined): data is WebChartHistogramDataItem | undefined;
/**
 * Type guard for WebChartDataTypes being WebChartGenericDataItem
 * @param data - dataItem to check
 */
export declare function isWebChartGenericDataItemOrUndefined(data: WebChartDataTypes | undefined): data is WebChartGenericDataItem | undefined;
/**
 * Type guard for WebChartDataTypes being WebChartScatterplotDataItem
 * @param data - dataItem to check
 */
export declare function isWebChartScatterplotDataItemOrUndefined(data: WebChartDataTypes | undefined): data is WebChartScatterplotDataItem | undefined;
export declare function isValueAxisDataItem<T extends object>(axisDataItem: T): axisDataItem is T & {
    value: number;
};
export {};
