/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/lumina/controllers';
import { default as TimeSlider } from '@arcgis/core/widgets/TimeSlider.js';
import { PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useTimeSliderWidget: (component: LitElement & Pick<TimeSlider, "icon" | "label" | "viewModel" | "timeExtent" | "timeZone" | "mode" | "layout" | "loop" | "playRate" | "disabled" | "actions" | "fullTimeExtent" | "stops" | "tickConfigs" | "timeVisible"> & {
    state?: unknown;
    viewModel?: __esri.TimeSliderViewModel | undefined;
    closed?: boolean;
    icon: import('@arcgis/components-utils').Nil | string;
    label: import('@arcgis/components-utils').Nil | string;
    referenceElement?: ArcgisReferenceElement | string;
    position: __esri.UIPosition;
    arcgisReady: import('@arcgis/lumina').EventEmitter;
    arcgisPropertyChange: import('@arcgis/lumina').EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: __esri.LinkChartView | __esri.MapView | __esri.SceneView;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}) => TimeSlider;
/**
 * The Time Slider component simplifies visualization of temporal data in your application.
 *
 * [Read more...](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-time-slider/)
 */
export declare class ArcgisTimeSlider extends LitElement {
    /**
     * Defines actions that will appear in a menu when the user clicks the ellipsis button
     * ![timeSlider-actions-menu](https://developers.arcgis.com/javascript/latest/assets/img/apiref/widgets/timeslider/ellipsis.png) in the widget.
     *
     * [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#actions)
     */
    actions: __esri.Collection<__esri.Action>;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the [destroy](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-time-slider/#destroy) method when you are done to
     * prevent memory leaks.
     *
     * @default false
     */
    autoDestroyDisabled: boolean;
    /**
     * When `true`, sets the widget to a disabled state so the user cannot interact with it.
     *
     * @default false
     */
    disabled: boolean;
    /**
     * Lists the specific locations on the timeline where handle(s) will snap to when manipulated.
     *
     * [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#effectiveStops)
     *
     * @default null
     */
    readonly effectiveStops: nullish | Date[];
    /**
     * The temporal extent of the entire slider.
     *
     * [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#fullTimeExtent)
     */
    fullTimeExtent: nullish | __esri.TimeExtent;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     *
     * @see [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/)
     * @default "clock"
     */
    icon: string;
    /**
     * The widget's default label.
     *
     * [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#label)
     */
    label: string;
    /**
     * Determines the layout used by the TimeSlider widget.
     *
     * @default "auto"
     */
    layout: "auto" | "compact" | "wide";
    /**
     * When `true`, the time slider will play its animation in a loop.
     *
     * @default false
     */
    loop: boolean;
    /**
     * The time slider mode.
     *
     * @default "time-window"
     */
    mode: "instant" | "time-window" | "cumulative-from-start" | "cumulative-from-end";
    /**
     * The time (in milliseconds) between animation steps.
     *
     * @default 1000
     */
    playRate: number;
    /** @default "bottom-left" */
    position: __esri.UIPosition;
    /**
     * By assigning the `id` attribute of the Map or Scene component to this property, you can position a child component anywhere in the DOM while still maintaining a connection to the Map or Scene.
     *
     * @see [Associate components with a Map or Scene component](https://developers.arcgis.com/javascript/latest/programming-patterns/#associate-components-with-a-map-or-scene-component)
     */
    referenceElement?: ArcgisReferenceElement | string;
    /**
     * The current state of the component.
     *
     * @default "disabled"
     */
    readonly state: "ready" | "disabled" | "playing";
    /**
     * Defines specific locations on the time slider where thumbs will snap to when manipulated.
     *
     * @default { count : 10 }
     */
    stops: nullish | __esri.StopsByDates | __esri.StopsByCount | __esri.StopsByInterval;
    /**
     * When set, overrides the default TimeSlider ticks labelling system.
     *
     * @default null
     */
    tickConfigs: nullish | __esri.TickConfig[];
    /**
     * The current time extent of the time slider.
     *
     * @default null
     */
    timeExtent: nullish | __esri.TimeExtent;
    /**
     * Shows/hides time in the display.
     *
     * @default false
     */
    timeVisible: boolean;
    /**
     * Dates and times displayed in the widget will be displayed in this time zone.
     *
     * [Read more...](https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-TimeSlider.html#timeZone)
     */
    timeZone: string;
    applyTimeSliderSettings(settings: Pick<__esri.TimeSliderProperties, "fullTimeExtent" | "loop" | "stops">): Promise<void>;
    /** Permanently destroy the component. */
    destroy(): Promise<void>;
    next(): Promise<void>;
    play(): Promise<void>;
    previous(): Promise<void>;
    stop(): Promise<void>;
    updateWebDocument(webmap: __esri.WebMap): Promise<void>;
    /** Emitted when the value of a property is changed. Use this to listen to changes to properties. */
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state" | "timeExtent" | "effectiveStops" | "fullTimeExtent";
    }>;
    /** Emitted when the component associated with a map or scene view is is ready to be interacted with. */
    readonly arcgisReady: TargetedEvent<this, void>;
    /** Emitted when an action is triggered on the component. */
    readonly arcgisTriggerAction: TargetedEvent<this, __esri.TimeSliderTriggerActionEvent>;
}
export {};
