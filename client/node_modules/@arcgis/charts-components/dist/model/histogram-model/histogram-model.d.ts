import { ChartConfig, XYChartTypes } from '../../utils';
import { WebChart, WebChartDataTransformations, ISimpleFillSymbol, ISimpleLineSymbol, HistogramOverlays } from '@arcgis/charts-spec';
import { LayerInfo, ModelTypes } from '../interfaces/common';
import { ModelParams } from '../interfaces/chart-interfaces';
import { ChartModel } from '../chart-model/chart-model';
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithYGuides, ModelWithLegend, ModelWithXYAxes, ModelWithTooltips } from '../mixins';
export declare class HistogramModel extends ChartModel {
    /**
     * Current configuration used for the histogram.
     */
    protected _config: ChartConfig<typeof ModelTypes.Histogram, WebChart>;
    protected _chartType: XYChartTypes;
    protected layerInfo: LayerInfo;
    setup(params: ModelParams<ChartConfig<typeof ModelTypes.Histogram>>): Promise<void>;
    /**
     * Gets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
     * @returns {string}
     */
    getNumericField(): string;
    /**
     * Sets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
     * @param {string} numericField
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericField(numericField: string): Promise<void>;
    /**
     * Gets the number of bins used to create the histogram.
     * @returns {number}
     */
    getBinCount(): number;
    /**
     * Sets the number of bins used to create the histogram.
     * @param {number} binCount
     */
    setBinCount(binCount: number): void;
    /**
     * Gets the fill symbol used for the bins in the histogram.
     * @returns {ISimpleFillSymbol}
     */
    getBinSymbol(): ISimpleFillSymbol;
    /**
     * Sets the fill symbol used for the bins in the histogram.
     * @param {ISimpleFillSymbol} symbol
     */
    setBinSymbol(symbol: ISimpleFillSymbol): void;
    /**
     * Gets the data transformation type used in the histogram.
     * @returns {WebChartDataTransformations}
     */
    getDataTransformationType(): WebChartDataTransformations;
    /**
     * Sets the data transformation type used in the histogram.
     * @param {WebChartDataTransformations} dataTransformationType
     */
    setDataTransformationType(dataTransformationType: WebChartDataTransformations): void;
    /**
     * Gets the line symbol used for the mean overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getMeanSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol used for the mean overlay in the histogram.
     * @param {ISimpleLineSymbol} symbol
     */
    setMeanSymbol(symbol: ISimpleLineSymbol): void;
    /**
     * Gets the line symbol used for the median overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getMedianSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol used for the median overlay in the histogram.
     * @param {ISimpleLineSymbol} symbol
     */
    setMedianSymbol(symbol: ISimpleLineSymbol): void;
    /**
     * Gets the line symbol used for the normal distribution overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getNormalDistSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol used for the normal distribution overlay in the histogram.
     * @param {ISimpleLineSymbol} symbol
     */
    setNormalDistSymbol(symbol: ISimpleLineSymbol): void;
    /**
     * Gets the line symbol used for the standard deviation overlay in the histogram.
     * @returns {ISimpleLineSymbol}
     */
    getStandardDevSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol used for the standard deviation overlay in the histogram.
     * @param {ISimpleLineSymbol} symbol
     */
    setStandardDevSymbol(symbol: ISimpleLineSymbol): void;
    /**
     * Gets whether the normal distribution overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowNormalDistOverlay(): boolean;
    /**
     * Sets whether to show the normal distribution overlay for the histogram.
     * @param {boolean} show
     */
    setShowNormalDistOverlay(show: boolean): void;
    /**
     * Gets whether the mean overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowMeanOverlay(): boolean;
    /**
     * Sets whether to show the mean overlay for the histogram.
     * @param {boolean} show
     */
    setShowMeanOverlay(show: boolean): void;
    /**
     * Gets whether the median overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowMedianOverlay(): boolean;
    /**
     * Sets whether to show the median overlay for the histogram.
     * @param {boolean} show
     */
    setShowMedianOverlay(show: boolean): void;
    /**
     * Gets whether the standard deviation overlay is shown in the histogram.
     * @returns {boolean}
     */
    getShowStandardDevOverlay(): boolean;
    /**
     * Sets whether to show the standard deviation overlay for the histogram.
     * @param {boolean} show
     */
    setShowStandardDevOverlay(show: boolean): void;
    /**
     * Get the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
     */
    getSeriesOverlay(): HistogramOverlays | undefined;
    /**
     * Set the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
     * @param overlays The overlays
     */
    setSeriesOverlays(overlays: HistogramOverlays): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface HistogramModel extends ModelWithXYAxes, ModelWithLegend, ModelWithTooltips, ModelWithColorMatch, ModelWithDataLabels, ModelWithYGuides {
}
