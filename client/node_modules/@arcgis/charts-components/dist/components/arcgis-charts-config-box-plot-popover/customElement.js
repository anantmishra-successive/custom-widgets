import { c as k } from "../../chunks/runtime.js";
import { keyed as p } from "lit-html/directives/keyed.js";
import { repeat as v } from "lit-html/directives/repeat.js";
import { B as l } from "../../chunks/common.js";
import { RESTFieldType as u } from "@arcgis/charts-spec";
import { isEqual as y } from "lodash-es";
import "d3-array";
import { c9 as $, b3 as g, b1 as L, bS as F, bR as P } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as x } from "../../chunks/popover-ui-utils.js";
import { a as n } from "../../chunks/interfaces2.js";
import { U as h, h as I, i as f, d as w, e as D } from "../../chunks/chart-ui-utils2.js";
import { u as S } from "../../chunks/useT9n.js";
import { html as r } from "lit";
import { createRef as b, ref as m } from "lit-html/directives/ref.js";
import { LitElement as T, createEvent as C, safeClassMap as d } from "@arcgis/lumina";
import { css as E } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const o = {
  jsAppFlyout: "js-app-flyout",
  name: "bar-chart-data-popover",
  numericFieldPickList: "bar-chart-data-numeric-fields-pick-list",
  header: "header",
  fab: "fab",
  pickListItemLabel: "pick-list-item-label",
  sortMean: "sort-mean",
  sortMedian: "sort-median",
  sortOrderPickList: "sort-order-pick-list",
  panel: "panel"
}, B = E`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.name{display:flex;flex-direction:column;margin:.5rem;padding:.5rem;background:#fff;min-width:250px}.header{margin:0;font-weight:bolder}.fab{display:flex;justify-content:stretch}.pick-list-item-label{font-size:small}.sort-icon-color{color:#000}.sort-mean,.sort-median{transform:rotate(90deg)}.sort-order-pick-list{overflow-y:hidden}.panel{max-height:60vh}`;
class A extends T {
  constructor() {
    super(...arguments), this._messages = S(), this.picklist = b(), this.placement = "leading", this.popoverElement = b(), this.offsetDistance = -200, this.pickListHasChanged = !1, this.layerFieldsInfo = [], this.isCustomSortDisabled = !1, this.arcgisChartsConfigBoxPlotDataPopoverChange = C(), this.arcgisChartsConfigPopoverClose = C();
  }
  static {
    this.properties = { messageOverrides: 0, headingTitle: 3, referenceElement: 2, open: 7, contentKind: 1, layerFieldsInfo: 0, isCustomSortDisabled: 5, selectedContent: 1 };
  }
  static {
    this.styles = B;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  willUpdate(e) {
    e.has("selectedContent") && this.selectedContentChange(this.selectedContent, e.get("selectedContent"));
  }
  async updated() {
    setTimeout(async () => {
      typeof this.picklist.value?.setFocus == "function" && await this.picklist.value?.setFocus();
    }, h.PopoverTimer), x(this.popoverElement.value, this.open), this.hasUpdated || setTimeout(() => {
      this.popoverElement.value?.reposition();
    }, h.PopoverTimer);
  }
  selectedContentChange(e, t) {
    this.pickListHasChanged = !y(e, t);
  }
  closePopover() {
    if (this.contentKind === n.numericFields && this.pickListHasChanged) {
      const e = {
        pickListElement: this.picklist.value,
        eventEmitter: this.arcgisChartsConfigBoxPlotDataPopoverChange,
        contentKind: this.contentKind
      };
      I(e);
    }
    this.open = !1, this.arcgisChartsConfigPopoverClose.emit();
  }
  async onDataContentTypeChange(e) {
    this.pickListHasChanged = !0;
    const t = e.target.selectedItems;
    this.arcgisChartsConfigBoxPlotDataPopoverChange.emit({
      contentKind: this.contentKind,
      value: t.map((i) => i.value)
    }), this.open = !1;
  }
  buildPickListItem(e) {
    return p(e.name, r`<calcite-list-item .label=${$(this.layerFieldsInfo, e.name)} .value=${e.name} .selected=${f(e.name, this.selectedContent)}></calcite-list-item>`);
  }
  buildPickListItems(e) {
    const t = this.layerFieldsInfo?.length ?? 0, i = [];
    switch (e) {
      case n.numericFields: {
        for (let s = 0; s < t; s += 1) {
          const a = this.layerFieldsInfo[s];
          L(a) && i.push(this.buildPickListItem(a));
        }
        break;
      }
      case n.category: {
        const s = p(" ", r`<calcite-list-item label=" " value=" " .selected=${f("", this.selectedContent)}></calcite-list-item>`);
        i.push(s);
        for (let a = 0; a < t; a += 1) {
          const c = this.layerFieldsInfo[a];
          (g(c) || c.type === u.String) && i.push(this.buildPickListItem(c));
        }
        break;
      }
      case n.splitByField: {
        const s = p(" ", r`<calcite-list-item label=" " value=" " .selected=${f("", this.selectedContent)}></calcite-list-item>`);
        i.push(s);
        for (let a = 0; a < t; a += 1) {
          const c = this.layerFieldsInfo[a];
          (g(c) || c.type === u.String) && i.push(this.buildPickListItem(c));
        }
        break;
      }
    }
    return i;
  }
  onNumericFieldsChange(e) {
    e.target !== null && (this.selectedContent = e.target.selectedItems.map((t) => t.value));
  }
  buildSortOrder() {
    const e = Object.keys(l);
    let t;
    return v(e, (i) => i, (i) => {
      let s = "";
      switch (i) {
        case l.xAxisAsc: {
          t = "a-z-down";
          break;
        }
        case l.xAxisDesc: {
          t = "a-z-up";
          break;
        }
        case l.meanAsc:
          t = "sort-descending", s = o.sortMean;
          break;
        case l.meanDesc: {
          t = "sort-ascending", s = o.sortMean;
          break;
        }
        case l.medianAsc: {
          t = "sort-descending", s = o.sortMedian;
          break;
        }
        case l.medianDesc: {
          t = "sort-ascending", s = o.sortMedian;
          break;
        }
        case l.customSort: {
          t = "arrow-up-down";
          break;
        }
      }
      return r`<calcite-list-item .disabled=${this.isCustomSortDisabled && i === l.customSort} .label=${this._messages[i]} .selected=${this.selectedContent === i} .value=${l[i]} @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}><calcite-icon class=${`sort-icon-color ${s}`} slot=content-start .icon=${t}></calcite-icon></calcite-list-item>`;
    });
  }
  async onNumericFieldSelectionDone() {
    this.pickListHasChanged && this.closePopover();
  }
  createTooltip(e) {
    if (e.target?.label === this._messages.customSort && this.isCustomSortDisabled) {
      const t = e.target, { formatLocale: i } = F(), a = new Intl.NumberFormat(i).format(h.customSortLimit), c = P(this._messages.customSortLimit ?? "", {
        totalLimit: a
      });
      this.tooltip = w(t), this.tooltip.innerHTML = c, document.body.appendChild(this.tooltip);
    }
  }
  destroyTooltip() {
    D(this.tooltip);
  }
  renderCategory() {
    const e = this.buildPickListItems(n.category);
    return r`<calcite-list label class=${d(o.pickListItemLabel)} selection-mode=single selection-appearance=border filter-enabled @calciteListChange=${this.onDataContentTypeChange} ${m(this.picklist)}>${e}</calcite-list>`;
  }
  renderNumericFields() {
    const e = this.buildPickListItems(n.numericFields);
    return r`<calcite-list label class=${d(o.numericFieldPickList)} selection-mode=multiple filter-enabled @calciteListChange=${this.onNumericFieldsChange} ${m(this.picklist)}>${e}</calcite-list>`;
  }
  renderSplitByField() {
    const e = this.buildPickListItems(n.splitByField);
    return r`<calcite-list label class=${d(o.pickListItemLabel)} selection-mode=single selection-appearance=border filter-enabled @calciteListChange=${this.onDataContentTypeChange} ${m(this.picklist)}>${e}</calcite-list>`;
  }
  renderSortOrder() {
    const e = this.buildSortOrder();
    return r`<calcite-list label class=${d(o.sortOrderPickList)} selection-mode=single selection-appearance=border @calciteListChange=${this.onDataContentTypeChange}>${e}</calcite-list>`;
  }
  renderPopoverInfo() {
    let e;
    switch (this.contentKind) {
      case n.category:
        e = this.renderCategory();
        break;
      case n.numericFields:
        e = this.renderNumericFields();
        break;
      case n.splitByField:
        e = this.renderSplitByField();
        break;
      case n.sortOrder:
        e = this.renderSortOrder();
        break;
    }
    return e;
  }
  render() {
    let e;
    return this.contentKind === n.numericFields && (e = r`<div slot=footer><calcite-fab class=${d(o.fab)} appearance=outline-fill kind=neutral icon .label=${this._messages.selectionDone} scale=s text-enabled .text=${this._messages.selectionDone} @click=${this.onNumericFieldSelectionDone}></calcite-fab></div>`), r`<div class=${d(o.jsAppFlyout)}><calcite-popover class=${d(o.name)} .referenceElement=${this.referenceElement ?? document.body} .placement=${this.placement} .offsetDistance=${this.offsetDistance} .open=${this.open} @calcitePopoverClose=${this.closePopover} label ${m(this.popoverElement)}><calcite-panel class=${d(o.panel)} closable .closed=${!this.open} @calcitePanelClose=${this.closePopover}><div slot=header-content class=${d(o.header)}>${this.headingTitle ?? ""}</div>${this.renderPopoverInfo()}${e}</calcite-panel></calcite-popover></div>`;
  }
}
k("arcgis-charts-config-box-plot-popover", A);
export {
  A as ArcgisChartsConfigBoxPlotPopover
};
