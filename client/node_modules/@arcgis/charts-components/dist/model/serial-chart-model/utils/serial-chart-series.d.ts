import { Color, WebChartStackedKinds } from '@arcgis/charts-spec';
import { ChartConfig } from '../../../utils';
import { SerialChartConfig } from '../../interfaces/chart-interfaces';
import { LayerInfo } from '../../interfaces/common';
/**
 * Gets the setting for whether to assign the series to the second value axis.
 * @param seriesIndex - The index of the series.
 * @param config - The chart configuration.
 * @returns boolean
 */
export declare const getAssignToSecondValueAxis: (seriesIndex: number, config: ChartConfig) => boolean;
/**
 * Sets the setting for whether to assign the series to the second value axis.
 * @param assign The boolean value to set.
 * @param seriesIndex The index of the series.
 * @param config The chart configuration.
 */
export declare const setAssignToSecondValueAxis: (assign: boolean, seriesIndex: number, config: ChartConfig) => void;
/**
 * Gets the name of the series for the provided index.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig} config - The chart configuration.
 * @returns {string | undefined}
 */
export declare const getSeriesName: (seriesIndex: number, config: ChartConfig) => string | undefined;
/**
 * Sets the name of the series for the provided index.
 * @param {string} newName - The new name for the series.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig} config - The chart configuration.
 */
export declare const setSeriesName: (newName: string, seriesIndex: number, config: ChartConfig) => void;
/**
 * Gets the color of the series for the provided index.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig} config - The chart configuration.
 * @returns {Color | undefined}
 */
export declare const getSeriesColor: (seriesIndex: number, config: ChartConfig) => Color | undefined;
/**
 * Sets the color of the series for the provided index.
 * @param {Color | undefined} newColor - The new color for the series.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig} config - The chart configuration.
 */
export declare const setSeriesColor: (newColor: Color | undefined, seriesIndex: number, config: ChartConfig) => void;
/**
 * Gets the list of series IDs in the order they appear in the chart config.
 * @param {ChartConfig} config - The chart configuration.
 * @returns {WebChartTypes | undefined}
 */
export declare const getOrderOfSeries: (config: ChartConfig) => string[];
/**
 * Updates the order of the series in the chart config.
 * @param {string[]} newSeriesOrder - The new order of the series.
 * @param {ChartConfig} config - The chart configuration.
 */
export declare const setOrderOfSeries: (newSeriesOrder: string[], config: ChartConfig) => void;
/**
 * Gets how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or
 * when multiple attributes/fields corresponding to the same set of classes are to be visualized.
 *
 * Currently this property is only used for bar and line series.
 *
 * @param {SerialChartConfig} config - The chart configuration.
 * @default sideBySide
 */
export declare const getStackedType: (config: SerialChartConfig) => WebChartStackedKinds | undefined;
/**
 * Sets how the bars/lines should be placed when multiple series are rendered in the same chart, say when "split by" operation is executed on any field or
 * when multiple attributes/fields corresponding to the same set of classes are to be visualized.
 *
 * Currently this property is only used for bar and line series.
 *
 * @param {SerialChartConfig} props.config - The chart configuration.
 * @param {WebChartStackedKinds | undefined} props.newStackedType - The new stacked type.
 * @param {LayerInfo | undefined} props.layerInfo - The layer information.
 * @default sideBySide
 */
export declare const setStackedType: (props: {
    newStackedType: WebChartStackedKinds | undefined;
    config: SerialChartConfig;
    layerInfo: LayerInfo | undefined;
}) => Promise<void>;
