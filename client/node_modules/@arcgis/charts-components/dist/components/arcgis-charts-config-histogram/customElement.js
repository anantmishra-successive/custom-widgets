import { c as n } from "../../chunks/runtime.js";
import "@arcgis/charts-spec";
import { isEqual as r } from "lodash-es";
import "d3-array";
import { g as l, a_ as h } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { b as d, h as c } from "../../chunks/index4.js";
import { LitElement as m } from "@arcgis/lumina";
import { html as t } from "lit";
import { C as s } from "../../chunks/interfaces2.js";
import { css as g } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const p = g`:host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}`;
class f extends m {
  constructor() {
    super(...arguments), this.popoverElement = null, this.onModelConfigChange = async (e) => {
      const i = e?.detail.config ?? this.model.getConfig();
      this.layer === void 0 && await this.updateFetchLayerFieldsInfo(i);
    };
  }
  static {
    this.properties = { layerFieldsInfo: 16, model: 0, chartData: 0, seriesColor: 2, calculatedMinMaxBounds: 2, page: 3, layer: 0, usePopupTemplateFieldsInfo: 5 };
  }
  static {
    this.styles = p;
  }
  async load() {
    this.layer !== void 0 && await this.layerChange(this.layer, void 0), this.seriesColor !== void 0 && this.seriesColorChange(this.seriesColor), this.usePopupTemplateFieldsInfo !== void 0 && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, void 0), this.modelChange(this.model), this.onModelConfigChange();
  }
  async willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("layer") && await this.layerChange(this.layer, e.get("layer")), e.has("usePopupTemplateFieldsInfo") && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, e.get("usePopupTemplateFieldsInfo")), e.has("seriesColor") && this.seriesColorChange(this.seriesColor), this.layerFieldsInfo === void 0 && await this.updateFetchLayerFieldsInfo();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, a) {
    a?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  async layerChange(e, a) {
    e !== void 0 && !r(a, e) && await this.updateFetchLayerFieldsInfo();
  }
  async usePopupTemplateFieldsInfoChange(e, a) {
    e !== void 0 && e !== a && await this.updateFetchLayerFieldsInfo();
  }
  seriesColorChange(e) {
    this.model.getColorMatch() && e?.forEach((a) => {
      d(a) && e?.get(0) !== void 0 && !r(this.model.getBinSymbol(), a) && this.model.setBinSymbol(a);
    });
  }
  async updateFetchLayerFieldsInfo(e) {
    const a = e ?? this.model.getConfig();
    let i = this.layer;
    if (!i) {
      const o = c(a) ? a.iLayer : void 0;
      o && (i = await l(o));
    }
    i && (this.layerFieldsInfo = await h(i, this.usePopupTemplateFieldsInfo));
  }
  popoverOpen(e) {
    const { open: a = !1, element: i = null } = { ...e.detail };
    a === !0 && this.popoverElement !== i ? (this.popoverElement !== null && (this.popoverElement.open = !1), this.popoverElement = i) : a === !1 && this.popoverElement === i && (this.popoverElement = null);
  }
  render() {
    let e;
    switch (this.page) {
      case s.Data:
        e = t`<arcgis-charts-config-histogram-data .model=${this.model} .meanValue=${this.chartData?.mean} .medianValue=${this.chartData?.median} .standardDevValue=${this.chartData?.stddev} .minValue=${this.chartData?.min} .maxValue=${this.chartData?.max} .sumValue=${this.chartData?.sum} .nullsValue=${this.chartData?.nulls} .countValue=${this.chartData?.count} .layerFieldsInfo=${this.layerFieldsInfo} @arcgisChartsConfigHistogramDataPopoverChange=${this.popoverOpen}></arcgis-charts-config-histogram-data>`;
        break;
      case s.Axes:
        e = t`<arcgis-charts-config-axes .model=${this.model} show-max-y-bound-option .calculatedMinMaxBounds=${this.calculatedMinMaxBounds}></arcgis-charts-config-axes>`;
        break;
      case s.Guides:
        e = t`<arcgis-charts-config-guides .model=${this.model} enable-y-axis-guide @arcgisChartsConfigGuidePopoverChange=${this.popoverOpen}></arcgis-charts-config-guides>`;
        break;
      case s.Format:
        e = t`<arcgis-charts-config-format .model=${this.model} @arcgisChartsConfigFormatPopoverChange=${this.popoverOpen}></arcgis-charts-config-format>`;
        break;
      case s.General:
        e = t`<arcgis-charts-config-general .model=${this.model}></arcgis-charts-config-general>`;
        break;
      default:
        e = "";
        break;
    }
    return e;
  }
}
n("arcgis-charts-config-histogram", f);
export {
  f as ArcgisChartsConfigHistogram
};
