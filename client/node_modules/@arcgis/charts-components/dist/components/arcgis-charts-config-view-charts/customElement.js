import { c as h } from "../../chunks/runtime.js";
import "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { bR as d } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { g as m } from "../../chunks/chart-ui-utils.js";
import { c as p, r as C, P as g } from "../../chunks/popover-ui-utils.js";
import { u as f } from "../../chunks/useT9n.js";
import { html as o } from "lit";
import { LitElement as v, createEvent as r, safeClassMap as n } from "@arcgis/lumina";
import { repeat as u } from "lit-html/directives/repeat.js";
import { css as w } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const c = {
  addChartContainer: "add-chart-container",
  viewChartComponent: "view-chart-component",
  header: "header",
  dropdownPopup: "dropdown-popup"
}, I = w`.view-chart-component{width:var(--arcgis-charts-config-panel-width);height:var(--arcgis-charts-config-panel-height)}.add-chart-container{display:flex;justify-content:center;padding:2rem 0;background-color:var(--calcite-color-background)}.header{margin-left:1rem}.dropdown-popup{position:relative}`;
class R extends v {
  constructor() {
    super(...arguments), this._messages = f(), this.chartRenamePopover = null, this.popoverClose = () => {
      const e = this.modelList?.find((t) => t.getChartId() === this.selectedChartId);
      this.chartTitle = e?.getTitleText() ?? "", this.selectedActionChartId = "", this.renameOpen = !1, this.removeChartRenamePopover();
    }, this.onChartRename = (e) => {
      this.disableEditing || (this.chartTitle = e.detail.name, this.modelList?.find((i) => i.getChartId() === this.selectedActionChartId)?.setTitleText(this.chartTitle), this.selectedActionChartId = "", this.renameOpen = !1, this.removeChartRenamePopover());
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.onCalciteListOrderChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { newIndex: t, oldIndex: i } = e.detail;
        if (this.modelList !== void 0 && this.modelList?.length > 0) {
          const a = [...this.modelList], s = a?.[i], l = a?.[t];
          s && l && (a.splice(i, 1), a.splice(t, 0, s)), this.arcgisChartsConfigModelListReorder.emit({ modelList: a });
        }
      }
    }, this.chartTitle = "", this.noGroup = !1, this.disableEditing = !1, this.arcgisChartsConfigModelListReorder = r(), this.arcgisChartsConfigViewChartAddChart = r(), this.arcgisChartsConfigViewChartDelete = r(), this.arcgisChartsConfigViewChartEdit = r(), this.arcgisChartsConfigViewChartSelect = r();
  }
  static {
    this.properties = { chartTitle: 16, renameOpen: 16, selectedActionChartId: 16, messageOverrides: 0, selectedChartId: 3, layer: 0, modelList: 2, noGroup: 7, disableEditing: 7 };
  }
  static {
    this.styles = I;
  }
  willUpdate(e) {
    e.has("modelList") && this.modelListChange(this.modelList, e.get("modelList"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeChartRenamePopover();
  }
  modelListChange(e, t) {
    t?.forEach((i) => {
      i.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    }), e?.forEach((i) => {
      i.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
    });
  }
  onAddChartClick(e) {
    this.arcgisChartsConfigViewChartAddChart.emit({
      referenceElement: e.target,
      layerId: this.layer?.id.toString()
    });
  }
  buildChartList() {
    const e = this.modelList ? u(this.modelList, (t) => t.getChartId(), (t, i) => {
      const a = t.getChartId(), s = t.getTitleText(), l = m(t.getConfig());
      return o`<calcite-list-item .label=${s ?? a ?? d(this._messages.chartTitle ?? "", { index: i.toString() })} .selected=${this.selectedChartId === (a?.toString() ?? i.toString())} .value=${a ?? i.toString()} @click=${this.onChartSelect}><calcite-icon slot=content-start .icon=${l}></calcite-icon>${this.disableEditing ? null : o`<calcite-dropdown slot=actions-end overlay-positioning=fixed placement=bottom-end @calciteDropdownClose=${() => this.chartActionClosed(a ?? "")} @calciteDropdownOpen=${() => this.chartActionOpened(a ?? "")} class=${n(c.dropdownPopup)}><calcite-action scale=l .text=${this._messages.chartActions ?? ""} slot=trigger .active=${a === this.selectedActionChartId}><calcite-icon icon=ellipsis></calcite-icon></calcite-action><calcite-dropdown-group selection-mode=none><calcite-dropdown-item accesskey=edit @calciteDropdownItemSelect=${this.chartEditSelect}>${this._messages.edit}</calcite-dropdown-item><calcite-dropdown-item accesskey=rename @calciteDropdownItemSelect=${this.chartRenameSelect}>${this._messages.rename}</calcite-dropdown-item><calcite-dropdown-item accesskey=delete @calciteDropdownItemSelect=${this.chartDeleteSelect}>${this._messages.delete}</calcite-dropdown-item></calcite-dropdown-group></calcite-dropdown>`}</calcite-list-item>`;
    }) : null;
    return this.layer ? o`<div>${this.noGroup ? null : o`<p class=${n(c.header)}>${this.layer.title ?? this.layer.id.toString()}</p>`}<calcite-list label .dragEnabled=${!this.disableEditing} selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${e}${this.disableEditing ? null : o`<div class=${n(c.addChartContainer)}><calcite-fab slot=fab appearance=outline-fill kind=neutral text-enabled .text=${this._messages.addChart} .label=${this._messages.addChart} @click=${this.onAddChartClick} scale=s></calcite-fab></div>`}</calcite-list></div>` : null;
  }
  onChartSelect(e) {
    const t = e.currentTarget;
    let i;
    t?.localName === "calcite-list-item" ? i = t.value : t?.localName === "calcite-icon" && (i = t.parentNode.value), this.arcgisChartsConfigViewChartSelect.emit({ chartId: i });
  }
  chartEditSelect() {
    this.disableEditing || (this.arcgisChartsConfigViewChartEdit.emit({
      chartId: this.selectedActionChartId
    }), this.chartActionClosed(this.selectedActionChartId));
  }
  chartRenameSelect(e) {
    if (!this.disableEditing) {
      const i = e.target.closest("calcite-list-item"), a = this.modelList?.find((s) => s.getChartId() === this.selectedActionChartId);
      i !== null && (this.renameReferenceElement = i), this.arcgisChartsConfigViewChartSelect.emit({
        chartId: this.selectedActionChartId
      }), this.chartTitle = a?.getTitleText() ?? "", this.renameOpen = !0, this.setupRenamePopover();
    }
  }
  chartDeleteSelect() {
    this.disableEditing || (this.arcgisChartsConfigViewChartDelete.emit({
      chartId: this.selectedActionChartId
    }), this.selectedActionChartId = "");
  }
  chartActionClosed(e) {
    e === this.selectedActionChartId && !this.renameOpen && (this.selectedActionChartId = "");
  }
  chartActionOpened(e) {
    this.selectedActionChartId = e;
  }
  setupRenamePopover() {
    if (this.chartRenamePopover === null) {
      const e = {
        name: this.chartTitle,
        popoverReferenceElement: this.renameReferenceElement,
        onChartRename: this.onChartRename,
        popoverClose: this.popoverClose
      };
      this.chartRenamePopover = p(g.ChartRenamePopover, e), document.body.appendChild(this.chartRenamePopover);
    }
    this.chartRenamePopover !== null && (this.chartRenamePopover.open = this.renameOpen, this.chartRenamePopover.name = this.chartTitle, this.chartRenamePopover.popoverReferenceElement = this.renameReferenceElement);
  }
  removeChartRenamePopover() {
    this.chartRenamePopover !== null && (this.chartRenamePopover.open = !1, this.chartRenamePopover = C(this.chartRenamePopover));
  }
  render() {
    return o`<div class=${n(c.viewChartComponent)}>${this.buildChartList()}</div>`;
  }
}
h("arcgis-charts-config-view-charts", R);
export {
  R as ArcgisChartsConfigViewCharts
};
