import { GaugeChartSubTypes, ISimpleFillSymbol, WebChartStatisticType, ValueConversion, WebChartTextSymbol, WebGaugeChart } from '@arcgis/charts-spec';
import { ChartTypes, ChartConfig } from '../../utils';
import { ChartModel } from '../chart-model/chart-model';
import { ModelParams } from '../interfaces/chart-interfaces';
import { LayerInfo, ModelTypes } from '../interfaces/common';
import { ModelWithBasicXAxis, ModelWithXGuides } from '../mixins';
export declare class GaugeModel extends ChartModel {
    /**
     * Current configuration used for the histogram.
     */
    protected _config: ChartConfig<typeof ModelTypes.Gauge, WebGaugeChart>;
    protected layerInfo: LayerInfo;
    protected _chartType: ChartTypes;
    setup(params: ModelParams<ChartConfig<typeof ModelTypes.Gauge>>): Promise<void>;
    /**
     * Gets the data field used for the gauge.
     * @returns {string}
     */
    getField(): string;
    /**
     * Sets the data field used for the gauge.
     * @param {string} field The field to set.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setField(field: string): Promise<void>;
    /**
     * Gets the aggregation type used for the gauge.
     * @returns {WebChartStatisticType}
     */
    getAggregationType(): WebChartStatisticType;
    /**
     * Sets the aggregation type used for the gauge.
     * @param {WebChartStatisticType} aggregationType The aggregation type to set. Must be one of the values allowed by `WebChartStatisticType`, excluding `"no_aggregation"`.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setAggregationType(aggregationType: WebChartStatisticType): Promise<void>;
    /**
     * Gets the inner radius of the gauge.
     * @returns {number}
     */
    getInnerRadius(): number;
    /**
     * Sets the inner radius of the gauge.
     * @param {number} innerRadius The inner radius to set.
     */
    setInnerRadius(innerRadius: number): void;
    /**
     * Gets the start angle of the gauge.
     * @returns {number}
     */
    getStartAngle(): number;
    /**
     * Sets the start angle of the gauge.
     * @param {number} startAngle The start angle to set.
     */
    setStartAngle(startAngle: number): void;
    /**
     * Gets the end angle of the gauge.
     * @returns {number}
     */
    getEndAngle(): number;
    /**
     * Sets the end angle of the gauge.
     * @param {number} endAngle The end angle to set.
     */
    setEndAngle(endAngle: number): void;
    /**
     * Gets the conversion to apply to the gauge value
     *
     * @returns {ValueConversion | undefined}
     */
    getValueConversion(): ValueConversion | undefined;
    /**
     * Sets the conversion to apply to the gauge value
     * @param {ValueConversion} valueConversion The conversion to apply
     */
    setValueConversion(valueConversion: ValueConversion): void;
    /**
     * Gets the index of the feature to be rendered.
     * @returns {number | undefined}
     * @remarks
     * This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
     * For feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)
     */
    getFeatureIndex(): number | undefined;
    /**
     * Sets the index of the feature to be rendered.
     * @param {number | null} featureIndex The index of the feature to be rendered
     * @remarks This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
     * For feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)
     */
    setFeatureIndex(featureIndex: number | null): Promise<void>;
    /**
     * Removes the existing feature index from the config object
     */
    removeFeatureIndex(): void;
    /**
     * Gets the type of Gauge chart, like FeatureGauge and StatisticGauge.
     * @returns {GaugeChartSubTypes}
     * @remarks When this property is not specified, it will be defaulted to GaugeChartSubTypes.StatisticGauge.
     */
    getGaugeSubType(): GaugeChartSubTypes;
    /**
     * Gets the visibility of the gauge's needle.
     * @returns {boolean}
     */
    getNeedleVisibility(): boolean;
    /**
     * Sets the visibility of the gauge's needle.
     * @param {boolean} visible The visibility to set.
     */
    setNeedleVisibility(visible: boolean): void;
    /**
     * Gets the symbol of the gauge's needle.
     * @returns {ISimpleFillSymbol | undefined}
     */
    getNeedleSymbol(): ISimpleFillSymbol | undefined;
    /**
     * Sets the symbol of the gauge's needle.
     * @param {ISimpleFillSymbol | undefined} needleSymbol The needle symbol to set.
     */
    setNeedleSymbol(needleSymbol: ISimpleFillSymbol | undefined): void;
    /**
     * Gets the start width of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleStartWidth(): number | null | undefined;
    /**
     * Sets the start width of the gauge's needle.
     * @param {number | null | undefined} width The start width to set.
     */
    setNeedleStartWidth(width: number | null | undefined): void;
    /**
     * Gets the end width of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleEndWidth(): number | null | undefined;
    /**
     * Sets the end width of the gauge's needle.
     * @param {number | null | undefined} width The end width to set.
     */
    setNeedleEndWidth(width: number | null | undefined): void;
    /**
     * Gets the inner radius of the gauge's needle.
     * @returns {number | null | undefined}
     */
    getNeedleInnerRadius(): number | null | undefined;
    /**
     * Sets the inner radius of the gauge's needle.
     * @param {number | null | undefined} innerRadius The inner radius to set.
     */
    setNeedleInnerRadius(innerRadius: number): void;
    /**
     * Gets whether to display the pin for the gauge's needle.
     * @returns {boolean}
     */
    getNeedleDisplayPin(): boolean;
    /**
     * Sets whether to display the pin for the gauge's needle.
     * @param {boolean} displayPin The display pin state.
     */
    setNeedleDisplayPin(displayPin: boolean): void;
    /**
     * Gets whether the inner label is visible.
     * @returns {boolean}
     */
    getInnerLabelVisible(): boolean;
    /**
     * Sets whether the inner label is visible.
     * @param {boolean} visible The visibility state to set.
     */
    setInnerLabelVisibility(visible: boolean): void;
    /**
     * Gets the inner label content symbol.
     * @returns {WebChartTextSymbol | undefined}
     */
    getInnerLabelContent(): WebChartTextSymbol | undefined;
    /**
     * Sets the inner label content symbol.
     * @param {WebChartTextSymbol | undefined} innerLabelContent The content symbol to set.
     */
    setInnerLabelContent(innerLabelContent: WebChartTextSymbol | undefined): void;
    /**
     * Gets whether the axis ticks are visible.
     * @returns {boolean}
     */
    getAxisTickVisibility(): boolean;
    /**
     * Sets whether the axis ticks are visible.
     * @param {boolean} visibile The visibility state to set.
     */
    setAxisTickVisibility(visibile: boolean): void;
    /**
     * Gets the labels increment for the gauge.
     * @returns {number | undefined}
     */
    getLabelsIncrement(): number | undefined;
    /**
     * Sets the labels increment for the gauge.
     * @param {number | undefined} increment The increment to set.
     */
    setLabelsIncrement(increment: number | undefined): void;
    /**
     * Gets whether to only show the first and last labels.
     * @returns {boolean}
     */
    getOnlyShowFirstAndLastLabels(): boolean;
    /**
     * Sets whether to only show the first and last axis labels.
     * @param {boolean} showOnlyFirstAndLastLabels Indicator of whether to only show the first and last axis labels
     */
    setOnlyShowFirstAndLastLabels(showOnlyFirstAndLastLabels: boolean): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface GaugeModel extends ModelWithBasicXAxis, ModelWithXGuides {
}
