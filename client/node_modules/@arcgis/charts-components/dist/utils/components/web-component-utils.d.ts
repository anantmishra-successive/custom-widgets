import { CSVOptions } from '../../interfaces';
import { ModelTypes } from '../../model';
import { IField, SupportedLayer } from '@arcgis/charts-spec';
import { ChartConfig } from '../types';
import { default as FeatureLayerView } from '@arcgis/core/views/layers/FeatureLayerView.js';
/**
 * A utility function to compare if a value has changed deeply.
 * @param value
 * @param oldValue
 */
export declare function hasChangedDeep<T>(value: T, oldValue?: T): boolean;
/**
 * A utility function to compare if a value has changed deeply or shallowly.
 * @param value
 * @param oldValue
 */
export declare function hasChangedDeepOrShallow<T>(value: T, oldValue?: T): boolean;
/**
 * Formats a cell value for CSV output.
 * This function handles quoting and escaping of special characters.
 * @param {unknown} value - The value to format.
 * @param {boolean} [quoteAll] - Whether to quote all values.
 *                               If `true`, all values will be quoted.
 *                               If `false` or `undefined`, only values that contain special characters will be quoted.
 */
export declare const formatCell: (value: unknown, quoteAll?: boolean) => string;
/**
 * Converts an array of objects to a CSV string.
 * @param data - The data to convert.
 * @param options - Options for CSV conversion.
 * @returns The CSV string.
 */
export declare function arrayToCSV<T extends Record<string, unknown>>(data: T[], options?: CSVOptions): string;
/**
 * Transform the raw data to a format that is suitable for exporting to CSV.
 * This function is used to transform the data before it is passed to the CSV export function.
 * @param props.config - [Optional] The chart configuration that defines the chart type and data transformation.
 * @param props.rawData - The raw data to be transformed, which is an array of objects.
 * @param props.layer - [Optional] The layer associated with the chart, used for additional data context.
 * @param props.fieldList - [Optional] The list of fields in the layer, used to determine field types and names.
 */
export declare function transformChartData<T extends Record<string, unknown>>(props: {
    config?: ChartConfig;
    rawData: T[];
    layer?: FeatureLayerView | SupportedLayer;
    fieldList?: IField[];
}): T[];
/**
 * Transform the histogram data to a format that is suitable for exporting to CSV.
 * @param config - The histogram model or config
 * @param rows - The raw data to be transformed.
 */
export declare function transformHistogramData<T extends Record<string, unknown>>(config: ChartConfig<typeof ModelTypes.Histogram>, rows: T[]): T[];
/**
 * Processes the chart data for bar and line charts.
 * @param props.config - The chart model.
 * @param props.rows - The raw data to be transformed.
 * @param props.layer - The layer associated with the chart.
 */
export declare function transformBarLineChartData<T extends Record<string, unknown>>(props: {
    config: ChartConfig<typeof ModelTypes.BarChart | typeof ModelTypes.ComboBarLineChart | typeof ModelTypes.LineChart>;
    rows: T[];
    layer?: FeatureLayerView | SupportedLayer;
    fieldList?: IField[];
}): T[];
/**
 * Transform the pie chart data to a format that is suitable for exporting to CSV.
 * @param props.model - The pie chart model.
 * @param props.rows - The raw data to be transformed.
 * @param props.layer - The layer associated with the chart.
 */
export declare function transformPieChartData<T extends Record<string, unknown>>(props: {
    config: ChartConfig<typeof ModelTypes.PieChart>;
    rows: T[];
    layer?: FeatureLayerView | SupportedLayer;
    fieldList?: IField[];
}): T[];
/**
 * Transform the box plot data to a format that is suitable for exporting to CSV.
 * @param model - The box plot model.
 * @param rows - The raw data to be transformed.
 * @returns The transformed data.
 */
export declare function transformBoxPlotData<T extends Record<string, unknown>>(props: {
    config: ChartConfig<typeof ModelTypes.BoxPlot>;
    rows: T[];
    layer?: FeatureLayerView | SupportedLayer;
    fieldList?: IField[];
}): T[];
/**
 * Check if the provided date is valid.
 * @param {unknown} date - The date to check, should be a string or a number.
 */
export declare const isValidDate: (date: unknown) => date is Date | number | string;
