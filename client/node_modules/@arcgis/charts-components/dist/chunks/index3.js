import { WebChartStatisticType as u } from "@arcgis/charts-spec";
import { bO as p, bl as F, W as C } from "./interfaces.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
async function B(n) {
  const { queryObject: o, queryConfig: y, category: e, splitByField: r, chartLimits: l, abortKey: c } = n, s = r !== void 0, a = e !== C ? [e] : [];
  s && a.push(r);
  const d = p(o), m = {
    ...y,
    groupByFieldsForStatistics: Array.from(new Set(a)),
    outStatistics: [
      {
        statisticType: u.Count,
        onStatisticField: d.objectIdField,
        // Generating an out stat field name. Letting it to COUNT only can fail the query on arcObject layers
        outStatisticFieldName: `${u.Count}_OBJECTID`
      }
    ],
    orderByFields: void 0,
    // Adding num (resultRecordCount) to match the query fetching the results (build by `buildUniqueQuery()). We pick an arbitrary limit (maxBarThreePlusSeriesCountTotal)
    // as we don't know in advance how many results we will get.
    // TODO: once the servers are able to make a distinction between values with a different number of trailing spaces we'll be able to revert that function to its previous
    // state, using the `returnDistinctValues` on a specific field.
    // Refer to: https://devtopia.esri.com/WebGIS/arcgis-charts/issues/8208
    num: l?.maxBarThreePlusSeriesCountTotal
  }, f = await F({
    queryObject: o,
    featureCount: 1,
    // skipping the count
    queryConfig: m,
    abortKey: c
  });
  return Array.from(
    new Set(
      f.map((t) => t.attributes[s ? r : e])
    )
  ).sort((t, i) => typeof t == "string" && typeof i == "string" ? t.localeCompare(i) : Number(t) - Number(i));
}
export {
  B as u
};
