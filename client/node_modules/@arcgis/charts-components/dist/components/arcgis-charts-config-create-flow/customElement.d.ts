/// <reference types="../../index.d.ts" />
import { ChartModel, ModelTypes } from '../../model';
import { SeriesSymbolsMap } from '../../utils';
import { CalculatedMinMaxBoundsPayload, SupportedLayer, WebChartGenericDataItem, WebChartHistogramDataItem } from '@arcgis/charts-spec';
import { default as Sublayer } from '@arcgis/core/layers/support/Sublayer';
import { default as MapView } from '@arcgis/core/views/MapView';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { PropertyValues } from 'lit';
import { ModelListChangePayload, PanelNumberChangePayload, PopoverOpenChangePayload } from '../../utils/components/event-payloads';

/** @private */
export declare class ArcgisChartsConfigCreateFlow extends LitElement {
    /** Overwrite localized strings for this component */
    messageOverrides?: typeof this._messages._overrides;
    /**
     * List of chart models.
     *
     * @type {ChartModel[]}
     * @category Public
     */
    modelList: ChartModel[];
    /**
     * List of layers containing the charts to be displayed.
     *
     * @type {(Sublayer | SupportedLayer)[]}
     * @category Public
     */
    layerList: (Sublayer | SupportedLayer)[];
    /**
     * Chart ID for the selected chart.
     *
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    selectedChartId?: string;
    /**
     * Layer ID for the "active" layer. Only charts from this layer will be displayed.
     *
     * (Optional) If not provided, all charts from all layers will be displayed.
     *
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    activeLayerId?: string;
    /**
     * Disable the three-dot menu for editing, renaming & deleting charts and disable re-ordering charts position in the charts list. Useful if the list is only intended for viewing.
     *
     * @type {boolean}
     * @category Public
     * @default false
     */
    disableEditing: boolean;
    /**
     * When `true`, modifications to a chart will be synced back to its associated layer from the `layerList`. **Note: This means the layer object will be mutated automatically.**
     *
     * @type {boolean}
     * @category Public
     * @default false
     */
    syncChartsToLayers: boolean;
    /**
     * Custom time zone for the chart.
     *
     * @type {MapView["timeZone"] | undefined}
     * @category Public
     * @default undefined
     */
    timeZone?: MapView["timeZone"];
    /**
     * header title string to be shown for the component.
     *
     * @category Public
     */
    headerTitle?: string;
    /**
     * Open the view chart panel.
     *
     * @category Public
     * @default false
     */
    open?: boolean;
    /**
     * Processed chart data
     * Used only by histogram
     *
     * @category Public
     */
    chartData?: WebChartGenericDataItem | WebChartHistogramDataItem;
    /**
     * R2 value from trendline
     * Used only by scatter plot
     *
     * @category Public
     */
    r2?: number;
    /**
     * Data min and max values for x and y fields
     *
     * @category Public
     */
    calculatedDataMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * Min/Max bounds computed by the chart
     *
     * @category Public
     */
    calculatedMinMaxBounds?: CalculatedMinMaxBoundsPayload[];
    /**
     * list of series color
     *
     * @category Public
     */
    seriesColor?: SeriesSymbolsMap;
    /**
     * Popover placement use it from the viewer to place the popover.
     *  `@category` Public
     */
    popoverPlacement?: HTMLCalcitePopoverElement["placement"];
    /**
     * usePopupTemplateFieldsInfo can be set to true to read the fields from layer.popupTemplate
     *
     * @category Public
     * @default false
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * panel number to keep track of the flow movement.
     *
     * @category Public
     * @default 0
     */
    panelNumber: number;
    /**
     * Whether the filter by selection is currently enabled.
     *
     * @category Public
     * @default false
     */
    filterBySelection?: boolean;
    /**
     * Sets the focus to the calcite flow item.
     *
     * @category Public
     */
    setFocus(): Promise<void>;
    /**
     * Arcgis config close event emitted on close of the view chart close.
     *
     * @event
     */
    readonly arcgisChartsConfigChartViewChartClose: TargetedEvent<this, void>;
    /**
     * Arcgis config change event emitted when the model list changes.
     *
     * @event
     */
    readonly arcgisChartsConfigModelListChange: TargetedEvent<this, ModelListChangePayload>;
    /**
     * Arcgis config change event emitted when a new chart should be created.
     *
     * @event
     */
    readonly arcgisChartsConfigNewChart: TargetedEvent<this, {
        key: string;
        chartType: ModelTypes;
        layerId: string | undefined;
    }>;
    /**
     * Event emitted when the panel number changed.
     *
     * @category Public
     */
    readonly arcgisChartsConfigPanelNumberChange: TargetedEvent<this, PanelNumberChangePayload>;
    /**
     * Event emitted when the popover open changed.
     *
     * @category Public
     */
    readonly arcgisChartsConfigPopoverOpenChange: TargetedEvent<this, PopoverOpenChangePayload>;
    /**
     * Arcgis config change event emitted when the selected config changes.
     *
     * @event
     */
    readonly arcgisChartsConfigSelectedChartChange: TargetedEvent<this, {
        key: string;
        model: ChartModel | undefined;
    }>;
    private _messages;
}
