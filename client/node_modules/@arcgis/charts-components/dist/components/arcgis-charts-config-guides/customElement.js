import { c as x } from "../../chunks/runtime.js";
import "@arcgis/charts-spec";
import { cloneDeep as r } from "lodash-es";
import "d3-array";
import "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as A } from "../../chunks/popover-ui-utils.js";
import { d as c } from "../../chunks/default.js";
import { g as u, H as g } from "../../chunks/resource.js";
import { u as b } from "../../chunks/useT9n.js";
import { html as a } from "lit";
import { createRef as m, ref as G } from "lit-html/directives/ref.js";
import { LitElement as C, createEvent as $, safeClassMap as p } from "@arcgis/lumina";
import { css as v } from "@lit/reactive-element/css-tag.js";
import { G as o } from "../../chunks/common.js";
import { n as l, o as h } from "../../chunks/type-guards.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const X = v`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.add-guide{display:flex;justify-content:center;padding:.5rem}.add-guide-btn{width:100%}.no-guides{border-radius:2rem}.no-messages{text-align:center}.guide-icon{padding-left:.5rem;padding-top:.5rem;width:1.5rem;height:1.5rem}`;
class Y extends C {
  constructor() {
    super(...arguments), this._messages = b(), this.addGuideButton = m(), this.popoverElement = m(), this.addXGuide = () => {
      if (l(this.model)) {
        const e = this.getUniqueName(this._messages.xAxisGuide ?? ""), i = this.model.getXGuidesLength() ?? 0;
        this.model.addXAxisGuide(e, i), this.model.setGuideStyle(r(c.style), i, o.X), this.latestGuidePosition = u(i, o.X, this.model), this.togglePopOver(), (this.el.shadowRoot?.querySelectorAll("calcite-block") ?? []).forEach((s, d) => {
          d !== this.latestGuidePosition && (s.open = !1);
        });
      }
    }, this.addYGuide = () => {
      if (h(this.model)) {
        const e = this.getUniqueName(this._messages.yAxisGuide ?? ""), i = this.model.getYGuidesLength() ?? 0;
        this.model.addYAxisGuide(e, i), this.model.setGuideStyle(r(c.style), i, o.Y), this.latestGuidePosition = u(i, o.Y, this.model), this.togglePopOver();
        for (const t of this.el.shadowRoot?.querySelectorAll("calcite-block") ?? [])
          t.open = !1;
      }
    }, this.togglePopOver = () => {
      this.enableXAxisGuide && this.enableYAxisGuide && (this.showAddButton = !this.showAddButton);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.showAddButton = !0, this.latestGuidePosition = 0, this.open = !1, this.arcgisChartsConfigGuidePopoverChange = $();
  }
  static {
    this.properties = { showAddButton: 16, latestGuidePosition: 16, messageOverrides: 0, model: 0, timeZone: 3, calculatedMinMaxBounds: 2, enableXAxisGuide: 5, enableYAxisGuide: 5, open: 7 };
  }
  static {
    this.styles = X;
  }
  load() {
    this.modelChange(this.model);
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model"));
  }
  updated() {
    A(this.popoverElement.value, !this.showAddButton);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, i) {
    i?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  getAllGuidesLength() {
    const e = l(this.model) ? this.model.getXGuidesLength() ?? 0 : 0, i = h(this.model) ? this.model.getYGuidesLength() ?? 0 : 0;
    return e + i;
  }
  getUniqueName(e, i = 1) {
    const t = `${e} ${i}`;
    let s = !1;
    if (l(this.model)) {
      const d = this.model.getXGuidesLength() ?? 0;
      for (let n = 0; n < d && !s; n += 1)
        this.model.getGuideName(n, o.X) === t && (s = !0);
    }
    if (h(this.model)) {
      const d = this.model.getYGuidesLength() ?? 0;
      for (let n = 0; n < d && !s; n += 1)
        this.model.getGuideName(n, o.Y) === t && (s = !0);
    }
    return s ? this.getUniqueName(e, i + 1) : t;
  }
  closeAddPopOver() {
    this.showAddButton = !0;
  }
  setChangedGuide(e) {
    const { index: i, orientation: t, isDelete: s } = e.detail, d = u(i, t, this.model);
    s && d !== void 0 && d <= this.latestGuidePosition && this.latestGuidePosition > 0 && (this.latestGuidePosition -= 1);
  }
  renderGuide(e, i) {
    let t;
    return (this.enableXAxisGuide && i === o.X || this.enableYAxisGuide && i === o.Y) && (t = a`<arcgis-charts-config-guide .model=${this.model} .timeZone=${this.timeZone} .calculatedMinMaxBounds=${this.calculatedMinMaxBounds} .index=${e} .orientation=${i} .latestGuidePosition=${this.latestGuidePosition} @arcgisChartsConfigGuideChange=${this.setChangedGuide}></arcgis-charts-config-guide>`), t;
  }
  renderGuides() {
    const e = [];
    if (l(this.model)) {
      const i = this.model.getXGuidesLength() ?? 0;
      for (let t = 0; t < i; t += 1)
        e.push(this.renderGuide(t, o.X));
    }
    if (h(this.model)) {
      const i = this.model.getYGuidesLength() ?? 0;
      for (let t = 0; t < i; t += 1)
        e.push(this.renderGuide(t, o.Y));
    }
    return e;
  }
  renderAddGuideButton(e) {
    return a`<calcite-fab slot=fab appearance=outline-fill kind=neutral text-enabled .text=${this._messages.addGuide} .label=${this._messages.addGuide} @click=${e} scale=s></calcite-fab>`;
  }
  render() {
    const e = this.getAllGuidesLength(), i = e > 0, t = this.showAddButton && this.enableXAxisGuide && this.enableYAxisGuide, s = this.enableXAxisGuide && !this.enableYAxisGuide, d = !this.enableXAxisGuide && this.enableYAxisGuide;
    return a`<calcite-popover .open=${!this.showAddButton} .referenceElement=${this.addGuideButton.value ?? document.body} flip-disabled pointer-disabled offset-distance=-18 @calcitePopoverClose=${this.closeAddPopOver} .placement=${e === 0 ? "bottom" : "top"} label ${G(this.popoverElement)}><calcite-panel .heading=${this._messages.guideType}><calcite-action text slot=header-actions-end icon=x @click=${this.closeAddPopOver}></calcite-action>${this.enableXAxisGuide ? a`<calcite-action .label=${this._messages.addXAxisGuide} .text=${this._messages.addXAxisGuide ?? ""} @click=${this.addXGuide} icon=x-axis-guide text-enabled></calcite-action>` : null}${this.enableYAxisGuide ? a`<calcite-action .label=${this._messages.addYAxisGuide} .text=${this._messages.addYAxisGuide ?? ""} @click=${this.addYGuide} icon=y-axis-guide text-enabled></calcite-action>` : null}</calcite-panel></calcite-popover>${i ? this.renderGuides() : a`<div class=${p(g.noMessages)}>${this._messages.noGuidesMsg}</div>`}<div class=${p(g.addGuide)} ${G(this.addGuideButton)}>${t && this.renderAddGuideButton(this.togglePopOver) || ""}${s && this.renderAddGuideButton(this.addXGuide) || ""}${d && this.renderAddGuideButton(this.addYGuide) || ""}</div>`;
  }
}
x("arcgis-charts-config-guides", Y);
export {
  Y as ArcgisChartsConfigGuides
};
