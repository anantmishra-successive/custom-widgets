import { c as X } from "../../chunks/runtime.js";
import { keyed as B } from "lit-html/directives/keyed.js";
import { RESTSymbolType as m, WebChartTypes as R, RESTSimpleLineSymbolStyle as O } from "@arcgis/charts-spec";
import { cloneDeep as E } from "lodash-es";
import "d3-array";
import { d as p, bT as N, bU as L, bV as F, a3 as V } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { c as g, b as Z } from "../../chunks/index4.js";
import { c as q, P as z } from "../../chunks/popover-ui-utils.js";
import { m as G, d as H, e as U, g as W, k as M, c as S } from "../../chunks/chart-ui-utils2.js";
import { d as A } from "../../chunks/default.js";
import { g as Y } from "../../chunks/resource.js";
import { u as j } from "../../chunks/useT9n.js";
import { html as d } from "lit";
import { createRef as h, ref as u } from "lit-html/directives/ref.js";
import { LitElement as J, createEvent as $, safeClassMap as o, safeStyleMap as K } from "@arcgis/lumina";
import { css as Q } from "@lit/reactive-element/css-tag.js";
import { G as T } from "../../chunks/common.js";
import { j as ee, n as te, o as ie } from "../../chunks/type-guards.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const s = {
  row: "row",
  column: "column",
  colorPicker: "color-picker"
}, oe = Q`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column}.row{display:flex;flex-direction:row;column-gap:var(--arcgis-charts-inter-section-margin)}.column{display:flex;flex-direction:column;flex-wrap:wrap;flex-grow:1}.column>calcite-input{margin-bottom:.5rem;flex-grow:2}.column>calcite-input[type=number]{margin-bottom:.5rem}input{padding:.5rem}.label{display:flex;flex-direction:row;justify-content:space-between;margin-bottom:var(--arcgis-charts-intra-section-margin);flex-grow:1}.color-picker{border:1px solid var(--calcite-color-border-2);box-shadow:none;margin-bottom:var(--arcgis-charts-inter-section-margin)}.delete-guide{display:flex;flex-direction:row-reverse;height:2rem;margin:0 1rem;font-weight:550}:host([dir=rtl]) .delete-guide{flex-direction:row}`;
class se extends J {
  constructor() {
    super(...arguments), this._messages = j(), this.startCalciteInput = h(), this.endCalciteInput = h(), this.startDateCalciteInput = h(), this.endDateCalciteInput = h(), this.startTimeCalciteInput = h(), this.endTimeCalciteInput = h(), this.colorElement = h(), this.colorChange = (e) => {
      const t = e.detail, i = this.model.getGuideStart(this.index, this.orientation), n = this.model.getGuideEnd(this.index, this.orientation);
      if (p(i, n) === m.SLS) {
        const l = E(A.style), a = this.model.getGuideStyle(this.index, this.orientation), r = {
          ...l,
          ...g(a) ? a : {},
          color: t
        };
        this.lineStyleChange({ detail: r });
      } else
        this.setColor(t);
    }, this.symbolChange = (e) => {
      const t = e?.detail, i = this.model.getGuideStart(this.index, this.orientation), n = this.model.getGuideEnd(this.index, this.orientation);
      if (p(i, n) === m.SLS) {
        const l = E(A.style), a = this.model.getGuideStyle(this.index, this.orientation), r = {
          ...l,
          ...g(a) ? a : {},
          ...g(t) ? t : {}
        };
        this.lineStyleChange({ detail: r });
      } else t?.color !== void 0 && this.setColor(t.color);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.latestGuidePosition = 0, this.arcgisChartsConfigGuideChange = $(), this.arcgisChartsConfigGuidePopoverChange = $(), this.arcgisChartsConfigPopoverOpenChange = $();
  }
  static {
    this.properties = { guidePopover: 16, messageOverrides: 0, model: 0, timeZone: 3, calculatedMinMaxBounds: 2, index: 11, orientation: 3, latestGuidePosition: 9 };
  }
  static {
    this.styles = oe;
  }
  get isXAxisDateField() {
    return this.orientation === T.X && ee(this.model) && this.model.getXAxisValueFormat()?.type === R.DateAxisFormat;
  }
  load() {
    this.modelChange(this.model);
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model"));
  }
  loaded() {
    this.isXAxisDateField && this.setGuideDateTimeRange();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  onColorElementSelect() {
    this.guidePopover?.open === !0 ? this.removeGuidePopover() : this.setupGuidePopover();
  }
  setGuideStart(e) {
    const { value: t } = e.target;
    this.startCalciteInput.value !== void 0 && (t === "" ? G({
      inputElement: this.startCalciteInput.value,
      status: S.INVALID
    }) : (this.model.setGuideStart(t, this.index, this.orientation), this.symbolChange(), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    }), G({
      inputElement: this.startCalciteInput.value,
      status: S.IDLE
    }))), this.guidePopover?.open === !0 && this.removeGuidePopover();
  }
  setGuideEnd(e) {
    const { value: t } = e.target;
    this.endCalciteInput.value !== void 0 && (this.model.setGuideEnd(t === "" ? null : t, this.index, this.orientation), this.symbolChange(), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    }), G({
      inputElement: this.endCalciteInput.value,
      status: S.IDLE
    })), this.guidePopover?.open === !0 && this.removeGuidePopover();
  }
  setGuideDateTimeRange() {
    const e = this.calculatedMinMaxBounds?.find((c) => c.isXAxis)?.minimum, t = this.calculatedMinMaxBounds?.find((c) => c.isXAxis)?.maximum, i = typeof e == "number" ? new Date(e) : /* @__PURE__ */ new Date(), n = typeof t == "number" ? new Date(t) : /* @__PURE__ */ new Date(), l = new window.Intl.DateTimeFormat().resolvedOptions().timeZone, a = N(this.timeZone) ?? l, r = L(i, a), v = F(i, a), f = L(n, a), _ = F(n, a), P = this.startDateCalciteInput.value?.value ?? "", C = P === "" ? r : P, D = this.startTimeCalciteInput.value?.value ?? "", w = D === "" ? v : D, x = this.endDateCalciteInput.value?.value ?? "", y = x === "" ? f : x, I = this.endTimeCalciteInput.value?.value ?? "", k = I === "" ? _ : I;
    let b = !1;
    if (!Array.isArray(C) && C !== void 0 && w !== void 0) {
      const c = `${C}T${w}`;
      this.model.setGuideStart(c, this.index, this.orientation), b = !0;
    }
    if (!Array.isArray(y) && y !== void 0 && k !== void 0) {
      const c = x === "" ? void 0 : `${y}T${k}`;
      this.model.setGuideEnd(c, this.index, this.orientation), b = !0;
    }
    b && (this.symbolChange(), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    }), this.guidePopover?.open === !0 && this.removeGuidePopover());
  }
  setGuideName(e) {
    const t = e.target.value;
    this.model.setGuideName(t, this.index, this.orientation), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    });
  }
  setGuideLabel(e) {
    const t = e.target.value;
    this.model.setGuideLabelText(t, this.index, this.orientation), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    });
  }
  setGuideRendered(e) {
    const t = e.target?.selectedItem?.value;
    if (t !== void 0) {
      const i = t === this._messages.inFront;
      this.model.setGuideAbove(i, this.index, this.orientation), this.arcgisChartsConfigGuideChange.emit({
        index: this.index,
        orientation: this.orientation,
        isDelete: !1
      });
    }
  }
  lineStyleChange(e) {
    const t = e.detail;
    this.model.setGuideStyle(t, this.index, this.orientation), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    });
  }
  guidePopoverChange(e) {
    this.arcgisChartsConfigGuidePopoverChange.emit({
      open: e,
      element: this.guidePopover
    }), this.arcgisChartsConfigPopoverOpenChange.emit({
      open: e
    });
  }
  setupGuidePopover() {
    if (this.guidePopover === void 0) {
      const n = {
        colorChange: this.colorChange,
        symbolChange: this.symbolChange,
        popoverDismiss: (l) => {
          this.arcgisChartsConfigPopoverOpenChange.emit(l.detail);
        },
        popoverClose: () => {
          this.guidePopoverChange(!1), this.removeGuidePopover();
        }
      };
      this.guidePopover = q(z.GuidePopover, n);
    }
    const e = this.model.getGuideStyle(this.index, this.orientation), t = this.model.getGuideStart(this.index, this.orientation), i = this.model.getGuideEnd(this.index, this.orientation);
    p(t, i) === m.SLS ? this.guidePopover.selectedElement = g(e) ? e : void 0 : this.guidePopover.selectedElement = e?.color, this.guidePopover.referenceElement = this.colorElement.value, Array.isArray(e?.color) ? (this.guidePopover.open = !0, this.addGuidePopover()) : (this.guidePopover.open = !1, this.removeGuidePopover());
  }
  removeGuidePopover() {
    this.guidePopover?.remove(), this.guidePopoverChange(!1), this.guidePopover = void 0;
  }
  addGuidePopover() {
    this.guidePopover !== void 0 && !document.body.contains(this.guidePopover) && document.body.appendChild(this.guidePopover), this.guidePopoverChange(!0);
  }
  setColor(e) {
    const t = V({ opacity: 0 }), i = this.model.getGuideStyle(this.index, this.orientation), n = {
      ...Z(i) ? i : {},
      type: m.SFS,
      color: e,
      outline: t
    };
    this.model.setGuideStyle(n, this.index, this.orientation), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !1
    });
  }
  getDateStringFromBound(e) {
    return typeof e == "string" ? e.split("T")[0] : "";
  }
  getTimeStringFromBound(e) {
    return typeof e == "string" ? e.split("T")[1] : "";
  }
  createTooltip(e) {
    const t = e.target;
    switch (this.tooltip = H(t), t.icon) {
      case "view-visible":
        this.tooltip.innerHTML = this._messages.hideGuide ?? "";
        break;
      case "view-hide":
        this.tooltip.innerHTML = this._messages.showGuide ?? "";
        break;
      case "trash":
      default:
        this.tooltip.innerHTML = this._messages.deleteGuide ?? "";
        break;
    }
    document.body.appendChild(this.tooltip);
  }
  toggleGuide() {
    const e = this.model.getGuideVisibility(this.index, this.orientation);
    this.model.setGuideVisibility(!e, this.index, this.orientation);
  }
  destroyTooltip() {
    U(this.tooltip);
  }
  deleteGuide() {
    this.destroyTooltip(), this.orientation === T.X && te(this.model) ? this.model.deleteXAxisGuide(this.index) : this.orientation === T.Y && ie(this.model) && this.model.deleteYAxisGuide(this.index), this.arcgisChartsConfigGuideChange.emit({
      index: this.index,
      orientation: this.orientation,
      isDelete: !0
    });
  }
  renderColorElement() {
    const e = this.model.getGuideStyle(this.index, this.orientation), [t, i, n, l] = [...e?.color ?? [1, 1, 1, 255]], a = this.model.getGuideStart(this.index, this.orientation), r = this.model.getGuideEnd(this.index, this.orientation), v = g(e) ? W(e.style) : O.Solid, f = p(a, r) === m.SLS ? `line-${v}` : "square-f";
    return d`<calcite-list label selection-mode=single selection-appearance=border><calcite-list-item .value=${this._messages.style} class=${o(s.colorPicker)} .label=${this._messages.style} .selected=${this.guidePopover?.open} @click=${this.onColorElementSelect} ${u(this.colorElement)}><calcite-icon slot=content-end .icon=${f} style=${K({ color: `rgba(${t},${i},${n},${l / 255})` })}></calcite-icon></calcite-list-item></calcite-list>`;
  }
  render() {
    const e = this.model.getGuideStart(this.index, this.orientation), t = this.model.getGuideEnd(this.index, this.orientation), i = this.model.getGuideName(this.index, this.orientation), n = this.model.getGuideLabelText(this.index, this.orientation), l = this.model.getGuideAbove(this.index, this.orientation), a = this.model.getGuideVisibility(this.index, this.orientation), r = this.isXAxisDateField;
    return d`<calcite-block .heading=${i ?? ""} .open=${this.latestGuidePosition === Y(this.index, this.orientation, this.model)} collapsible .messageOverrides=${{
      expand: this._messages.expand,
      collapse: this._messages.collapse
    }}><calcite-action slot=control text .icon=${a ? "view-visible" : "view-hide"} @click=${this.toggleGuide} @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}></calcite-action><calcite-action slot=control text icon=trash @click=${this.deleteGuide} @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}></calcite-action><div class=${o(s.row)}><calcite-label class=${o(s.column)}>${this._messages.start}${r ? d`<calcite-input-date-picker .value=${this.getDateStringFromBound(e)} required scale=s placement=bottom-end @calciteInputDatePickerChange=${this.setGuideDateTimeRange} ${u(this.startDateCalciteInput)}></calcite-input-date-picker>` : d`<calcite-input type=number required @calciteInputInput=${this.setGuideStart} @keydown=${M} number-button-type=none .value=${e?.toString()} ${u(this.startCalciteInput)}></calcite-input>`}</calcite-label><calcite-label class=${o(s.column)}>${this._messages.end}${r ? d`<calcite-input-date-picker .value=${this.getDateStringFromBound(t)} scale=s placement=bottom-end @calciteInputDatePickerChange=${this.setGuideDateTimeRange} ${u(this.endDateCalciteInput)}></calcite-input-date-picker>` : d`<calcite-input type=number @calciteInputInput=${this.setGuideEnd} @keydown=${M} number-button-type=none .value=${t?.toString()} ${u(this.endCalciteInput)}></calcite-input>`}</calcite-label></div>${r ? B("time-picker-row", d`<div class=${o(s.row)}>${e != null ? d`<calcite-label class=${o(s.column)}><calcite-input-time-picker .value=${this.getTimeStringFromBound(e)} scale=s @calciteInputTimePickerChange=${this.setGuideDateTimeRange} ${u(this.startTimeCalciteInput)}></calcite-input-time-picker></calcite-label>` : null}${t != null ? d`<calcite-label class=${o(s.column)}><calcite-input-time-picker .value=${this.getTimeStringFromBound(t)} scale=s @calciteInputTimePickerChange=${this.setGuideDateTimeRange} ${u(this.endTimeCalciteInput)}></calcite-input-time-picker></calcite-label>` : null}</div>`) : null}<div class=${o(s.row)}><div class=${o(s.column)}>${this.renderColorElement()}</div></div><div class=${o(s.row)}><calcite-label class=${o(s.column)}>${this._messages.guideName}<calcite-input type=text .value=${i} @calciteInputInput=${this.setGuideName}></calcite-input></calcite-label></div><div class=${o(s.row)}><calcite-label class=${o(s.column)}>${this._messages.guideLabel}<calcite-input type=text .value=${n} @calciteInputInput=${this.setGuideLabel}></calcite-input></calcite-label></div><div class=${o(s.row)}><calcite-label class=${o(s.column)}>${this._messages.display}<calcite-segmented-control @calciteSegmentedControlChange=${this.setGuideRendered} scale=s><calcite-segmented-control-item .checked=${l} .value=${this._messages.inFront}>${this._messages.inFront}</calcite-segmented-control-item><calcite-segmented-control-item .checked=${!l} .value=${this._messages.inBack}>${this._messages.inBack}</calcite-segmented-control-item></calcite-segmented-control></calcite-label></div></calcite-block>`;
  }
}
X("arcgis-charts-config-guide", se);
export {
  se as ArcgisChartsConfigGuide
};
