import { c as C } from "../../chunks/runtime.js";
import { RESTSymbolType as u } from "@arcgis/charts-spec";
import { isEqual as n, cloneDeep as p } from "lodash-es";
import "d3-array";
import { g as y, a_ as v } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { h as I } from "../../chunks/index4.js";
import { LitElement as F, createEvent as m } from "@arcgis/lumina";
import { html as h } from "lit";
import { C as c } from "../../chunks/interfaces2.js";
import { css as S } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const P = S`:host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}`;
class E extends F {
  constructor() {
    super(...arguments), this.popoverElement = null, this.onModelConfigChange = async (e) => {
      const t = e?.detail.config ?? this.model.getConfig();
      this.layer === void 0 && await this.updateFetchLayerFieldsInfo(t);
    }, this.popoverPlacement = "leading", this.arcgisChartsConfigNoSeriesUpdate = m(), this.arcgisChartsConfigWebChartChange = m();
  }
  static {
    this.properties = { layerFieldsInfo: 16, model: 0, popoverPlacement: 3, seriesColor: 2, calculatedMinMaxBounds: 2, page: 3, layer: 0, usePopupTemplateFieldsInfo: 5, filterBySelection: 5, chartData: 0 };
  }
  static {
    this.styles = P;
  }
  async load() {
    this.layer !== void 0 && await this.layerChange(this.layer, void 0), this.seriesColor !== void 0 && this.seriesColorChange(this.seriesColor), this.usePopupTemplateFieldsInfo !== void 0 && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, void 0), this.modelChange(this.model), this.onModelConfigChange();
  }
  async willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("layer") && await this.layerChange(this.layer, e.get("layer")), e.has("usePopupTemplateFieldsInfo") && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, e.get("usePopupTemplateFieldsInfo")), e.has("seriesColor") && this.seriesColorChange(this.seriesColor), this.layerFieldsInfo === void 0 && await this.updateFetchLayerFieldsInfo();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, i) {
    i?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  async layerChange(e, i) {
    e !== void 0 && !n(i, e) && await this.updateFetchLayerFieldsInfo();
  }
  async usePopupTemplateFieldsInfoChange(e, i) {
    e !== void 0 && e !== i && await this.updateFetchLayerFieldsInfo();
  }
  seriesColorChange(e) {
    const { slices: i, groupedSlices: t, groupOfSlices: a } = e?.get(0) ?? {};
    let o = [];
    this.filterBySelection === !0 ? o = this.model.getSlices()?.map((r) => i?.find((s) => s.sliceId === r.sliceId) ?? t?.find((s) => s.sliceId === r.sliceId) ?? r) ?? [] : o = (i ?? []).concat(t ?? []), o.forEach((r, s) => {
      const f = this.model.getSlices()?.find((g) => g.sliceId === o[s].sliceId);
      f && (o[s] = { ...o[s], ...f });
      const l = o[s].fillSymbol;
      l !== void 0 && !n(l?.outline?.color, l?.color) && (l.outline = {
        ...l.outline ?? {},
        type: u.SLS,
        color: l.color
      });
    });
    const d = (t ?? []).map((r) => r.sliceId);
    t !== void 0 && !n(d, this.model.getGroupedSliceIds()) && this.model.setGroupedSliceIds(p(d)), n(o, this.model.getSlices()) || this.model.setSlices(p(o)), a !== void 0 && !n(a, this.model.getSliceGrouping()) && this.model.setSliceGrouping(p(a));
  }
  async updateFetchLayerFieldsInfo(e) {
    const i = e ?? this.model.getConfig();
    let t = this.layer;
    if (!t) {
      const a = I(i) ? i.iLayer : void 0;
      a && (t = await y(a));
    }
    t && (this.layerFieldsInfo = await v(t, this.usePopupTemplateFieldsInfo));
  }
  popoverOpen(e) {
    const { open: i = !1, element: t = null } = { ...e.detail };
    i === !0 && this.popoverElement !== t ? (this.popoverElement !== null && (this.popoverElement.open = !1), this.popoverElement = t) : i === !1 && this.popoverElement === t && (this.popoverElement = null);
  }
  render() {
    let e;
    switch (this.page) {
      case c.Data:
        e = h`<arcgis-charts-config-pie-chart-data .model=${this.model} .layerFieldsInfo=${this.layerFieldsInfo}></arcgis-charts-config-pie-chart-data>`;
        break;
      case c.Slices:
        e = h`<arcgis-charts-config-pie-chart-slices .model=${this.model} .chartData=${this.chartData} @arcgisChartsConfigPieChartSlicesPopoverChange=${this.popoverOpen} .popoverPlacement=${this.popoverPlacement}></arcgis-charts-config-pie-chart-slices>`;
        break;
      case c.Format:
        e = h`<arcgis-charts-config-format .model=${this.model} @arcgisChartsConfigFormatPopoverChange=${this.popoverOpen}></arcgis-charts-config-format>`;
        break;
      case c.General:
        e = h`<arcgis-charts-config-general .model=${this.model}></arcgis-charts-config-general>`;
        break;
      default:
        e = "";
        break;
    }
    return e;
  }
}
C("arcgis-charts-config-pie-chart", E);
export {
  E as ArcgisChartsConfigPieChart
};
