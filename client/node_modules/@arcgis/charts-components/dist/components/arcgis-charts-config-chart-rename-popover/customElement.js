import { c as l } from "../../chunks/runtime.js";
import "@arcgis/charts-spec";
import { isEmpty as c } from "lodash-es";
import "d3-array";
import "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as m } from "../../chunks/popover-ui-utils.js";
import { m as h, c as n } from "../../chunks/chart-ui-utils2.js";
import { u as p } from "../../chunks/useT9n.js";
import { html as d } from "lit";
import { createRef as s, ref as o } from "lit-html/directives/ref.js";
import { LitElement as g, createEvent as r, safeClassMap as a } from "@arcgis/lumina";
import { css as f } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const t = {
  jsAppFlyout: "js-app-flyout",
  chartRenameComponent: "chart-rename-component",
  renameLabelContainer: "rename-label-container",
  renamePanel: "rename-panel"
}, u = f`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.chart-rename-component{width:var(--arcgis-charts-config-panel-width-medium);height:var(--arcgis-charts-config-panel-height)}:host{overflow-y:auto;width:min-content}.rename-label-container{display:flex;padding:0 1rem;margin-top:1rem}.rename-label-container calcite-label{flex:1 1 0px;display:flex;width:0px}.rename-panel{width:calc(var(--calcite-panel-width-multiplier) * 20vw);max-width:calc(var(--calcite-panel-width-multiplier) * 420px);min-width:calc(var(--calcite-panel-width-multiplier) * 240px)}`;
class v extends g {
  constructor() {
    super(...arguments), this._messages = p(), this.characterLimitInputElement = s(), this.popoverElement = s(), this.isChartTitleInvalid = !1, this.changedName = "", this.name = "", this.arcgisChartsConfigChartRenamePopoverChange = r(), this.arcgisChartsConfigPopoverClose = r();
  }
  static {
    this.properties = { isChartTitleInvalid: 16, changedName: 16, messageOverrides: 0, name: 3, open: 5, popoverReferenceElement: 0 };
  }
  static {
    this.styles = u;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  load() {
    this.changedName = this.name;
  }
  willUpdate(e) {
    e.has("name") && (this.hasUpdated || this.name !== "") && this.changeName(this.name);
  }
  updated() {
    this.popoverElement.value?.reposition(), m(this.popoverElement.value, this.open);
  }
  changeName(e) {
    this.changedName = e;
  }
  onNameChange(e) {
    const i = e.target.value;
    this.changedName = i, this.isChartTitleInvalid = c(i.trim()), this.characterLimitInputElement.value && h({
      inputElement: this.characterLimitInputElement.value,
      status: this.isChartTitleInvalid ? n.INVALID : n.IDLE
    });
  }
  onCancelClick() {
    this.changedName = this.name, this.arcgisChartsConfigPopoverClose.emit(), this.open = !1;
  }
  onSubmitClick() {
    this.isChartTitleInvalid || (this.name = this.changedName, this.arcgisChartsConfigChartRenamePopoverChange.emit({ name: this.changedName }), this.open = !1);
  }
  popoverClose() {
    this.changedName = this.name, this.open = !1, this.arcgisChartsConfigPopoverClose.emit();
  }
  render() {
    return d`<div class=${a({
      [t.chartRenameComponent]: !0,
      [t.jsAppFlyout]: !0
    })}><calcite-popover .referenceElement=${this.popoverReferenceElement ?? document.body} @calcitePopoverClose=${this.popoverClose} .open=${this.open} placement=bottom label ${o(this.popoverElement)}><calcite-panel class=${a(t.renamePanel)} closable .closed=${!this.open} @calcitePanelClose=${this.popoverClose} .heading=${this._messages.renameChart}><div class=${a(t.renameLabelContainer)}><calcite-label>${this._messages.chartName}<calcite-input required type=text .value=${this.changedName} @calciteInputInput=${this.onNameChange} ${o(this.characterLimitInputElement)}></calcite-input><arcgis-charts-config-invalid-input-message .invalidInputMessage=${this._messages.emptyChartTitle} .isInvalid=${this.isChartTitleInvalid}></arcgis-charts-config-invalid-input-message></calcite-label></div><calcite-button slot=footer appearance=solid scale=m width=half @click=${this.onSubmitClick}>${this._messages.submit}</calcite-button><calcite-button slot=footer appearance=outline-fill scale=m width=half @click=${this.onCancelClick}>${this._messages.cancel}</calcite-button></calcite-panel></calcite-popover></div>`;
  }
}
l("arcgis-charts-config-chart-rename-popover", v);
export {
  v as ArcgisChartsConfigChartRenamePopover
};
