import { ArcadeApiConstant, SchemaApiFunction, SchemaApiItem, SchemaCategory, SchemaExample, SchemaProperty, SchemaResourceLink, SchemaReturnDefinition, SchemaReturnValue, SingularApiItem } from '../schema-types';
import { SqlApiFunction } from '../schema-types/sql';
import { SdkDictionaryVariable, SdkVariable } from '../profile-types';
export type Paths = {
    relativePath: string;
    absolutePath: string;
};
export declare function isSchemaDictionaryVariable(variable: SdkVariable): variable is SdkDictionaryVariable;
export declare function getDirectoryNames(path: string): Promise<string[]>;
export declare function getFileNames(path: string): Promise<string[]>;
/**
 * Structure used when reading the API Files
 */
export interface ApiDatabase {
    categories: ApiCategories;
    resources: ApiResources;
}
export type ApiCategories = Record<string, {
    definition: SchemaCategory;
    items: Map<string, SchemaApiItem>;
}>;
export type ApiResources = Record<string, string>;
export declare const DefaultApiResources: ApiResources;
export declare function isSchemaFunction(item: SchemaApiItem): item is SchemaApiFunction;
export declare function isSchemaConstant(item: SchemaApiItem): item is ArcadeApiConstant;
export declare function isSchemaReturnDefinition(item: SchemaReturnValue): item is SchemaReturnDefinition;
export declare function loadApiDatabase(languageFileName: string): Promise<ApiDatabase>;
export declare const toLocalConfig: {
    minimumIntegerDigits: number;
    useGrouping: boolean;
};
export declare function convertStringArrayToObject(array: string[] | string | undefined): Record<string, string>;
export declare function convertObjectToArray<T>(obj: Record<string, T> | undefined): T[] | undefined;
export declare function headingPattern(level: number): string;
export declare function isFunction(apiItem: SingularApiItem): apiItem is SchemaApiFunction;
export declare function assembleMarkdownString(value: string[] | string | undefined): string;
export declare function apiItemName(item: SchemaApiItem): string;
export declare function generateSinceVersionSection(resources: ApiResources, apiItem: SingularApiItem, paths: Paths, relative?: boolean): string[];
export declare function generateSignature(apiItem: SingularApiItem, paths: Paths, { relative, typeLink, needsHtmlEntity }?: {
    relative?: boolean | undefined;
    typeLink?: boolean | undefined;
    needsHtmlEntity?: boolean | undefined;
}): string;
export declare function generateTypeLink(values: string[] | string, paths: Paths, relative?: boolean): string;
export declare function generateParametersSection(resources: ApiResources, parameters: SchemaProperty[] | undefined, paths: Paths, relative?: boolean, useTypeLinks?: boolean): string[];
export declare function generateReturnSection(resources: ApiResources, returnDefinition: SchemaReturnValue, paths: Paths, relative?: boolean, useTypeLinks?: boolean): string[];
export declare function generateExamplesSection(resources: ApiResources, examples: SchemaExample[] | undefined, headingPattern: "**" | "#####", language: string): string[];
export declare function generateAdditionalResourcesSection(resources: ApiResources, resourceLinks: SchemaResourceLink[] | undefined, headingPattern: "**" | "####"): string[];
export declare function fixUrl(description: string, paths: Paths, relative?: boolean): string;
/**
 * Interlaces two arrays and joins them into a string with spaces.
 * @param {string[]} array1 - The first array.
 * @param {string[]} array2 - The second array.
 * @param {number[]} [positions] - Optional positions for the second array elements.
 * @returns {string[]} - The interlaced array.
 */
export declare function interlaceArrays(array1: string[], array2: string[], positions?: number[]): string;
export declare function isSqlApiFunction(apiItem: SchemaApiItem): apiItem is SqlApiFunction;
