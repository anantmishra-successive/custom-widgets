import { QueryObject, ChartSubType } from '../../../utils';
import { WebBoxPlot, WebChart, WebChartDataItem, WebChartHistogramSeries, WebChartTemporalBinningUnits } from '@arcgis/charts-spec';
import { EsriColor } from '../types';
/**
 * Returns true if dataTransformationType changed
 *
 * @param oldSeries
 * @param newSeries
 */
export declare function hasTransformationTypeChanged(oldSeries: WebChartHistogramSeries[], newSeries: WebChartHistogramSeries[]): boolean;
/**
 * Returns true if a specific prop for Histogram requiring a data update has been changed
 *
 * @param oldSeries
 * @param newSeries
 */
export declare function hasBinCountChanged(oldSeries: WebChartHistogramSeries[], newSeries: WebChartHistogramSeries[]): boolean;
/**
 * When a chart is updated an existing series type can be changed (bar series => line series,
 * histogram series => pie series...). Some changes are allowed, others not.
 * This function defines which changes are allowed.
 *
 * @param oldConfig The previous config
 * @param newConfig The new config
 */
export declare function isSeriesTypeChangeAllowed(oldConfig?: WebChart, newConfig?: WebChart): boolean;
/**
 * Indicates whether the time interval information is complete (units and size are set).
 * @param unit The time interval unit
 * @param size The time interval size
 */
export declare function isTimeIntervalInfoComplete(unit?: WebChartTemporalBinningUnits, binCount?: number): boolean;
/**
 * Fetches the series color list.
 * The function support only bar, line and radar chart at the moment.
 * It the series have each a unique color, it will make a list of them, whether they come from the renderer
 * or the series config or the color ramp.
 *
 * @param props.chartConfig The chart's config
 * @param props.queryObject The query object (layer or feature layer view)
 * @param props.chartData The chart's data containing the renderer colors
 */
export declare function getSeriesColorList(props: {
    chartConfig: WebChart;
    queryObject: QueryObject;
    chartData: WebChartDataItem[];
}): EsriColor[];
/**
 * Indicates whether the chart is aggregated or not.
 *
 * @param chartSubType The chart sub type
 */
export declare function isAggregatedChart(chartSubType: ChartSubType): boolean;
/**
 * Indicates whether the chart is a by fields chart.
 *
 * @param chartConfig The chart config
 * @returns
 */
export declare function isByFieldsChart(chartConfig: WebChart): boolean;
/**
 * Returns the `showMean` property from the chart config and `false` if not found
 *
 * @param chartConfig The chart config
 */
export declare function getShowMean(chartConfig?: WebBoxPlot | WebChart): boolean;
/**
 * Returns the `showOutliers` property from the chart config and `undefined` if not found
 * @param chartConfig The chart config
 */
export declare function getShowOutliers(chartConfig?: WebBoxPlot | WebChart): boolean | undefined;
/**
 * Returns a common string used by the series screen reader.
 *
 * @returns The screen reader text for XY chart
 */
export declare function getXYChartScreenReaderText(): string;
