import { BoxPlotConfig, ChartConfig } from '../../../utils';
import { Color, WebChartBoxPlotSeries, WebChartDataFilters, WebChartLineChartSeries } from '@arcgis/charts-spec';
import { LayerInfo, ModelTypes, BoxPlotDataSortingKinds } from '../../interfaces/common';
import { ModelCommonStrings } from '../../t9n/common/interfaces';
/**
 * Gets the category field.
 */
export declare const getCategory: (config: BoxPlotConfig) => string;
/**
 * Gets the split-by field.
 */
export declare const getSplitByField: (config: BoxPlotConfig) => string;
/**
 * get the numeric fields from the config object
 * @param config - box plot config object
 */
export declare const getNumericFields: (config: BoxPlotConfig) => string[];
/**
 * Builds a new series array based on the provided props.
 * @param props.splitByField
 * @param props.numericFields
 * @param props.config
 * @param props.layerInfo
 */
export declare const buildNewSeries: (props: {
    splitByField: string;
    numericFields: string[];
    category: string;
    config: BoxPlotConfig;
    layerInfo: LayerInfo;
}) => Promise<void>;
/**
 * Gets whether the values are standardized.
 */
export declare const getStandardizeValues: (config: BoxPlotConfig) => boolean;
/**
 * Sets the category field by updating the config accordingly.
 */
export declare const setCategory: (newCategory: string, config: BoxPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * set the numeric fields in the config object
 * @param newNumericFields - new numeric fields
 * @param config - box plot config object
 * @param layerInfo - layer info
 */
export declare const setNumericFields: (newNumericFields: string[], config: BoxPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets the default series name.
 * @param props.series - The series to get the name for
 * @param props.splitByField - The split-by field
 * @param props.layerInfo - The layer info
 * @param props.commonStrings - The common strings
 */
export declare const getDefaultSeriesName: (props: {
    series: WebChartBoxPlotSeries | WebChartLineChartSeries;
    splitByField: string;
    layerInfo: LayerInfo;
    commonStrings: ModelCommonStrings;
}) => string;
/**
 * Sets the split-by field by updating the config accordingly.
 */
export declare const setSplitByField: (newSplitByField: string, config: BoxPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets whether the outliers are shown.
 * @param config
 */
export declare const getShowOutliers: (config: BoxPlotConfig) => boolean;
/**
 * Sets whether the outliers are shown.
 * @param newShowOutliers
 * @param config
 * @param layerInfo
 */
export declare const setShowOutliers: (newShowOutliers: boolean, config: BoxPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * Sets whether the values are standardized.
 */
export declare const setStandardizeValues: (newStandardizeValues: boolean, config: BoxPlotConfig, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets the sort order.
 */
export declare const getSortOrderKind: (config: BoxPlotConfig) => BoxPlotDataSortingKinds;
/**
 * Sets the sort order.
 */
export declare const setSortOrderKind: (newSortOrderKind: BoxPlotDataSortingKinds, config: ChartConfig<typeof ModelTypes.BoxPlot>, orderByList?: string[]) => void;
/**
 * Gets whether the mean lines are shown.
 * @param config
 */
export declare const getShowMeanLines: (config: BoxPlotConfig) => boolean;
/**
 * Sets whether the mean lines are shown. Rebuilds the series array.
 * @param newShowMeanLines Whether to show the mean lines
 * @param config The config to update
 * @param previousMeanLinesBoxColor The previous color of the boxes when mean lines were enabled
 */
export declare const setShowMeanLines: (newShowMeanLines: boolean | undefined, config: BoxPlotConfig, previousMeanLinesBoxColor?: Color) => Promise<{
    previousMeanLinesBoxColor: Color | undefined;
}>;
/**
 * Get the order by list from the config. The order by list is only used when the sort order kind is custom sort.
 * @param  {ChartConfig<typeof ModelTypes.BoxPlot>} config - The chart config.
 *
 * @returns string[] - The order by list.
 */
export declare const getOrderByList: (config: ChartConfig<typeof ModelTypes.BoxPlot>) => string[];
/**
 * Set the order by list in the config. The order by list is only used when the sort order kind is custom sort.
 * @param  {string[]} values - The order by list.
 * @param  {ChartConfig<typeof ModelTypes.BoxPlot>} config - The chart config.
 */
export declare const setOrderByList: (values: string[], config: ChartConfig<typeof ModelTypes.BoxPlot>) => void;
/**
 * Get the data filter from the config.
 * @param  {ChartConfig<typeof ModelTypes.BoxPlot>} config - The chart config.
 * @returns WebChartDataFilters | undefined - The data filter.
 */
export declare const getDataFilter: (config: ChartConfig<typeof ModelTypes.BoxPlot>) => WebChartDataFilters | undefined;
/**
 * Set the data filter in the config.
 * @param  {WebChartDataFilters | undefined} dataFilter - The data filter.
 * @param  {ChartConfig<typeof ModelTypes.BoxPlot>} config - The chart config.
 */
export declare const setDataFilter: (dataFilter: WebChartDataFilters | undefined, config: ChartConfig<typeof ModelTypes.BoxPlot>) => void;
/**
 * Get the custom sort values from the config.
 * @param  {ChartConfig<typeof ModelTypes.BoxPlot>} config - The chart config.
 * @param  {LayerInfo} layerInfo - The layer info.
 *
 * @returns string[] - The custom sort values.
 */
export declare const getCustomSortValues: (config: ChartConfig<typeof ModelTypes.BoxPlot>, layerInfo: LayerInfo) => Promise<string[]>;
