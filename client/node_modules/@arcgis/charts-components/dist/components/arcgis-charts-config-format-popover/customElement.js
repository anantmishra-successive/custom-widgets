import { c as i } from "../../chunks/runtime.js";
import { html as o } from "lit-html";
import { RESTSymbolType as r } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as a } from "../../chunks/popover-ui-utils.js";
import { u as l } from "../../chunks/useT9n.js";
import { createRef as n, ref as p } from "lit-html/directives/ref.js";
import { LitElement as c, createEvent as s, safeClassMap as m } from "@arcgis/lumina";
import { css as h } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const g = {
  jsAppFlyout: "js-app-flyout"
}, C = h``;
class f extends c {
  constructor() {
    super(...arguments), this._messages = l(), this.popoverElement = n(), this.placement = "leading", this.arcgisChartsConfigFormatPopoverColorChange = s(), this.arcgisChartsConfigFormatPopoverSymbolChange = s(), this.arcgisChartsConfigFormatPopoverTextChange = s(), this.arcgisChartsConfigPopoverClose = s();
  }
  static {
    this.properties = { messageOverrides: 0, selectedElement: 2, referenceElement: 2, placement: 3, open: 7 };
  }
  static {
    this.styles = C;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  updated() {
    a(this.popoverElement.value, this.open);
  }
  closePopover() {
    this.open = !1, this.arcgisChartsConfigPopoverClose.emit();
  }
  updateSymbolProperties(e) {
    this.selectedElement = e.target.lineStyle, this.arcgisChartsConfigFormatPopoverSymbolChange.emit(e.detail);
  }
  updateTextProperties(e) {
    this.selectedElement = e.target.fontStyle, this.arcgisChartsConfigFormatPopoverTextChange.emit(e.detail);
  }
  updateColorProperties(e) {
    this.selectedElement = e.detail, this.arcgisChartsConfigFormatPopoverColorChange.emit(e.detail);
  }
  render() {
    const e = this.selectedElement, t = this.selectedElement;
    return o`<div class=${m(g.jsAppFlyout)}><calcite-popover .referenceElement=${this.referenceElement ?? document.body} .placement=${this.placement} .open=${this.open} label @calcitePopoverClose=${this.closePopover} pointer-disabled ${p(this.popoverElement)}>${Array.isArray(e) ? o`<arcgis-charts-config-color-style .header=${this._messages.backgroundElement} enable-close .open=${this.open} .selectedColor=${e} @arcgisChartsConfigColorStyleClose=${this.closePopover} @arcgisChartsConfigColorStyleChange=${this.updateColorProperties}></arcgis-charts-config-color-style>` : null}${t?.type === r.SLS ? o`<arcgis-charts-config-line-style .header=${this._messages.lineStyle} .open=${this.open} enable-close .lineStyle=${t} @arcgisChartsConfigLineStyleClose=${this.closePopover} @arcgisChartsConfigLineStyleChange=${this.updateSymbolProperties}></arcgis-charts-config-line-style>` : null}${t?.type === r.TS ? o`<arcgis-charts-config-font-style .header=${this._messages.textStyle} .open=${this.open} enable-close .fontStyle=${t} @arcgisChartsConfigFontStyleClose=${this.closePopover} @arcgisChartsConfigFontStyleChange=${this.updateTextProperties}></arcgis-charts-config-font-style>` : null}</calcite-popover></div>`;
  }
}
i("arcgis-charts-config-format-popover", f);
export {
  f as ArcgisChartsConfigFormatPopover
};
