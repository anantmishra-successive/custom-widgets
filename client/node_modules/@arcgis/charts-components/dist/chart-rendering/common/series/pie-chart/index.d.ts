import { CommonStrings, PieSlicesSymbols } from '../../../../utils';
import { IField, ISimpleFillSymbol, WebChart, WebChartDataItem, WebChartPieChartSeries, WebChartPieChartSlice } from '@arcgis/charts-spec';
/**
 * Generates an id for a slice from a non aggregated slice.
 * it will generate `arcgis-charts-slice-id-<object id>` or `arcgis-charts-slice-id-<slice index>`
 *
 * @param props.dataContext The slice's data context to access the x value
 * @param props.dataIndex The slice's position on the chart
 * @param props.objectIdField The field used as an object Id by the layer (when applicable)
 */
export declare function generateNonAggregatedSliceId(props: {
    dataContext: WebChartDataItem;
    dataIndex: number;
    objectIdField?: string;
}): string;
/**
 * Sorts both the chart's data and the slices array for them to be in sync with the requested sort.
 * @param props.chartConfig The chart config.
 * @param props.chartData The chart data.
 * @param props.fieldList List of fields
 */
export declare function sortSlices(props: {
    chartConfig: WebChart;
    chartData: WebChartDataItem[];
    fieldList?: IField[];
}): void;
/**
 * Util function used to update the chart's data with the new slices labels.
 * It will perform the update only if the labels changed (through a comparison between the old and the new config),
 * and will also reapply the sort.
 * @param props.chart The pie chart
 * @param props.newChartConfig The most recent chart config
 * @param props.pieSlicesSymbols The computed slices config
 * @param props.fieldList List of fields
 */
export declare function savePieChartLabels(props: {
    data: WebChartDataItem[];
    newChartConfig: WebChart;
    pieSlicesSymbols?: PieSlicesSymbols;
    fieldList?: IField[];
}): void;
/**
 * Updates a slice label by updating its data context
 * @param props.dataContext The slice's data context
 * @param props.newLabel The slice's new label
 * @param props.x The series config x
 */
export declare function updateLabelInDataContext(props: {
    dataContext: WebChartDataItem;
    newLabel?: string;
    x: string;
}): void;
/**
 * Return the slice information from the series config based on sliceId from the slice's data context.
 *
 * @param slices The slices config
 * @param sliceId The slice id to match the
 */
export declare function retrievePieSliceInfoFromConfig(slices?: WebChartPieChartSlice[], sliceId?: string): WebChartPieChartSlice | undefined;
/**
 * Generates an id for the slice, based on the type of query.
 * For an aggregated pie chart by field it will be the field name
 * For an aggregated pie chart by category it will be the category name; if the category field is a subtype field, its id will be used for sliceId
 * For a non aggregated pie chart it will generate `arcgis-charts-slice-id-<object id>` or `arcgis-charts-slice-id-<slice index>`
 *
 * @param props.dataContext The slice's data context to access the x value
 * @param props.isNonAggregatedChart To know whether the chart is aggregated
 * @param props.x The x field
 * @param props.dataIndex The slice's position on the chart
 * @param props.objectIdField The field used as an object Id by the layer (when applicable)
 * @param props.isPieFromFields Boolean indicating whether the chart is a pie chart from fields
 */
export declare function generateSliceId(props: {
    dataContext: WebChartDataItem;
    isNonAggregatedChart: boolean;
    x: string;
    dataIndex: number;
    objectIdField?: string;
    isPieFromFields?: boolean;
}): string;
/**
 * Generates the slice label, by considering
 * - a custom label coming from the config (series.slices)
 * - the layer's fields' aliases (in Feature layer data source)
 * - the layer's subtype / domain
 *
 * Stores the original category / field name in a new property so we can still use it later on.
 * Directly modify the label in the provided data context.
 *
 * @param props.dataContext The data context related to the slice
 * @param props.sliceFromConfig The config for the slice
 * @param props.seriesConfig The pie series config
 * @param props.fieldList The layer's field list
 * @param props.isPieFromFields Whether the pie if from fields
 * @param props.isColorMatch Whether the color match is enabled
 * @param props.labelUpdateNeeded Whether the labels were updated
 * @param props.commonStrings The common strings containing the default slice grouping label
 */
export declare function computeSliceLabel(props: {
    dataContext: WebChartDataItem;
    sliceFromConfig?: WebChartPieChartSlice;
    isGroupOfSlices: boolean;
    seriesConfig: WebChartPieChartSeries;
    fieldList?: IField[];
    isPieFromFields: boolean;
    labelUpdateNeeded: boolean;
    colorMatch: boolean;
    commonStrings: CommonStrings;
}): string | undefined;
/**
 * Indicates whether an update is necessary on the pie chart slice group
 *
 * @param oldSeries
 * @param newSeries
 */
export declare function isPieChartGroupOfSlicesUpdateNeeded(oldSeries: WebChartPieChartSeries[], newSeries: WebChartPieChartSeries[]): boolean;
/**
 * Retrieves the grouped slices data (by updatePieChartGroupOfSlices()).
 * Uses the group of slices data context if provided, or look for it in the pie
 * chart's data.
 *
 * @param props.groupOfSlicesDataContext The group of slices data context
 * @param props.pieChart The pie chart
 */
export declare function getGroupedSlicesDataItem(props: {
    groupOfSlicesDataContext?: WebChartDataItem;
    chartData?: WebChartDataItem[];
}): WebChartDataItem[] | undefined;
/**
 * Returns the symbol associated to a slice.
 *
 * @param props.dataContext The slice's data context
 * @param props.seriesConfig The pie chart series config
 * @param props.pieSlicesSymbols The pre-computed slices symbol
 */
export declare function getSliceSymbol(props: {
    dataContext: WebChartDataItem;
    seriesConfig: WebChartPieChartSeries;
    pieSlicesSymbols?: PieSlicesSymbols;
}): ISimpleFillSymbol;
