/// <reference types="../../index.d.ts" />
import { Color, ISimpleLineSymbol, WebChartTextSymbol } from '@arcgis/charts-spec';
import { FontStyleChangePayload } from '../arcgis-charts-config-font-style/resource';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';

/** @private */
export declare class ArcgisChartsConfigFormatPopover extends LitElement {
    /** Overwrite localized strings for this component */
    messageOverrides?: typeof this._messages._overrides;
    /**
     * Selected text properties to show for font style.
     *
     * @category Public
     */
    selectedElement?: Color | ISimpleLineSymbol | WebChartTextSymbol;
    /**
     * Reference element to show the popover.
     *
     * @category Public
     */
    referenceElement?: HTMLElement;
    /**
     * Place the popover in the give placement.
     *
     * @category Public
     * @default "leading"
     */
    placement: HTMLCalcitePopoverElement["placement"];
    /**
     * boolean to open or close the popover.
     *
     * @category Public
     * @default false
     */
    open?: boolean;
    /**
     * Calls `reposition()` method on popover element.
     *
     * @category Public
     */
    reposition(): Promise<void>;
    /**
     * Event emitted when there is a change in text property.
     *
     * @category Public
     */
    readonly arcgisChartsConfigFormatPopoverColorChange: TargetedEvent<this, void>;
    /**
     * Event emitted when there is a change in symbol property.
     *
     * @category Public
     */
    readonly arcgisChartsConfigFormatPopoverSymbolChange: TargetedEvent<this, void>;
    /**
     * Event emitted when there is a change in text property.
     *
     * @category Public
     */
    readonly arcgisChartsConfigFormatPopoverTextChange: TargetedEvent<this, FontStyleChangePayload>;
    /**
     * Event emitted when the popover is closed.
     *
     * @category Public
     */
    readonly arcgisChartsConfigPopoverClose: TargetedEvent<this, void>;
    private _messages;
}
