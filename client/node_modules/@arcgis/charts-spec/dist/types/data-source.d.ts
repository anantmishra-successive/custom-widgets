import type FeatureLayer from "@arcgis/core/layers/FeatureLayer";
import type SubtypeSublayer from "@arcgis/core/layers/support/SubtypeSublayer";
import type { WebChartTemporalBinningUnits } from "./chart-object-literals";
import type { Color, IExtent, ISimpleLineSymbol, ISymbol, SimpleFillSymbolStyle, SimpleLineSymbolStyle, SimpleMarkerSymbolStyle } from "./rest-js-types";
/**
 * Supported layer type for ArcGIS charts.
 */
export type SupportedLayer = FeatureLayer | SubtypeSublayer;
/**
 * JSON representation of the color object
 */
export interface RGBObject {
    r: number;
    g: number;
    b: number;
    /**
     * @default 1.0
     */
    a?: number;
}
export type IRendererSymbol = ISymbol & {
    style?: SimpleFillSymbolStyle | SimpleLineSymbolStyle | SimpleMarkerSymbolStyle;
    color: Color;
    outline?: ISimpleLineSymbol;
    label?: string;
    uniqueValue?: string;
};
type RGBArray = [number, number, number];
export type WebChartDataItemColor = Color | RGBArray | RGBObject | string;
export type WebChartDataItemValue = Date | IExtent | IRendererSymbol | number[] | string[] | WebChartDataItem[] | WebChartDataItemColor | boolean | number | string | null | undefined;
/**
 * JSON representation of a typical data item
 */
export type WebChartDataItem = Record<string, WebChartDataItemValue>;
/**
 * JSON representation of the processed data for a Box Plot
 */
export interface WebChartBoxPlotDataItem {
    dataItems: WebChartDataItem[];
    outliers?: WebChartDataItem[];
    meanLines?: WebChartDataItem[];
}
/**
 * JSON representation of the processed data for a Scatter plot trend line
 */
export interface ScatterplotTrendLineData {
    r2?: number;
    trendLinePoints?: [WebChartDataItem, WebChartDataItem];
}
/**
 * JSON representation of the processed data for a Scatter plot
 */
export interface WebChartScatterplotDataItem extends ScatterplotTrendLineData {
    dataItems: WebChartDataItem[];
}
export interface TimeIntervalInfo {
    unit?: WebChartTemporalBinningUnits;
    size?: number;
}
/**
 * JSON representation of the generic data structure for bar, line bar-line, gauge and pie chart
 */
export interface WebChartGenericDataItem {
    dataItems: WebChartDataItem[];
    /**
     * Time interval information, only for line charts
     */
    timeIntervalInfo?: TimeIntervalInfo;
}
/**
 * JSON representation of a Histogram bin
 */
export interface WebChartBin {
    count: number;
    /**
     * Min value in the bin
     */
    minValue: number;
    /**
     * Max value in the bin
     */
    maxValue: number;
    /**
     * Symbol associated with the bin.
     */
    symbol?: WebChartDataItem;
    /**
     * Whether this is the last bin.
     */
    isLastBin?: boolean;
}
/**
 * JSON representation of the processed data for a Histogram
 */
export interface WebChartHistogramDataItem {
    mean: number;
    median: number;
    stddev: number;
    max: number;
    min: number;
    /**
     * Sum of the values of all the points
     */
    sum?: number;
    /**
     * Number of all the points/features in un-binned data (including only non-null entries)
     */
    count?: number;
    /**
     * Number of null entries in the pool of points
     */
    nulls?: number;
    bins: WebChartBin[];
}
export type WebChartDataTypes = WebChartBoxPlotDataItem | WebChartGenericDataItem | WebChartHistogramDataItem | WebChartScatterplotDataItem;
export {};
