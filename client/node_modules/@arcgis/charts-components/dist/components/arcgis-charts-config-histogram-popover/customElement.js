import { c as y } from "../../chunks/runtime.js";
import { keyed as c } from "lit-html/directives/keyed.js";
import { WebChartDataTransformations as o, RESTSymbolType as v } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { b1 as C, c9 as u, P as b } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as $ } from "../../chunks/popover-ui-utils.js";
import { H as s } from "../../chunks/interfaces2.js";
import { U as m, a as P } from "../../chunks/chart-ui-utils2.js";
import { u as S } from "../../chunks/useT9n.js";
import { html as l } from "lit";
import { createRef as h, ref as d } from "lit-html/directives/ref.js";
import { LitElement as w, createEvent as p, safeClassMap as t } from "@arcgis/lumina";
import { css as k } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const i = {
  symbolPropertyPopover: "symbol-property-popover",
  colorPicker: "color-picker",
  jsAppFlyout: "js-app-flyout",
  header: "header",
  pickListItemLabel: "pick-list-item-label",
  fieldSelectPanel: "field-select-panel",
  transformationPanel: "transformation-panel"
}, x = k`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.right{display:block;text-align:right}.inline{display:inline-flex;flex-wrap:wrap}.symbol-property-popover{min-width:300px}.symbol-property-popover .inline{align-items:center;margin-bottom:1rem;padding:0 1rem}.symbol-property-popover .inline calcite-action{margin-left:.2rem}.symbol-property-popover .inline input,.symbol-property-popover .inline select{width:4rem;margin-left:.5rem;height:24px}.symbol-property-popover .inline select{width:6rem}.symbol-property-popover .color calcite-icon{margin-left:.5rem}.symbol-property-popover .color .color-picker{padding:1rem}.header{margin:0;font-weight:bolder}.pick-list-item-label{font-size:small}.field-select-panel{max-height:60vh}.transformation-panel{width:calc(var(--calcite-panel-width-multiplier) * 12vw);max-width:calc(var(--calcite-panel-width-multiplier) * 300px);min-width:calc(var(--calcite-panel-width-multiplier) * 150px);min-width:calc(var(--calcite-panel-width-multiplier) * 170px)}`;
class T extends w {
  constructor() {
    super(...arguments), this._messages = S(), this.picklist = h(), this.popoverElement = h(), this.layerFieldsInfo = [], this.arcgisChartsConfigHistogramPopoverChange = p(), this.arcgisChartsConfigHistogramPopoverSymbolChange = p(), this.arcgisChartsConfigPopoverClose = p(), this.arcgisChartsConfigPopoverOpenChange = p();
  }
  static {
    this.properties = { messageOverrides: 0, layerFieldsInfo: 0, headingTitle: 3, selectedNumericField: 3, selectedTransformationType: 3, selectedOverlaySymbol: 2, selectedBinColor: 2, referenceElement: 2, contentKind: 3, placement: 1, open: 7 };
  }
  static {
    this.styles = x;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  willUpdate(e) {
    e.has("open") && this.openChange();
  }
  async updated() {
    setTimeout(async () => {
      await this.picklist.value?.setFocus();
    }, m.PopoverTimer), $(this.popoverElement.value, this.open), this.hasUpdated || setTimeout(() => {
      this.popoverElement.value?.reposition();
    }, m.PopoverTimer);
  }
  loaded() {
    this.openChange();
  }
  openChange() {
    this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
  }
  buildPickListItems(e) {
    const n = [];
    if (e === s.numericFields)
      for (let r = 0; r < this.layerFieldsInfo?.length; r += 1) {
        const a = this.layerFieldsInfo[r];
        C(a) && n.push(c(a.name, l`<calcite-list-item .label=${u(this.layerFieldsInfo, a.name)} .value=${a.name} .selected=${this.selectedNumericField === a.name}></calcite-list-item>`));
      }
    else {
      const r = [
        c(o.None, l`<calcite-list-item .label=${this._messages.none} .value=${o.None} .selected=${this.selectedTransformationType === o.None}></calcite-list-item>`),
        c(o.Log, l`<calcite-list-item .label=${this._messages.log} .value=${o.Log} .selected=${this.selectedTransformationType === o.Log}></calcite-list-item>`),
        c(o.Sqrt, l`<calcite-list-item .label=${this._messages.sqRt} .value=${o.Sqrt} .selected=${this.selectedTransformationType === o.Sqrt}></calcite-list-item>`)
      ];
      n.push(...r);
    }
    return n;
  }
  getPopoverClass() {
    return this.contentKind === s.fillSymbol || this.contentKind === s.lineSymbol ? i.symbolPropertyPopover : "";
  }
  closePopover() {
    (this.open || this.popoverElement.value?.open === !1) && (this.open = !1, this.arcgisChartsConfigPopoverClose.emit());
  }
  overlaySymbolChange(e) {
    this.arcgisChartsConfigHistogramPopoverSymbolChange.emit(e.detail);
  }
  fillColorChange(e) {
    const n = e.detail, [r, a, g] = n, f = b * 255;
    this.arcgisChartsConfigHistogramPopoverSymbolChange.emit({
      type: v.SFS,
      color: [r, a, g, f]
    });
  }
  onPickListChange(e) {
    e.target !== null && (this.arcgisChartsConfigHistogramPopoverChange.emit({
      contentKind: this.contentKind,
      value: e.target.selectedItems[0].value
    }), this.open = !1);
  }
  renderFillColor() {
    return l`<arcgis-charts-config-color-style class=${t(i.colorPicker)} .header=${this.headingTitle ?? this._messages.fillColor} enable-close .open=${this.open} .selectedColor=${this.selectedBinColor?.color} @arcgisChartsConfigColorStyleChange=${this.fillColorChange} @arcgisChartsConfigColorStyleClose=${this.closePopover}></arcgis-charts-config-color-style>`;
  }
  renderOverlayStyle() {
    return l`<arcgis-charts-config-line-style class=${t(i.colorPicker)} .open=${this.open} enable-close .header=${this.headingTitle ?? this._messages.lineStyle} .lineStyle=${this.selectedOverlaySymbol} @arcgisChartsConfigLineStyleClose=${this.closePopover} @arcgisChartsConfigLineStyleChange=${this.overlaySymbolChange}></arcgis-charts-config-line-style>`;
  }
  renderFieldSelect() {
    const e = this.buildPickListItems(s.numericFields);
    return l`<calcite-panel class=${t(i.fieldSelectPanel)} closable .closed=${!this.open} @calcitePanelClose=${this.closePopover}><div slot=header-content class=${t(i.header)}>${this._messages.numericalFieldHeader}</div><calcite-list label selection-mode=single selection-appearance=border class=${t(i.pickListItemLabel)} filter-enabled @calciteListChange=${this.onPickListChange} ${d(this.picklist)}>${e}</calcite-list></calcite-panel>`;
  }
  renderTransformationSelect() {
    const e = this.buildPickListItems(s.transformation);
    return l`<calcite-panel class=${t(i.transformationPanel)} closable .closed=${!this.open} @calcitePanelClose=${this.closePopover}><div slot=header-content class=${t(i.header)}>${this._messages.transformationHeader}</div><calcite-list label selection-mode=single selection-appearance=border class=${t(i.pickListItemLabel)} @calciteListChange=${this.onPickListChange}>${e}</calcite-list></calcite-panel>`;
  }
  render() {
    return l`<div class=${t({ [i.jsAppFlyout]: !0 })}><calcite-popover class=${t(this.getPopoverClass())} .referenceElement=${this.referenceElement ?? document.body} .placement=${this.placement} @calcitePopoverClose=${this.closePopover} .open=${this.open} .offsetDistance=${P(this.placement)} label ${d(this.popoverElement)}>${this.renderContentType()}</calcite-popover></div>`;
  }
  renderContentType() {
    switch (this.contentKind) {
      case s.fillSymbol:
        return this.renderFillColor();
      case s.lineSymbol:
        return this.renderOverlayStyle();
      case s.numericFields:
        return this.renderFieldSelect();
      case s.transformation:
        return this.renderTransformationSelect();
      default:
        return;
    }
  }
}
y("arcgis-charts-config-histogram-popover", T);
export {
  T as ArcgisChartsConfigHistogramPopover
};
