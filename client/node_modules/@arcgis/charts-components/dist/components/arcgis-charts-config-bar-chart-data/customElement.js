import { c as I } from "../../chunks/runtime.js";
import { keyed as b } from "lit-html/directives/keyed.js";
import { WebChartStatisticType as c, defaultBarLineFromFieldsName as C, WebChartTypes as g } from "@arcgis/charts-spec";
import { isEqual as f } from "lodash-es";
import "d3-array";
import { b0 as v, aL as x, c9 as p, ca as B, k as y, cs as S } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { c as P, r as L, P as O } from "../../chunks/popover-ui-utils.js";
import { S as n } from "../../chunks/common.js";
import { repeat as w } from "lit-html/directives/repeat.js";
import { B as r, e as u } from "../../chunks/interfaces2.js";
import { d as A, s as D } from "../../chunks/store.js";
import { U as k } from "../../chunks/chart-ui-utils2.js";
import { u as E } from "../../chunks/useT9n.js";
import { html as l, nothing as N } from "lit";
import { createRef as h, ref as m } from "lit-html/directives/ref.js";
import { LitElement as T, createEvent as F, safeClassMap as o } from "@arcgis/lumina";
import { css as _ } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const a = {
  label: "label",
  fieldList: "field-list",
  fab: "fab",
  disabledLabel: "disabled-label",
  list: "list",
  customSortButtons: "custom-sort-buttons",
  dimText: "dim-text"
}, V = _`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.custom-sort-buttons{display:flex;justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}`;
class U extends T {
  constructor() {
    super(...arguments), this._messages = E(), this.barChartPopover = null, this.sortOrderElement = h(), this.aggregationElement = h(), this.categoryElement = h(), this.numericFieldsElement = h(), this.splitByFieldElement = h(), this.originalCustomSortLabels = [], this.isCustomSortDisabled = !1, this.onBarChartDataChange = async (e) => {
      try {
        if (e.detail !== null && e.detail?.value !== void 0) {
          const { contentKind: t } = e.detail, i = [...e.detail.value];
          switch (A(D), t) {
            case r.aggregation:
              await this.model.setAggregationType(i[0] !== c.NoAggregation ? i[0] : c.NoAggregation);
              break;
            case r.category: {
              const s = i[0]?.trim() || "";
              if (await this.model.setXAxisField(s), this.model.getSortOrder() === n.customSort) {
                const d = await this.updateCustomSortProps();
                this.model.setOrderByList(d), this.sortOrderResetCounter += 1;
              }
              break;
            }
            case r.numericFields:
              if (await this.model.setNumericFields(i), (this.model.getNumericFields() ?? []).length > 0 && this.model.getAggregationType() === c.Count && this.model.getNumericFields()[0] !== v(this.layerFieldsInfo) && await this.model.setAggregationType(c.Sum), this.model.getSortOrder() === n.customSort) {
                const s = await this.updateCustomSortProps();
                this.model.setOrderByList(s), this.sortOrderResetCounter += 1;
              }
              break;
            case r.splitByField: {
              const s = i[0]?.trim() || "";
              await this.model.setSplitByField(s), this.model.setColorMatch(!0);
              break;
            }
            case r.sortOrder: {
              const s = i[0];
              if (s === n.customSort) {
                const d = await this.updateCustomSortProps();
                this.model.setSortOrder(s, d);
              } else
                this.model.setSortOrder(s);
              this.sortOrderResetCounter += 1;
              break;
            }
            default:
              break;
          }
        }
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
      this.removeBarChartDataPopover(), this.requestUpdate();
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.popoverClose = (e) => {
      this.barChartPopover === e?.target && this.removeBarChartDataPopover();
    }, this.selectedCustomSortItemId = "", this.sortOrderResetCounter = 0, this.layerFieldsInfo = [], this.arcgisChartsConfigBarChartDataNumericFieldValidate = F(), this.arcgisChartsConfigDataChangeError = F();
  }
  static {
    this.properties = { selectedCustomSortItemId: 16, aggregationLabel: 16, disableSplitBy: 16, sortOrderResetCounter: 16, messageOverrides: 0, model: 0, layerFieldsInfo: 0, open: 7 };
  }
  static {
    this.styles = V;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange(), this.currentDataFilter = this.model.getDataFilter(), this.updateCustomSortProps();
  }
  async willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), this.aggregationLabel = await x(this.model.getAggregationType()), f(this.model.getDataFilter(), this.currentDataFilter) || (this.model.getSortOrder() === n.customSort && await this.updateCustomSortProps(), this.currentDataFilter = this.model.getDataFilter()), this.disableSplitBy = this.model.getNumericFields().length > 1 || this.model.getXAxisField() === "" || this.model.getXAxisField() === C;
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeBarChartDataPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  onCalciteListOrderChange(e) {
    if (e.detail !== null && e.detail !== void 0) {
      const { newIndex: t, oldIndex: i } = e.detail;
      this.model.moveCustomSortValuesInOrderByList(i, t);
    }
  }
  onCustomSortItemSelected(e) {
    const { id: t } = e.target;
    this.selectedCustomSortItemId = this.selectedCustomSortItemId === t ? "" : t;
  }
  onCustomSortItemMoved(e) {
    const { id: t } = e.target;
    let i = this.model.getOrderByList().length;
    const s = this.model.getOrderByList().indexOf(this.selectedCustomSortItemId);
    t === u.Up ? i = s - 1 : t === u.Down && (i = s + 1), s >= 0 && i >= 0 && i < this.model.getOrderByList().length && (this.model.moveCustomSortValuesInOrderByList(s, i), this.sortOrderResetCounter += 1);
  }
  buildNumericFieldItem(e) {
    return b(e, l`<calcite-list-item .label=${p(this.layerFieldsInfo, e)} .value=${e} closable @calciteListItemClose=${this.onRemoveNumericField}></calcite-list-item>`);
  }
  buildCustomSortListItems() {
    return w(this.model.getOrderByList(), (t) => t, (t) => {
      const i = B(this.layerFieldsInfo, t);
      return l`<calcite-list-item id=${t ?? N} .label=${t} .description=${i} .value=${t} .selected=${this.selectedCustomSortItemId === t} @calciteListItemSelect=${this.onCustomSortItemSelected}><calcite-icon slot=content-end></calcite-icon></calcite-list-item>`;
    });
  }
  buildCustomSortList() {
    return b(this.sortOrderResetCounter, l`<calcite-list label class=${o(a.list)} drag-enabled selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildCustomSortListItems()}</calcite-list>`);
  }
  onAggregationSelect() {
    this.contentKind = r.aggregation, this.setupPopover();
  }
  onSortOrderSelect() {
    this.contentKind = r.sortOrder, this.setupPopover();
  }
  onCategorySelect() {
    this.contentKind = r.category, this.setupPopover();
  }
  onSplitBySelect() {
    this.splitByFieldElement.value && !this.splitByFieldElement.value.disabled && (this.contentKind = r.splitByField, this.setupPopover());
  }
  onAddNumericFields() {
    this.contentKind = r.numericFields, this.setupPopover();
  }
  async onRemoveNumericField(e) {
    const t = e.target.value;
    if (await this.model.setNumericFields(this.model.getNumericFields().filter((i) => i !== t)), this.model.getSortOrder() === n.customSort) {
      const i = await this.updateCustomSortProps();
      this.model.setOrderByList(i), this.sortOrderResetCounter += 1;
    }
  }
  getCorrectedSplitByValue() {
    return this.model.getSplitByField() === "" || (this.model.getNumericFields() ?? []).length > 1 ? "" : p(this.layerFieldsInfo, this.model.getSplitByField());
  }
  getCorrectedCategoryValue() {
    return this.model.getXAxisField() === C || this.model.getXAxisField().trim() === "" ? "" : p(this.layerFieldsInfo, this.model.getXAxisField());
  }
  onShowDataLabelsChange(e) {
    this.model.setDataLabelsVisibility(e.target.checked);
  }
  async updateCustomSortProps() {
    const e = await this.model.getCustomSortValues();
    this.originalCustomSortLabels = [...e];
    const t = e.length > k.customSortLimit;
    return t && (this.sortOrderElement.value && (this.sortOrderElement.value.label = this._messages.xAxisAsc), this.model.setSortOrder(n.xAxisAsc)), this.isCustomSortDisabled = t, e;
  }
  setupPopover() {
    this.removeBarChartDataPopover();
    const e = {
      layerFieldsInfo: this.layerFieldsInfo,
      onBarChartDataChange: this.onBarChartDataChange,
      popoverClose: this.popoverClose
    };
    if (this.barChartPopover = P(O.BarChartDataPopover, e), this.barChartPopover !== null) {
      switch (this.contentKind) {
        case r.aggregation:
          this.barChartPopover.referenceElement = this.aggregationElement.value, this.barChartPopover.headingTitle = this._messages.aggregationHeader, this.barChartPopover.isNoAggregationDisabled = y(this.model.getConfig().series ?? []) === S.BarAndLineFromFields, this.barChartPopover.selectedContent = this.model.getAggregationType();
          break;
        case r.category:
          this.barChartPopover.referenceElement = this.categoryElement.value, this.barChartPopover.headingTitle = this._messages.categoryHeader, this.barChartPopover.selectedContent = this.model.getXAxisField();
          break;
        case r.numericFields:
          this.barChartPopover.referenceElement = this.numericFieldsElement.value, this.barChartPopover.headingTitle = this._messages.numericFieldsHeader, this.barChartPopover.selectedContent = this.model.getNumericFields();
          break;
        case r.splitByField:
          this.barChartPopover.referenceElement = this.splitByFieldElement.value, this.barChartPopover.headingTitle = this._messages.splitByFieldHeader, this.barChartPopover.selectedContent = this.model.getSplitByField();
          break;
        case r.sortOrder:
          this.barChartPopover.referenceElement = this.sortOrderElement.value, this.barChartPopover.headingTitle = this._messages.sortOrderHeader, this.barChartPopover.selectedContent = this.model.getSortOrder(), this.barChartPopover.isCustomSortDisabled = this.isCustomSortDisabled;
          break;
      }
      this.barChartPopover.contentKind = this.contentKind, this.barChartPopover.open = !0, this.addPopover();
    }
  }
  addPopover() {
    !document.body.contains(this.barChartPopover) && this.barChartPopover !== null && document.body.appendChild(this.barChartPopover);
  }
  removeBarChartDataPopover() {
    this.barChartPopover !== null && (this.barChartPopover.open = !1, this.barChartPopover = L(this.barChartPopover));
  }
  resetToOriginalCustomSortLabels() {
    this.selectedCustomSortItemId = "", this.model.setOrderByList([...this.originalCustomSortLabels]), this.sortOrderResetCounter += 1;
  }
  renderSorting() {
    return l`<arcgis-charts-config-field-select .disabled=${this.model.getXAxisValueFormat()?.type === g.DateAxisFormat} .label=${this.model.getXAxisValueFormat()?.type === g.DateAxisFormat ? this._messages.xAxisAsc : this._messages[this.model.getSortOrder()]} @click=${this.onSortOrderSelect} ${m(this.sortOrderElement)}></arcgis-charts-config-field-select>`;
  }
  renderAggregation() {
    return l`<arcgis-charts-config-field-select .label=${this.model.getAggregationType() === c.NoAggregation ? this._messages.noAggregation : this.aggregationLabel} @click=${this.onAggregationSelect} ${m(this.aggregationElement)}></arcgis-charts-config-field-select>`;
  }
  renderCategory() {
    const e = this.getCorrectedCategoryValue();
    return l`<arcgis-charts-config-field-select .label=${e} @click=${this.onCategorySelect} ${m(this.categoryElement)}></arcgis-charts-config-field-select>`;
  }
  renderSplitBy() {
    const e = this.getCorrectedSplitByValue();
    return l`<arcgis-charts-config-field-select .label=${e} .disabled=${this.disableSplitBy} @click=${this.onSplitBySelect} ${m(this.splitByFieldElement)}></arcgis-charts-config-field-select>`;
  }
  renderNumericFields(e) {
    const t = v(this.layerFieldsInfo), i = [];
    for (const s of e)
      s !== t && i.push(this.buildNumericFieldItem(s));
    return l`<calcite-list label class=${o(a.fieldList)} ${m(this.numericFieldsElement)}>${i}</calcite-list>`;
  }
  renderCustomSortUI() {
    const e = this.model.getSortOrder(), t = this.model.getXAxisValueFormat()?.type, i = this.model.getOrderByList().indexOf(this.selectedCustomSortItemId);
    return t === g.CategoryAxisFormat && e === n.customSort && !this.isCustomSortDisabled ? l`<calcite-label class=${o(a.label)}><div class=${o(a.customSortButtons)}><div><calcite-button appearance=transparent .disabled=${i === 0 || i === -1 || this.selectedCustomSortItemId.trim() === ""} icon-start=arrow-bold-up id=${u.Up} kind=neutral scale=s @click=${this.onCustomSortItemMoved}></calcite-button><calcite-button appearance=transparent .disabled=${i === -1 || i === this.model.getOrderByList().length - 1 || this.selectedCustomSortItemId.trim() === ""} icon-start=arrow-bold-down id=${u.Down} kind=neutral scale=s @click=${this.onCustomSortItemMoved}></calcite-button></div><calcite-button @click=${this.resetToOriginalCustomSortLabels} .disabled=${f(this.model.getOrderByList(), this.originalCustomSortLabels)} appearance=transparent icon-end=reset>${this._messages.reset}</calcite-button></div>${y(this.model.getConfig().series ?? []) === S.BarAndLineFromFields ? this._messages.values : this._messages.category}${this.buildCustomSortList()}</calcite-label>` : null;
  }
  render() {
    const e = this.renderAggregation(), t = this.renderCategory(), i = this.renderSplitBy(), s = this.renderSorting(), d = this.renderNumericFields([...this.model.getNumericFields() ?? []]), $ = this.renderCustomSortUI();
    return l`<div><calcite-label class=${o(a.label)}>${this._messages.category}${t}</calcite-label><calcite-label class=${o(a.label)}>${this._messages.aggregation}${e}</calcite-label><calcite-label class=${o(a.label)}>${this._messages.numericFields}${d}</calcite-label><div class=${o(a.fab)}><calcite-fab appearance=outline-fill kind=neutral scale=m .label=${this._messages.selectNumericFields} text-enabled .text=${this._messages.selectNumericFields} icon=plus @click=${this.onAddNumericFields}></calcite-fab></div><calcite-label class=${o(a.label)}><span class=${o(this.disableSplitBy ? a.dimText : "")}>${this._messages.splitBy}</span>${i}</calcite-label><calcite-label class=${o(a.label)} layout=inline-space-between>${this._messages.showDataLabels}<calcite-switch .checked=${this.model.getDataLabelsVisibility()} @calciteSwitchChange=${this.onShowDataLabelsChange}></calcite-switch></calcite-label><calcite-label class=${o(this.model.getXAxisValueFormat()?.type === g.DateAxisFormat ? a.disabledLabel : a.label)}>${this._messages.sortOrder}${s}</calcite-label>${$}</div>`;
  }
}
I("arcgis-charts-config-bar-chart-data", U);
export {
  U as ArcgisChartsConfigBarChartData
};
