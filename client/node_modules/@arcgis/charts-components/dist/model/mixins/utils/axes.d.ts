import { ChartConfig } from '../../../utils';
import { ISimpleLineSymbol, WebChartAxisScrollBar, WebChartTextSymbol } from '@arcgis/charts-spec';
/**
 * Gets the x-axis title symbol from the chart config.
 * @param config The chart config object
 */
export declare const getXAxisTitleSymbol: (config: ChartConfig) => WebChartTextSymbol | undefined;
/**
 * Sets the x-axis title symbol in the chart config.
 * @param config The chart config object
 * @param symbol The symbol to set for x-axis title
 */
export declare const setXAxisTitleSymbol: (symbol: WebChartTextSymbol | undefined, config: ChartConfig) => void;
/**
 * Gets the y-axis title symbol from the chart config.
 * @param config The chart config object
 */
export declare const getYAxisTitleSymbol: (config: ChartConfig) => WebChartTextSymbol | undefined;
/**
 * Sets the y-axis title symbol in the chart config.
 * @param config The chart config object
 * @param symbol The symbol to set for the y-axis title
 */
export declare const setYAxisTitleSymbol: (symbol: WebChartTextSymbol | undefined, config: ChartConfig) => void;
/**
 * Gets the axis labels text symbol from the chart config.
 * @param config The chart config object
 */
export declare const getAxisLabelsSymbol: (config: ChartConfig) => WebChartTextSymbol | undefined;
/**
 * Sets the axis labels text symbol in the chart config.
 * @param config The chart config object
 * @param symbol The symbol to set for the axis labels
 */
export declare const setAxisLabelsSymbol: (symbol: WebChartTextSymbol | undefined, config: ChartConfig) => void;
/**
 * Gets the axis lines symbol from the chart config.
 * @param config The chart config object
 */
export declare const getAxisLinesSymbol: (config: ChartConfig) => ISimpleLineSymbol | undefined;
/**
 * Sets the axis lines symbol in the chart config.
 * @param config The chart config object
 * @param symbol The symbol to set for the axis lines
 */
export declare const setAxisLinesSymbol: (symbol: ISimpleLineSymbol | undefined, config: ChartConfig) => void;
/**
 * Gets the grid lines symbol from the chart config.
 * @param config The chart config object
 */
export declare const getGridLinesSymbol: (config: ChartConfig) => ISimpleLineSymbol | undefined;
/**
 * Sets the grid lines symbol in the chart config.
 * @param config The chart config object
 * @param symbol The symbol to set for the grid lines
 */
export declare const setGridLinesSymbol: (symbol: ISimpleLineSymbol | undefined, config: ChartConfig) => void;
/**
 * Gets the title text of the axis
 * @param config The chart config object
 * @param axisIndex The index of the axis
 */
export declare const getAxisTitleText: (axisIndex: number, config: ChartConfig) => string;
/**
 * Sets the title text of the axis
 * @param title The title text
 * @param axisIndex The index of the axis
 * @param config The chart config object
 */
export declare const setAxisTitleText: (title: string, axisIndex: number, config: ChartConfig) => void;
/**
 * Gets the visibility of the axis title
 * @param axisIndex The index of the axis
 * @param config The chart config object
 */
export declare const getAxisTitleVisibility: (axisIndex: number, config: ChartConfig) => boolean;
/**
 * Sets the visibility of the axis title
 * @param visibility Whether or not to show the axis title
 * @param axisIndex The index of the axis
 * @param config The chart config object
 */
export declare const setAxisTitleVisibility: (visibility: boolean, axisIndex: number, config: ChartConfig) => void;
/**
 * Gets whether the X logarithmic scale is enabled
 * @param config The chart config object
 */
export declare const getXLogarithmic: (config: ChartConfig) => boolean;
/**
 * Sets whether the X logarithmic scale is enabled
 * @param config The chart config object
 * @param enableXLogarithmic The value to set
 */
export declare const setXLogarithmic: (config: ChartConfig, enableXLogarithmic: boolean) => Promise<void>;
/**
 * Gets whether the Y logarithmic scale is enabled
 * @param config The chart config object
 */
export declare const getYLogarithmic: (config: ChartConfig) => boolean;
/**
 * Sets whether the Y logarithmic scale is enabled
 * @param config The config object
 * @param enableYLogarithmic The value to set
 */
export declare const setYLogarithmic: (config: ChartConfig, enableYLogarithmic: boolean) => Promise<void>;
/**
 * Gets the x-axis scrollbar configuration.
 * @param config The chart config object
 */
export declare const getXAxisScrollbar: (config: ChartConfig) => WebChartAxisScrollBar | undefined;
/**
 * Sets the x-axis scrollbar configuration.
 * @param config The chart config object
 * @param scrollbar The scrollbar configuration to set for the x-axis
 */
export declare const setXAxisScrollbar: (config: ChartConfig, scrollbar: WebChartAxisScrollBar | undefined) => void;
/**
 * Gets the y-axis scrollbar configuration.
 * @param config The chart config object
 */
export declare const getYAxisScrollbar: (config: ChartConfig) => WebChartAxisScrollBar | undefined;
/**
 * Sets the y-axis scrollbar configuration.
 * @param config The chart config object
 * @param scrollbar The scrollbar configuration to set for the y-axis
 */
export declare const setYAxisScrollbar: (config: ChartConfig, scrollbar: WebChartAxisScrollBar | undefined) => void;
/**
 * Gets the display of zero line setting for the axis from the chart config.
 * @param config The chart configuration object
 * @param axisIndex The index of the axis
 * @returns {boolean}
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 * c. If the displayZeroLine is not set on the axis, the default value of `false` will be returned.
 */
export declare const getDisplayZeroLine: (config: ChartConfig, axisIndex: number) => boolean;
/**
 * Sets the display of zero line for the axis in the chart config.
 * @param config The chart configuration object
 * @param displayZeroLine The setting for the display of zero line in the axis
 * @param axisIndex The index of the axis
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const setDisplayZeroLine: (config: ChartConfig, displayZeroLine: boolean, axisIndex: number) => void;
/**
 * Gets the display cursor tooltips setting for the specified axis.
 * @param config The chart configuration.
 * @param axisIndex The index of the axis to get the setting for.
 * @returns {boolean}
 * @remarks
 * a. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 * b. If the displayCursorTooltip is not set on the axis, the default value of `false` will be returned.
 */
export declare const getDisplayCursorTooltip: (config: ChartConfig, axisIndex: number) => boolean;
/**
 * Sets the display cursor tooltips for the specified axis.
 * @param config The chart configuration.
 * @param displayCursorTooltip - Indicator whether to display cursor tooltip.
 * @param axisIndex - The index of the axis to set the setting for.
 * @remarks
 * a. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const setDisplayCursorTooltip: (config: ChartConfig, displayCursorTooltip: boolean, axisIndex: number) => void;
/**
 * Gets the buffer setting for the specified axis.
 * @param config The chart configuration object
 * @param axisIndex The index of the axis
 * @returns {boolean}
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 * c. If the `buffer` is not set on the axis, the default value of `false` will be returned.
 */
export declare const getBuffer: (config: ChartConfig, axisIndex: number) => boolean;
/**
 * Sets the buffer for the specified axis.
 * @param config - The chart configuration.
 * @param buffer The setting for the buffer
 * @param axisIndex The index of the axis
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const setBuffer: (config: ChartConfig, buffer: boolean, axisIndex: number) => void;
/**
 * Gets the tick spacing setting for the specified axis.
 * @param config The chart configuration object
 * @param axisIndex The index of the axis
 * @returns {number}
 * @remarks
 * a. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const getTickSpacing: (config: ChartConfig, axisIndex: number) => number | undefined;
/**
 * Sets the tick spacing for the specified axis.
 * @param config The chart configuration object
 * @param tickSpacing The value to set for the tick spacing
 * @param axisIndex The index of the axis
 * @remarks
 * a. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const setTickSpacing: (config: ChartConfig, tickSpacing: number, axisIndex: number) => void;
/**
 * Gets the integer only values setting for the specified axis.
 * @param config The chart configuration object
 * @param axisIndex The index of the axis
 * @returns {boolean}
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 * c. If the `integerOnlyValues` is not set on the axis, the default value of `false` will be returned.
 */
export declare const getIntegerOnlyValues: (config: ChartConfig, axisIndex: number) => boolean;
/**
 * Sets the integer only values setting for the specified axis.
 * @param config The chart configuration object
 * @param integerOnlyValues The boolean value to set for the integer only values setting
 * @param axisIndex The index of the axis
 * @remarks
 * a. This setting is only applicable to the axis of type ValueAxis.
 * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
 */
export declare const setIntegerOnlyValues: (config: ChartConfig, integerOnlyValues: boolean, axisIndex: number) => void;
