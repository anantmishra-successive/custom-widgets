/// <reference types="../index.d.ts" />
import type { ArcgisChart } from "../components/arcgis-chart";
import type { ArcgisChartsActionBar } from "../components/arcgis-charts-action-bar";
import type { HTMLProps } from 'react';
import type { EventHandler } from "@arcgis/lumina"; 

interface ReactArcgisChart extends Partial<Pick<ArcgisChart, 'actionMode' | 'autoDisposeChart' | 'chartLimits' | 'chartWillRender' | 'componentVersion' | 'cursorRange' | 'dataLabelFormatter' | 'disableTogglingLegendItems' | 'enableConfiguration' | 'enableResponsiveFeatures' | 'errorPolicy' | 'featureIndex' | 'filterByExtent' | 'filterBySelection' | 'gaugeInnerLabelFormatter' | 'guideTooltipFormatter' | 'hideEmptySeries' | 'hideLicenseWatermark' | 'hideLoaderAnimation' | 'ignoreSmoothRenderingLimit' | 'ignoreViewExtent' | 'layer' | 'layerFieldsChangePolicy' | 'layerFilterChangePolicy' | 'layerRendererChangePolicy' | 'legendPosition' | 'legendValueLabelFormatter' | 'legendVisibility' | 'loaderColors' | 'messageOptions' | 'model' | 'placeholder' | 'queueChartCreation' | 'replaceNoValueCategoryWithZero' | 'returnFeaturesExtent' | 'returnSelectionIndexes' | 'returnSelectionOIDs' | 'rotation' | 'runtimeDataFilters' | 'secondaryYAxisLabelFormatter' | 'selectionData' | 'selectionTheme' | 'setTimeBinningInfoWhenNotProvided' | 'syncSelection' | 'syncSelectionsBetweenChartAndLayerViewPolicy' | 'timeZone' | 'tooltipFormatter' | 'updateSplitBySeries' | 'useAnimatedCharts' | 'usePopupTemplateFieldsInfo' | 'view' | 'viewTimeExtentChangePolicy' | 'xAxisLabelFormatter' | 'yAxisLabelFormatter'>>, ArcgisChartSetterTypes, HTMLProps<HTMLArcgisChartElement> {
  onarcgisAxesMinMaxChange?: EventHandler<HTMLArcgisChartElement["arcgisAxesMinMaxChange"]>;
  onarcgisBadDataWarningRaise?: EventHandler<HTMLArcgisChartElement["arcgisBadDataWarningRaise"]>;
  onarcgisConfigChange?: EventHandler<HTMLArcgisChartElement["arcgisConfigChange"]>;
  onarcgisDataFetchComplete?: EventHandler<HTMLArcgisChartElement["arcgisDataFetchComplete"]>;
  onarcgisDataProcessComplete?: EventHandler<HTMLArcgisChartElement["arcgisDataProcessComplete"]>;
  onarcgisDataProcessError?: EventHandler<HTMLArcgisChartElement["arcgisDataProcessError"]>;
  onarcgisLegendItemVisibilityChange?: EventHandler<HTMLArcgisChartElement["arcgisLegendItemVisibilityChange"]>;
  onarcgisNoRenderPropChange?: EventHandler<HTMLArcgisChartElement["arcgisNoRenderPropChange"]>;
  onarcgisRuntimeError?: EventHandler<HTMLArcgisChartElement["arcgisRuntimeError"]>;
  onarcgisSelectionComplete?: EventHandler<HTMLArcgisChartElement["arcgisSelectionComplete"]>;
  onarcgisSeriesColorChange?: EventHandler<HTMLArcgisChartElement["arcgisSeriesColorChange"]>;
  onarcgisSeriesOrder?: EventHandler<HTMLArcgisChartElement["arcgisSeriesOrder"]>;
  onarcgisUpdateComplete?: EventHandler<HTMLArcgisChartElement["arcgisUpdateComplete"]>;
}
type ArcgisChartSetterTypes = ArcgisChart["_setterTypes"]

interface ReactArcgisChartsActionBar extends Partial<Pick<ArcgisChartsActionBar, 'actionBarSelectionMode' | 'chartElement' | 'chartType' | 'clearSelectionState' | 'clearSelectionTitle' | 'clearSelectionToggle' | 'disableCSVExportForChartTypes' | 'disabledExportAction' | 'editChartState' | 'editChartTitle' | 'editChartToggle' | 'expanded' | 'exportAsCSVState' | 'exportAsCSVTitle' | 'exportAsImageState' | 'exportAsImageTitle' | 'filterByExtentState' | 'filterByExtentTitle' | 'filterByExtentToggle' | 'filterBySelectionState' | 'filterBySelectionTitle' | 'filterBySelectionToggle' | 'forceDisableActions' | 'fullExtentState' | 'fullExtentTitle' | 'fullExtentToggle' | 'hiddenActions' | 'legendState' | 'legendTitle' | 'legendToggle' | 'messageOverrides' | 'rotateChartState' | 'rotateChartTitle' | 'rotateChartToggle' | 'selectionState' | 'selectionTitle' | 'selectionToggle' | 'switchSelectionState' | 'switchSelectionTitle' | 'switchSelectionToggle' | 'zoomState' | 'zoomTitle' | 'zoomToggle'>>, HTMLProps<HTMLArcgisChartsActionBarElement> {
  onarcgisActionBarToggle?: EventHandler<HTMLArcgisChartsActionBarElement["arcgisActionBarToggle"]>;
  onarcgisDefaultActionSelect?: EventHandler<HTMLArcgisChartsActionBarElement["arcgisDefaultActionSelect"]>;
}

declare module "react" {
  namespace JSX {
    interface IntrinsicElements {
      "arcgis-chart": ReactArcgisChart;
      "arcgis-charts-action-bar": ReactArcgisChartsActionBar;
    }
  }
}
declare module "react/jsx-runtime" {
  namespace JSX {
    interface IntrinsicElements {
      "arcgis-chart": ReactArcgisChart;
      "arcgis-charts-action-bar": ReactArcgisChartsActionBar;
    }
  }
}
declare module "react/jsx-dev-runtime" {
  namespace JSX {
    interface IntrinsicElements {
      "arcgis-chart": ReactArcgisChart;
      "arcgis-charts-action-bar": ReactArcgisChartsActionBar;
    }
  }
}