import { ChartConfig } from '../../../utils';
import { ModelTypes } from '../../interfaces/common';
/**
 * Specify how negative values are treated in stacked series.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * NOTE: If true, negative values will be stacked on the base line.
 * If false, negative values will be stacked in relation to their previous values in the stack.
 *
 * @default true
 * @returns {boolean}
 */
export declare const isNegativeValuesStackedToBaseline: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => boolean;
/**
 * Specify how negative values are treated in stacked series.
 * @param {boolean} props.stackedToBaseline - `true` if negative values should be stacked on the base line, `false` otherwise.
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 *
 * NOTE: If true, negative values will be stacked on the base line.
 * If false, negative values will be stacked in relation to their previous values in the stack.
 *
 */
export declare const setNegativeValuesStackedToBaseline: (props: {
    stackNegativeValuesToBaseline: boolean;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
