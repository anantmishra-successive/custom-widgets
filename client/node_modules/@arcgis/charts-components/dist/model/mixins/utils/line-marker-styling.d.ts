import { ChartConfig } from '../../../utils';
import { Color, RESTSimpleLineSymbolStyle, RESTSimpleMarkerSymbolStyle } from '@arcgis/charts-spec';
import { ModelTypes } from '../../interfaces/common';
export declare const getLineStyle: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => RESTSimpleLineSymbolStyle | undefined;
export declare const setLineStyle: (newStyle: RESTSimpleLineSymbolStyle | undefined, seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => void;
export declare const getLineWidth: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => number | undefined;
export declare const setLineWidth: (newWidth: number | undefined, seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => void;
export declare const getMarkerColor: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => Color | undefined;
export declare const setMarkerColor: (newColor: Color | undefined, seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => void;
export declare const getMarkerStyle: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => RESTSimpleMarkerSymbolStyle | undefined;
export declare const setMarkerStyle: (newStyle: RESTSimpleMarkerSymbolStyle | undefined, seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => void;
export declare const getMarkerSize: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => number | undefined;
export declare const setMarkerSize: (newSize: number | undefined, seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => void;
/**
 * Specify whether line segments of the series should be smoothed.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * @default false
 * @returns {boolean}
 */
export declare const isLineSmoothed: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => boolean;
/**
 * Specify whether line segments of the series should be smoothed.
 * @param {boolean} props.smoothed - `true` if line segment of the series should be smoothed, `false` otherwise.
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 */
export declare const setLineSmoothed: (props: {
    smoothed: boolean;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
/**
 * Specify whether the line series should show area.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * @default false
 * @returns {boolean}
 */
export declare const isAreaVisible: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => boolean;
/**
 * Specify whether the line series should show area.
 * @param {boolean} props.visible - `true` if the line series should show area, `false` otherwise.
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 */
export declare const setAreaVisible: (props: {
    visible: boolean;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
/**
 * Indicate whether to show or hide the markers/bullets of the line series.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * @default true
 * @returns {boolean}
 */
export declare const isMarkerVisible: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => boolean;
/**
 * Indicate whether to show or hide the markers/bullets of the line series.
 * @param {boolean} props.visible - `true` if the markers/bullets of the line series should be shown, `false` otherwise.
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 */
export declare const setMarkerVisible: (props: {
    visible: boolean;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
/**
 * Specify the color of the filled area for line chart.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * NOTE: areaColor will be applied only if `showArea` is true, and is defaulted to the line color if not provided.
 *
 * @returns {Color | undefined}
 */
export declare const getAreaColor: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => Color | undefined;
/**
 * Specify the color of the filled area for line chart.
 * @param {Color | undefined} props.color - The color of the filled area for line chart.
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 *
 * NOTE: areaColor will be applied only if `showArea` is true, and is defaulted to the line color if not provided.
 */
export declare const setAreaColor: (props: {
    color: Color | undefined;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
/**
 * Specify whether to connect the lines when there's a gap in the data.
 * @param {number} seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} config - The chart configuration.
 *
 * @returns {boolean | undefined}
 */
export declare const getConnectLines: (seriesIndex: number, config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>) => boolean | undefined;
/**
 * Specify whether to connect the lines when there's a gap in the data.
 * @param {boolean | undefined} props.connect - Whether to connect the gap in the data
 * @param {number} props.seriesIndex - The index of the series.
 * @param {ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>} props.config - The chart configuration.
 *
 * NOTE: Can be overridden by the temporal data setting `nullPolicy`.
 */
export declare const setConnectLines: (props: {
    connect: boolean | undefined;
    seriesIndex: number;
    config: ChartConfig<typeof ModelTypes.ComboBarLineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
}) => void;
