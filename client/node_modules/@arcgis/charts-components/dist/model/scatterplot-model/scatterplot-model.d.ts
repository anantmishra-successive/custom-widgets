import { ISimpleLineSymbol, ISimpleMarkerSymbol, WebChart, SizePolicy, ScatterplotOverlays } from '@arcgis/charts-spec';
import { ChartConfig, XYChartTypes } from '../../utils';
import { ModelParams } from '../interfaces/chart-interfaces';
import { LayerInfo, ModelTypes } from '../interfaces/common';
import { ChartModel } from '../chart-model/chart-model';
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithXGuides, ModelWithYGuides, ModelWithLegend, ModelWithXYAxes, ModelWithTooltips } from '../mixins';
export declare class ScatterplotModel extends ChartModel {
    /**
     * Current configuration used for the scatterplot.
     */
    protected _config: ChartConfig<typeof ModelTypes.Scatterplot, WebChart>;
    protected _chartType: XYChartTypes;
    protected layerInfo: LayerInfo;
    setup(params: ModelParams<ChartConfig<typeof ModelTypes.Scatterplot>>): Promise<void>;
    /**
     * Gets the x-axis field.
     * @returns {string}
     */
    getXAxisField(): string;
    /**
     * Sets the x-axis field.
     * @param {string} fieldName
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXAxisField(fieldName: string): Promise<void>;
    /**
     * Gets the y-axis field.
     * @returns {string}
     */
    getYAxisField(): string;
    /**
     * Sets the y-axis field.
     * @param {string} fieldName
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYAxisField(fieldName: string): Promise<void>;
    /**
     * Gets whether the linear trend line is shown.
     * @returns {boolean}
     */
    getShowLinearTrend(): boolean;
    /**
     * Sets whether to show the linear trend line.
     * @param {boolean} show
     */
    setShowLinearTrend(show: boolean): void;
    /**
     * Gets the line symbol for the linear trend line.
     * @returns {ISimpleLineSymbol}
     */
    getLinearTrendSymbol(): ISimpleLineSymbol;
    /**
     * Sets the line symbol for the linear trend line.
     * @param {ISimpleLineSymbol} symbol
     */
    setLinearTrendSymbol(symbol: ISimpleLineSymbol): void;
    /**
     * Gets the marker symbol used for the scatter plot points when using a fixed symbol (i.e. no size policy is set).
     * @returns {ISimpleMarkerSymbol}
     */
    getFixedMarkerSymbol(): ISimpleMarkerSymbol;
    /**
     * Sets the marker symbol used for the scatter plot points when using a fixed symbol (i.e. no size policy is set).
     * @param {ISimpleMarkerSymbol} symbol
     */
    setFixedMarkerSymbol(symbol: ISimpleMarkerSymbol): void;
    /**
     * Gets the size policy for the scatter plot points. This is used to scale the size of the marker symbol based on a given field.
     * @returns {SizePolicy | undefined}
     */
    getSizePolicy(): SizePolicy | undefined;
    /**
     * Sets the size policy for the scatter plot points. This is used to scale the size of the marker symbol based on a given field.
     * @param {SizePolicy | undefined} sizePolicy
     */
    setSizePolicy(sizePolicy: SizePolicy | undefined): void;
    /**
     * Gets the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
     */
    getSeriesOverlays(): ScatterplotOverlays | undefined;
    /**
     * Sets the chart overlays. The scatter plot implements only 1 overlay, **trendLine**.
     * @param {ScatterplotOverlays} overlays The overlays
     */
    setSeriesOverlays(overlays: ScatterplotOverlays): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
}
export interface ScatterplotModel extends ModelWithXYAxes, ModelWithLegend, ModelWithTooltips, ModelWithColorMatch, ModelWithDataLabels, ModelWithXGuides, ModelWithYGuides {
}
