import { c as r } from "../../chunks/runtime.js";
import "@arcgis/charts-spec";
import { isEqual as n } from "lodash-es";
import "d3-array";
import { g as l, a_ as h, bI as p } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { h as d } from "../../chunks/index4.js";
import { LitElement as c, createEvent as g } from "@arcgis/lumina";
import { html as i } from "lit";
import { C as o } from "../../chunks/interfaces2.js";
import { css as m } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const f = m`:host{overflow-y:auto;overflow-x:hidden;margin-bottom:var(--arcgis-charts-intra-section-margin);margin-top:var(--arcgis-charts-intra-section-margin);height:100%}`;
class u extends c {
  constructor() {
    super(...arguments), this.popoverElement = null, this.onModelConfigChange = async (e) => {
      const t = e?.detail.config ?? this.model.getConfig();
      this.layer === void 0 && await this.updateFetchLayerFieldsInfo(t);
    }, this.popoverPlacement = "leading", this.arcgisChartsConfigWebChartChange = g();
  }
  static {
    this.properties = { layerFieldsInfo: 16, model: 0, popoverPlacement: 3, r2: 11, calculatedDataMinMaxBounds: 0, calculatedMinMaxBounds: 2, page: 3, layer: 0, usePopupTemplateFieldsInfo: 5 };
  }
  static {
    this.styles = f;
  }
  async load() {
    this.layer !== void 0 && await this.layerChange(this.layer, void 0), this.usePopupTemplateFieldsInfo !== void 0 && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, void 0), this.modelChange(this.model), this.onModelConfigChange();
  }
  async willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("r2") && this.r2Change(this.r2), e.has("layer") && await this.layerChange(this.layer, e.get("layer")), e.has("usePopupTemplateFieldsInfo") && await this.usePopupTemplateFieldsInfoChange(this.usePopupTemplateFieldsInfo, e.get("usePopupTemplateFieldsInfo")), this.layerFieldsInfo === void 0 && await this.updateFetchLayerFieldsInfo();
  }
  modelChange(e, a) {
    a?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  r2Change(e) {
    Number.isFinite(e) || (this.r2 = void 0);
  }
  async layerChange(e, a) {
    e !== void 0 && !n(a, e) && await this.updateFetchLayerFieldsInfo();
  }
  async usePopupTemplateFieldsInfoChange(e, a) {
    e !== void 0 && e !== a && await this.updateFetchLayerFieldsInfo();
  }
  popoverOpen(e) {
    const { open: a = !1, element: t = null } = { ...e.detail };
    a === !0 && this.popoverElement !== t ? (this.popoverElement !== null && (this.popoverElement.open = !1), this.popoverElement = t) : a === !1 && this.popoverElement === t && (this.popoverElement = null);
  }
  async updateFetchLayerFieldsInfo(e) {
    const a = e ?? this.model.getConfig();
    let t = this.layer;
    if (!t) {
      const s = d(a) ? a.iLayer : void 0;
      s && (t = await l(s));
    }
    t && (this.layerFieldsInfo = await h(t, this.usePopupTemplateFieldsInfo));
  }
  render() {
    let e;
    switch (this.page) {
      case o.Data:
        e = i`<arcgis-charts-config-scatter-plot-data .model=${this.model} .r2=${this.r2} .layerFieldsInfo=${this.layerFieldsInfo} @arcgisChartsConfigScatterplotPopoverChange=${this.popoverOpen} .isTableLayer=${p(this.layer)?.isTable}></arcgis-charts-config-scatter-plot-data>`;
        break;
      case o.Axes:
        e = i`<arcgis-charts-config-axes .model=${this.model} show-min-x-bound-option show-max-x-bound-option show-min-y-bound-option show-max-y-bound-option show-enable-x-log-option show-enable-y-log-option .calculatedMinMaxBounds=${this.calculatedMinMaxBounds} .calculatedDataMinMaxBounds=${this.calculatedDataMinMaxBounds}></arcgis-charts-config-axes>`;
        break;
      case o.Guides:
        e = i`<arcgis-charts-config-guides .model=${this.model} enable-x-axis-guide enable-y-axis-guide @arcgisChartsConfigGuidePopoverChange=${this.popoverOpen}></arcgis-charts-config-guides>`;
        break;
      case o.Format:
        e = i`<arcgis-charts-config-format .model=${this.model} @arcgisChartsConfigFormatPopoverChange=${this.popoverOpen}></arcgis-charts-config-format>`;
        break;
      case o.General:
        e = i`<arcgis-charts-config-general .model=${this.model}></arcgis-charts-config-general>`;
        break;
      default:
        e = "";
        break;
    }
    return e;
  }
}
r("arcgis-charts-config-scatter-plot", u);
export {
  u as ArcgisChartsConfigScatterplot
};
