import { Color, IDrawingInfo, LegendItemVisibility, SupportedLayer, WebChartTextSymbol } from '@arcgis/charts-spec';
import { ModelParams } from '../interfaces/chart-interfaces';
import { LayerInfo, ModelTypes } from '../interfaces/common';
import { ChartConfig, ChartSubType, ChartTypes } from '../../utils';
export declare abstract class ChartModel extends EventTarget {
    /**
     * Current configuration used for the chart.
     * @category Protected
     */
    protected _config: ChartConfig;
    /**
     * Grouping of layer-related properties to be passed to external function more compactly.
     * @category Protected
     */
    protected layerInfo: LayerInfo | undefined;
    /**
     * Chart Type
     * @category Protected
     */
    protected _chartType: ChartTypes;
    /**
     * Function that resolves the setup promise.
     * @category Protected
     */
    protected resolveSetup: () => void;
    /**
     * Data store object that can be used to store any data needed for the chart.
     */
    dataStore: any;
    /**
     * Completes the async setup process for the chart model. Must be called before using the model.
     * @param {ModelParams} params The parameters to be used to set up the chart model.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    abstract setup(params: ModelParams<ChartConfig>): Promise<void>;
    /**
     * Checks if the current chart model is for the same chart as another chart model.
     * @param {ChartModel | undefined} otherModel The other chart model to compare to.
     * @returns {boolean}
     */
    isSameChartAs(otherModel: ChartModel | undefined): boolean;
    /**
     * Gets the current chart configuration object.
     * @returns {ChartConfig}
     */
    getConfig(): ChartConfig;
    /**
     * Sets the chart configuration object.
     * @param {ChartConfig} config The configuration object.
     */
    setConfig(config: ChartConfig): void;
    /**
     * Gets the chart type.
     * @returns {ChartTypes}
     */
    getChartType(): typeof this._chartType;
    /**
     * Gets the associated layer.
     * @returns {SupportedLayer | undefined}
     */
    getLayer(): SupportedLayer | undefined;
    /**
     * Gets the chart id.
     * @returns {string | undefined}
     */
    getChartId(): string | undefined;
    /**
     * Sets the chart id.
     * @param {string} id
     */
    setChartId(id: string): void;
    /**
     * Promise that resolves when the setup process is complete.
     *
     * **Note: This promise does not need to be awaited if the `setup` method has already been awaited. It is simply provided as a way to await the setup process from other functions if needed to avoid race conditions.**
     */
    setupFinished: Promise<void>;
    /**
     * Gets the version of the chart configuration.
     * @returns {string}
     */
    getVersion(): string;
    /**
     * Gets the chart title text.
     * @returns {string}
     */
    getTitleText(): string;
    /**
     * Sets the chart title text.
     * @param {string} title The title text.
     */
    setTitleText(title: string): void;
    /**
     * Gets the chart subtitle text.
     * @returns {string}
     */
    getSubtitleText(): string;
    /**
     * Sets the chart subtitle text.
     * @param {string} subtitle The subtitle text.
     */
    setSubtitleText(subtitle: string): void;
    /**
     * Gets the chart description text.
     * @returns {string}
     */
    getDescriptionText(): string;
    /**
     * Sets the chart description text.
     * @param {string} description The description text.
     */
    setDescriptionText(description: string): void;
    /**
     * Gets whether or not the chart title is visible.
     *
     * `true`: Chart title is visible.
     *
     * `false`: Chart title is hidden.
     *
     * @returns {boolean}
     *
     * **Note: Even if the title is visible, it may not be displayed if the title text is empty.**
     */
    getChartTitleVisibility(): boolean;
    /**
     * Sets whether or not the chart title is visible.
     *
     * `true`: Show chart title.
     *
     * `false`: Hide chart title.
     *
     * @param {boolean} visibility The visibility state of the chart title.
     *
     * **Note: Even if the title is visible, it may not be displayed if the title text is empty.**
     */
    setChartTitleVisibility(visibility: boolean): void;
    /**
     * Gets whether or not the chart subtitle is visible.
     *
     * `true`: Chart subtitle is visible.
     *
     * `false`: Chart subtitle is hidden.
     *
     * @returns {boolean}
     *
     * **Note: Even if the subtitle is visible, it may not be displayed if the subtitle text is empty.**
     */
    getChartSubtitleVisibility(): boolean;
    /**
     * Sets whether or not the chart subtitle is visible.
     *
     * `true`: Show chart subtitle.
     *
     * `false`: Hide chart subtitle.
     *
     * @param {boolean} visibility The visibility state of the chart subtitle.
     *
     * **Note: Even if the subtitle is visible, it may not be displayed if the subtitle text is empty.**
     */
    setChartSubtitleVisibility(visibility: boolean): void;
    /**
     * Gets whether or not the chart description is visible.
     *
     * `true`: Description is visible.
     *
     * `false`: Description is hidden.
     *
     * @returns {boolean}
     *
     * **Note: Even if the description is visible, it may not be displayed if the description text is empty.**
     */
    getDescriptionVisibility(): boolean;
    /**
     * Sets whether or not the chart description is visible.
     *
     * `true`: Show description.
     *
     * `false`: Hide description.
     *
     * @param {boolean} visibility The visibility state of the description.
     *
     * **Note: Even if the description is visible, it may not be displayed if the description text is empty.**
     */
    setDescriptionVisibility(visibility: boolean): void;
    /**
     * Gets the chart renderer.
     * @returns {IDrawingInfo["renderer"] | undefined} The chart renderer if defined, otherwise undefined.
     */
    getChartRenderer(): IDrawingInfo["renderer"] | undefined;
    /**
     * Sets the chart renderer.
     * @param renderer The chart renderer to set.
     */
    setChartRenderer(renderer: IDrawingInfo["renderer"]): void;
    /**
     * Gets the title text symbol. Contains styling information such as font, color, and symbol style.
     * @returns {WebChartTextSymbol | undefined}
     */
    getTitleSymbol(): WebChartTextSymbol | undefined;
    /**
     * Sets the title text symbol. Contains styling information such as font, color, and symbol style.
     * @param {WebChartTextSymbol | undefined} titleSymbol The title symbol.
     */
    setTitleSymbol(titleSymbol: WebChartTextSymbol | undefined): void;
    /**
     * Gets the subtitle text symbol. Contains styling information such as font, color, and symbol style.
     * @returns {WebChartTextSymbol | undefined}
     */
    getSubtitleSymbol(): WebChartTextSymbol | undefined;
    /**
     * Sets the subtitle text symbol. Contains styling information such as font, color, and symbol style.
     * @param {WebChartTextSymbol | undefined} subtitleSymbol The title symbol.
     */
    setSubtitleSymbol(subtitleSymbol: WebChartTextSymbol | undefined): void;
    /**
     * Gets the description text symbol. Contains styling information such as font, color, and symbol style.
     * @returns {WebChartTextSymbol | undefined}
     */
    getDescriptionSymbol(): WebChartTextSymbol | undefined;
    /**
     * Sets the description text symbol. Contains styling information such as font, color, and symbol style.
     * @param {WebChartTextSymbol | undefined} descriptionSymbol The description symbol.
     */
    setDescriptionSymbol(descriptionSymbol: WebChartTextSymbol | undefined): void;
    /**
     * Gets the background color of the chart.
     * @returns {Color | undefined}
     */
    getBackgroundColor(): Color | undefined;
    /**
     * Sets the background color of the chart.
     * @param {Color | undefined} backgroundColor The background color.
     */
    setBackgroundColor(backgroundColor: Color | undefined): void;
    /**
     * Gets the visibility of a series.
     * @param seriesIndex The series index
     * @returns {boolean}
     */
    getSeriesVisibility(seriesIndex: number): boolean;
    /**
     * Sets the visibility of a series.
     * @param {boolean} props.visible
     * @param {string} props.seriesId
     * @param {OverlayTerms} props.overlayType
     * @param {string} props.sliceId
     * @param {WebChartDataItem} props.sliceData
     */
    setSeriesVisibility(props: LegendItemVisibility): void;
    /**
     * Gets the series ID for a given series index.
     *
     * If the series index is out of bounds, this function will return `undefined`.
     *
     * @param {number} seriesIndex The index of the series.
     * @returns {string | undefined}
     */
    getSeriesId(seriesIndex: number): string | undefined;
    /**
     * Gets the series index for a given series ID.
     *
     * If the series ID is not found, this function will return `undefined`.
     *
     * @param {string} seriesId
     * @returns {number | undefined}
     */
    getSeriesIndex(seriesId: string): number | undefined;
    /**
     * Gets the length of the series array.
     * @returns {number}
     */
    getSeriesLength(): number;
    /**
     * Gets the chart sub type of the series.
     * @returns {ChartSubType}
     */
    getChartSubType(): ChartSubType;
    /**
     * Sets whether to fetch `null` values for them to be counted or displayed as categories on the chart.
     *
     * @param fetchNULLValues Whether to fetch `null` values.
     */
    setFetchNULLValues(fetchNULLValues: boolean): void;
    /**
     * Gets whether to fetch `null` values for them to be counted or displayed as categories on the chart.
     *
     * @returns {boolean} Boolean value indicates whether NULL values will be fetched.
     */
    getFetchNULLValues(): boolean;
    /**
     * Gets the split-by values for the chart.
     * @returns {string[]}
     */
    getSplitByValues(): string[];
    /**
     * Emits a config update event.
     * @category Protected
     */
    protected emitConfigUpdate(functionCalled: string): void;
    /**
     * A function that generates the default config object when creating a new chart.
     * @category Protected
     */
    protected abstract generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
    /**
     * A function that loads the config based on the provided props.
     * @category Protected
     * @param params.layer The layer to be used as the data source for the chart.
     * @param params.iLayer The layer description to use if the layer is not provided
     * @param params.config The config object to be loaded.
     */
    protected loadConfigFromLayer<T extends ModelTypes>(params: ModelParams<ChartConfig<T>>): Promise<void>;
}
