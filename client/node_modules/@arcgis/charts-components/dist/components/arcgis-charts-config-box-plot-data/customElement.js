import { c as C } from "../../chunks/runtime.js";
import { keyed as f } from "lit-html/directives/keyed.js";
import { B as c } from "../../chunks/common.js";
import { WebChartTypes as v } from "@arcgis/charts-spec";
import { isEqual as b } from "lodash-es";
import "d3-array";
import { W as d, ca as S, c9 as u } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as p, c as y, P } from "../../chunks/popover-ui-utils.js";
import { repeat as x } from "lit-html/directives/repeat.js";
import { a as l, e as m } from "../../chunks/interfaces2.js";
import { d as $, s as F } from "../../chunks/store.js";
import { U as w } from "../../chunks/chart-ui-utils2.js";
import { u as O } from "../../chunks/useT9n.js";
import { nothing as I, html as a } from "lit";
import { createRef as h, ref as g } from "lit-html/directives/ref.js";
import { LitElement as B, createEvent as L, safeClassMap as o } from "@arcgis/lumina";
import { css as k } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const r = {
  label: "label",
  fieldList: "field-list",
  fab: "fab",
  dimText: "dim-text",
  list: "list",
  customSortButtons: "custom-sort-buttons"
}, E = k`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.custom-sort-buttons{display:flex;justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}`;
class D extends B {
  constructor() {
    super(...arguments), this._messages = O(), this.boxPlotPopover = null, this.categoryElement = h(), this.numericFieldsElement = h(), this.splitByFieldElement = h(), this.sortOrderElement = h(), this.originalCustomSortLabels = [], this.isCustomSortDisabled = !1, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.popoverClose = (t) => {
      this.boxPlotPopover === t?.target && (this.boxPlotPopover = p(this.boxPlotPopover));
    }, this.onBoxPlotDataChange = async (t) => {
      try {
        if (t.detail !== null && t.detail?.value !== void 0) {
          const { contentKind: e } = t.detail, i = [...t.detail.value];
          switch ($(F), e) {
            case l.category: {
              const s = i[0]?.trim() || d;
              if (await this.model.setCategory(s), this.model.getSortOrder() === c.customSort) {
                const n = await this.updateCustomSortProps();
                this.model.setOrderByList(n), this.sortOrderResetCounter += 1;
              }
              break;
            }
            case l.numericFields: {
              await this.model.setNumericFields(i);
              const s = i.length > 1;
              if (await this.model.setStandardizeValues(s), this.model.getSortOrder() === c.customSort) {
                const n = await this.updateCustomSortProps();
                this.model.setOrderByList(n), this.sortOrderResetCounter += 1;
              }
              break;
            }
            case l.splitByField: {
              const s = i[0]?.trim() || "";
              await this.model.setSplitByField(s);
              break;
            }
            case l.sortOrder:
              {
                const s = i[0];
                if (s === c.customSort) {
                  const n = await this.updateCustomSortProps();
                  this.model.setSortOrder(s, n);
                } else
                  this.model.setSortOrder(s);
                this.sortOrderResetCounter += 1;
              }
              break;
            default:
              break;
          }
        }
      } catch (e) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: e, model: this.model }), e;
      }
      this.requestUpdate();
    }, this.selectedCustomSortItemId = "", this.sortOrderResetCounter = 0, this.layerFieldsInfo = [], this.arcgisChartsConfigDataChangeError = L();
  }
  static {
    this.properties = { selectedCustomSortItemId: 16, sortOrderResetCounter: 16, messageOverrides: 0, model: 0, layerFieldsInfo: 0 };
  }
  static {
    this.styles = E;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange(), this.currentDataFilter = this.model.getDataFilter(), this.updateCustomSortProps();
  }
  async willUpdate(t) {
    t.has("model") && this.modelChange(this.model, t.get("model")), b(this.model.getDataFilter(), this.currentDataFilter) || (await this.updateCustomSortProps(), this.currentDataFilter = this.model.getDataFilter()), this.disableSplitBy = this.model.getNumericFields().length === 0 || this.model.getNumericFields().length > 1 && this.model.getCategory() !== d;
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.boxPlotPopover = p(this.boxPlotPopover), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(t, e) {
    e?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), t?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  onCalciteListOrderChange(t) {
    if (t.detail !== null && t.detail !== void 0) {
      const { newIndex: e, oldIndex: i } = t.detail;
      this.model.moveCustomSortValuesInOrderByList(i, e);
    }
  }
  onCustomSortItemSelected(t) {
    const { id: e } = t.target;
    this.selectedCustomSortItemId = this.selectedCustomSortItemId === e ? "" : e;
  }
  onCustomSortItemMoved(t) {
    const { id: e } = t.target;
    let i = this.model.getOrderByList().length;
    const s = this.model.getOrderByList().indexOf(this.selectedCustomSortItemId);
    e === m.Up ? i = s - 1 : e === m.Down && (i = s + 1), s >= 0 && i >= 0 && i < this.model.getOrderByList().length && (this.model.moveCustomSortValuesInOrderByList(s, i), this.sortOrderResetCounter += 1);
  }
  buildCustomSortListItems() {
    return x(this.model.getOrderByList(), (e) => e, (e) => {
      const i = S(this.layerFieldsInfo, e);
      return a`<calcite-list-item id=${e ?? I} .label=${e ?? ""} .description=${i} .value=${e} .selected=${this.selectedCustomSortItemId === e} @calciteListItemSelect=${this.onCustomSortItemSelected}><calcite-icon slot=content-end></calcite-icon></calcite-list-item>`;
    });
  }
  buildCustomSortList() {
    return f(this.sortOrderResetCounter, a`<calcite-list label class=${o(r.list)} drag-enabled selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildCustomSortListItems()}</calcite-list>`);
  }
  buildNumericFieldItem(t) {
    return f(t, a`<calcite-list-item .label=${u(this.layerFieldsInfo, t)} .value=${t} closable @calciteListItemClose=${this.onRemoveNumericField}></calcite-list-item>`);
  }
  onCategorySelect() {
    this.categoryElement.value && !this.categoryElement.value.disabled && (this.contentKind = l.category, this.setupPopover());
  }
  async onRemoveNumericField(t) {
    const e = t.target.value;
    if (await this.model.setNumericFields(this.model.getNumericFields().filter((i) => i !== e)), this.model.getNumericFields().length === 0 && this.model.resetConfig(), this.model.getSortOrder() === c.customSort) {
      const i = await this.updateCustomSortProps();
      this.model.setOrderByList(i), this.sortOrderResetCounter += 1;
    }
  }
  async updateCustomSortProps() {
    const t = await this.model.getCustomSortValues();
    this.originalCustomSortLabels = [...t];
    const e = t.length > w.customSortLimit;
    return e && (this.sortOrderElement.value && (this.sortOrderElement.value.label = this._messages.xAxisAsc), this.model.setSortOrder(c.xAxisAsc)), this.isCustomSortDisabled = e, t;
  }
  async onStandardizeValuesChange(t) {
    await this.model.setStandardizeValues(t.target.checked);
  }
  async onShowOutliersChange(t) {
    await this.model.setShowOutliers(t.target.checked);
  }
  onSplitBySelect() {
    this.splitByFieldElement.value && !this.splitByFieldElement.value.disabled && (this.contentKind = l.splitByField, this.setupPopover());
  }
  onSortOrderSelect() {
    this.contentKind = l.sortOrder, this.setupPopover();
  }
  setupPopover() {
    this.boxPlotPopover = p(this.boxPlotPopover);
    const t = {
      layerFieldsInfo: this.layerFieldsInfo,
      onBoxPlotDataChange: this.onBoxPlotDataChange,
      popoverClose: this.popoverClose
    };
    if (this.boxPlotPopover = y(P.BoxPlotDataPopover, t), this.boxPlotPopover !== null) {
      switch (this.contentKind) {
        case l.category:
          this.boxPlotPopover.referenceElement = this.categoryElement.value, this.boxPlotPopover.headingTitle = this._messages.categoryHeader, this.boxPlotPopover.selectedContent = this.model.getCategory() === d ? "" : this.model.getCategory();
          break;
        case l.numericFields:
          this.boxPlotPopover.referenceElement = this.numericFieldsElement.value, this.boxPlotPopover.headingTitle = this._messages.numericFieldsHeader, this.boxPlotPopover.selectedContent = this.model.getNumericFields();
          break;
        case l.splitByField:
          this.boxPlotPopover.referenceElement = this.splitByFieldElement.value, this.boxPlotPopover.headingTitle = this._messages.splitByFieldHeader, this.boxPlotPopover.selectedContent = this.model.getSplitByField();
          break;
        case l.sortOrder:
          this.boxPlotPopover.referenceElement = this.sortOrderElement.value, this.boxPlotPopover.headingTitle = this._messages.selectSortOrder, this.boxPlotPopover.selectedContent = this.model.getSortOrder(), this.boxPlotPopover.isCustomSortDisabled = this.isCustomSortDisabled;
          break;
      }
      this.boxPlotPopover.contentKind = this.contentKind, this.boxPlotPopover.open = !0, this.addPopover();
    }
  }
  addPopover() {
    !document.body.contains(this.boxPlotPopover) && this.boxPlotPopover !== null && document.body.appendChild(this.boxPlotPopover);
  }
  onAddNumericFields() {
    this.contentKind = l.numericFields, this.setupPopover();
  }
  getCorrectedSplitByValue() {
    return this.model.getSplitByField()?.trim() === "" ? "" : u(this.layerFieldsInfo, this.model.getSplitByField());
  }
  getCorrectedCategoryValue() {
    return this.model.getCategory() === d ? "" : u(this.layerFieldsInfo, this.model.getCategory());
  }
  resetToOriginalCustomSortLabels() {
    this.selectedCustomSortItemId = "", this.model.setOrderByList([...this.originalCustomSortLabels]), this.sortOrderResetCounter += 1;
  }
  renderCustomSortUI() {
    const t = this.model.getSortOrder(), e = this.model.getXAxisValueFormat()?.type, i = this.model.getOrderByList().indexOf(this.selectedCustomSortItemId);
    return e === v.CategoryAxisFormat && t === c.customSort && !this.isCustomSortDisabled ? a`<calcite-label class=${o(r.label)}><div class=${o(r.customSortButtons)}><div><calcite-button appearance=transparent .disabled=${i === 0 || i === -1 || this.selectedCustomSortItemId.trim() === ""} icon-start=arrow-bold-up id=${m.Up} kind=neutral scale=s @click=${this.onCustomSortItemMoved}></calcite-button><calcite-button appearance=transparent .disabled=${i === -1 || i === this.model.getOrderByList().length - 1 || this.selectedCustomSortItemId.trim() === ""} icon-start=arrow-bold-down id=${m.Down} kind=neutral scale=s @click=${this.onCustomSortItemMoved}></calcite-button></div><calcite-button @click=${this.resetToOriginalCustomSortLabels} .disabled=${b(this.model.getOrderByList(), this.originalCustomSortLabels)} appearance=transparent icon-end=reset>${this._messages.reset}</calcite-button></div>${this.model.getCategory() === d ? this._messages.values : this._messages.category}${this.buildCustomSortList()}</calcite-label>` : null;
  }
  renderNumericFields(t) {
    const e = [];
    for (const i of t)
      e.push(this.buildNumericFieldItem(i));
    return a`<calcite-list label class=${o(r.fieldList)} ${g(this.numericFieldsElement)}>${e}</calcite-list>`;
  }
  renderCategory() {
    const t = this.getCorrectedCategoryValue(), e = this.model.getNumericFields().length === 0 || (this.model.getNumericFields() ?? []).length > 1 && this.model.getSplitByField() !== "";
    return a`<arcgis-charts-config-field-select .label=${t} .disabled=${e} @click=${this.onCategorySelect} ${g(this.categoryElement)}></arcgis-charts-config-field-select>`;
  }
  renderSplitBy() {
    const t = this.getCorrectedSplitByValue();
    return a`<arcgis-charts-config-field-select .label=${t} .disabled=${this.disableSplitBy} @click=${this.onSplitBySelect} ${g(this.splitByFieldElement)}></arcgis-charts-config-field-select>`;
  }
  renderSorting() {
    return a`<arcgis-charts-config-field-select .label=${this._messages[this.model.getSortOrder()]} @click=${this.onSortOrderSelect} ${g(this.sortOrderElement)}></arcgis-charts-config-field-select>`;
  }
  render() {
    const t = this.renderCategory(), e = this.renderNumericFields([...this.model.getNumericFields() ?? []]), i = this.renderSplitBy(), s = this.renderSorting(), n = this.renderCustomSortUI();
    return a`<div><calcite-label class=${o(r.label)}>${this._messages.numericFields}${e}</calcite-label><div class=${o(r.fab)}><calcite-fab appearance=outline-fill kind=neutral scale=m .label=${this._messages.selectNumericFields} text-enabled .text=${this._messages.selectNumericFields} icon=plus @click=${this.onAddNumericFields}></calcite-fab></div><calcite-label class=${o(r.label)}><div>${this._messages.category} <span class=${o(r.dimText)}>(${this._messages.optional})</span></div>${t}</calcite-label><calcite-label class=${o(r.label)}><div class=${o(this.disableSplitBy ? r.dimText : "")}>${this._messages.splitBy} <span class=${o(r.dimText)}>(${this._messages.optional})</span></div>${i}</calcite-label><div>${(this.model.getNumericFields() ?? []).length > 1 ? a`<calcite-label class=${o(r.label)} layout=inline-space-between>${this._messages.standardizeValues}<calcite-switch .checked=${this.model.getStandardizeValues()} @calciteSwitchChange=${this.onStandardizeValuesChange}></calcite-switch></calcite-label>` : null}</div><calcite-label class=${o(r.label)} layout=inline-space-between>${this._messages.showOutliers}<calcite-switch .checked=${this.model.getShowOutliers()} @calciteSwitchChange=${this.onShowOutliersChange}></calcite-switch></calcite-label><calcite-label class=${o(r.label)}>${this._messages.sortOrder}${s}</calcite-label>${n}</div>`;
  }
}
C("arcgis-charts-config-box-plot-data", D);
export {
  D as ArcgisChartsConfigBoxPlotData
};
