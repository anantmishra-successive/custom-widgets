import { c as $ } from "../../chunks/runtime.js";
import { keyed as y } from "lit-html/directives/keyed.js";
import { WebChartStackedKinds as r, WebChartStatisticType as p } from "@arcgis/charts-spec";
import { isNil as P } from "lodash-es";
import "d3-array";
import { cs as k } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as m, c as T, P as I } from "../../chunks/popover-ui-utils.js";
import { repeat as O } from "lit-html/directives/repeat.js";
import { d as L, e as x } from "../../chunks/chart-ui-utils2.js";
import { u as M } from "../../chunks/useT9n.js";
import { html as l } from "lit";
import { LitElement as N, createEvent as c, safeStyleMap as A, safeClassMap as a } from "@arcgis/lumina";
import { css as _ } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const B = {
  stackedType: "stacked-type"
}, s = {
  topSection: "top-section",
  sectionLabel: "section-label",
  list: "list",
  disabledInfo: "disabled-info",
  disabledStackingOption: "disabled-stacking-option"
}, E = _`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.top-section{margin-top:var(--arcgis-charts-config-margin-minor)}.section-label{display:flex;margin-bottom:var(--arcgis-charts-config-margin-major);margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.disabled-info{margin:auto 1rem;pointer-events:auto}.disabled-info:active{margin:auto 1rem;pointer-events:none}.disabled-stacking-option{pointer-events:none;opacity:var(--calcite-opacity-disabled)}`;
class w extends N {
  constructor() {
    super(...arguments), this._messages = M(), this.seriesNameChange = (e) => {
      if (e.detail !== null || e.detail !== void 0) {
        const i = e.detail?.name;
        this.model.setSeriesName(i, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesColorChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { color: i } = e.detail;
        this.model.setColorMatch(!1), i !== void 0 && this.model.setSeriesColor(i, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesPopoverClose = () => {
      this.selectedSeriesIndex = void 0, this.configSeriesOpen = !1, this.seriesPopover = m(this.seriesPopover);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.seriesOrderResetCounter = 0, this.configSeriesOpen = !1, this.activeColorMatch = !1, this.popoverPlacement = "leading", this.arcgisChartsConfigBarChartSeriesPopoverChange = c(), this.arcgisChartsConfigDataChangeError = c(), this.arcgisChartsConfigPopoverOpenChange = c();
  }
  static {
    this.properties = { selectedSeriesIndex: 16, seriesOrderResetCounter: 16, messageOverrides: 0, model: 0, configSeriesOpen: 5, activeColorMatch: 5, popoverPlacement: 1 };
  }
  static {
    this.styles = E;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("selectedSeriesIndex") && this.selectedSeriesIndexChange();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeSeriesPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, i) {
    i?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  selectedSeriesIndexChange() {
    this.selectedSeriesIndex !== void 0 && this.configSeriesOpen ? (this.setupSeriesPopover(), this.seriesPopover && (this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex), this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex), this.seriesPopover.open || (this.seriesPopover.open = !0)), this.addSeriesPopover()) : this.removeSeriesPopover();
  }
  removeSeriesPopover() {
    this.seriesPopover !== null && this.seriesPopover !== void 0 && (this.seriesPopover.open = !1, this.seriesPopover = m(this.seriesPopover)), this.seriesPopoverChange(!1);
  }
  buildSeriesListItems() {
    const e = this.model.getSeriesLength() ?? 0, i = Array.from({ length: e }, (t, o) => o);
    return O(i, (t) => this.model.getSeriesId(t), (t) => {
      const o = this.model.getSeriesId(t), d = this.model.getSeriesColor(t), v = this.model.getSeriesName(t), C = this.model.getChartSubType() === k.BarAndLineFromFields ? this._messages.series : o;
      let h = "#CCCCCC", g = "minus-square";
      if ((e > 1 || !this.activeColorMatch) && d !== void 0) {
        g = "square-f";
        const [f, S, u, b] = [...d];
        h = `rgba(${f},${S},${u},${b / 255})`;
      }
      return l`<calcite-list-item .label=${v ?? o ?? ""} .description=${C} .value=${o} .selected=${this.selectedSeriesIndex === t} @click=${this.openSeriesPopOver}><calcite-icon .icon=${g} style=${A({ color: h })} slot=content-end></calcite-icon></calcite-list-item>`;
    });
  }
  buildSeriesList() {
    return y(this.seriesOrderResetCounter, l`<calcite-list label class=${a(s.list)} drag-enabled selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildSeriesListItems()}</calcite-list>`);
  }
  buildMultipleBarTypeList() {
    const e = this.shouldDisableStacking();
    return e && this.model.getStackedType() !== r.Side && this.model.setStackedType(r.Side), l`<calcite-list label id=${B.stackedType} class=${a(s.list)} selection-mode=single-persist selection-appearance=border @click=${this.onMultipleBarSelect}><calcite-list-item .label=${this._messages.sideBySide} .value=${r.Side} .selected=${this.model.getStackedType() === void 0 || this.model.getStackedType() === r.Side}><calcite-icon scale=l icon=graph-bar-side-by-side slot=content-start></calcite-icon></calcite-list-item><calcite-list-item class=${a(e ? s.disabledStackingOption : "")} .label=${this._messages.stacked} .value=${r.Stacked} .selected=${this.model.getStackedType() === r.Stacked}><calcite-icon scale=l icon=graph-bar-stacked slot=content-start></calcite-icon>${e && l`<calcite-icon class=${a(s.disabledInfo)} slot=content-end icon=information scale=s flip-rtl @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}></calcite-icon>` || ""}</calcite-list-item><calcite-list-item class=${a(e ? s.disabledStackingOption : "")} .label=${this._messages.stacked100} .value=${r.Stacked100} .selected=${this.model.getStackedType() === r.Stacked100}><calcite-icon scale=l icon=graph-bar-100-stacked slot=content-start></calcite-icon>${e && l`<calcite-icon class=${a(s.disabledInfo)} slot=content-end icon=information scale=s flip-rtl @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}></calcite-icon>` || ""}</calcite-list-item></calcite-list>`;
  }
  async resetSeriesOriginal() {
    this.configSeriesOpen = !1, this.selectedSeriesIndex = void 0, this.model.resetSeriesStyling(), this.seriesOrderResetCounter += 1;
  }
  async onMultipleBarSelect(e) {
    if (!this.shouldDisableStacking()) {
      const i = e.target;
      await this.model.setStackedType(i.value ?? i.parentElement.value ?? "");
    }
  }
  onCalciteListOrderChange(e) {
    if (e.detail !== null && e.detail !== void 0) {
      const { newIndex: i, oldIndex: n } = e.detail;
      this.model.moveSeries(n, i), this.seriesOrderResetCounter += 1;
    }
  }
  seriesPopoverChange(e) {
    this.arcgisChartsConfigBarChartSeriesPopoverChange.emit({
      open: e,
      element: this.seriesPopover
    });
  }
  openSeriesPopOver(e) {
    const i = e.target, n = i.localName === "calcite-list-item" ? i : i.parentNode, t = !this.configSeriesOpen, o = this.model.getSeriesIndex(n.value);
    this.configSeriesOpen = this.selectedSeriesIndex === o ? t : !0, this.configSeriesOpen ? this.selectedSeriesIndex = o : this.selectedSeriesIndex = void 0;
  }
  createTooltip(e) {
    const i = e.target, n = this.model.getAggregationType() === p.NoAggregation ? this._messages.noAggStackingDisabled : this._messages.singleStackingDisabled;
    this.tooltip = L(i), this.tooltip.innerHTML = n ?? "", document.body.appendChild(this.tooltip);
  }
  destroyTooltip() {
    x(this.tooltip);
  }
  setupSeriesPopover() {
    if (P(this.seriesPopover) && this.el !== void 0) {
      const e = {
        seriesNameChange: this.seriesNameChange,
        seriesColorChange: this.seriesColorChange,
        openChange: this.openChange,
        hostElement: this.el,
        placement: this.popoverPlacement,
        popoverClose: this.seriesPopoverClose
      };
      this.seriesPopover = T(I.BarChartSeriesPopover, e);
    }
  }
  addSeriesPopover() {
    this.seriesPopover && !document.body.contains(this.seriesPopover) && document.body.appendChild(this.seriesPopover), this.seriesPopoverChange(!0);
  }
  shouldDisableStacking() {
    return (this.model.getSeriesLength() ?? 0) <= 1 || this.model.getAggregationType() === p.NoAggregation;
  }
  render() {
    return l`<div class=${`${s.sectionLabel} ${s.topSection}`}>${this._messages.displayMultiSeries}</div>${this.buildMultipleBarTypeList()}<div class=${a(s.sectionLabel)}>${this._messages.series}<calcite-button @click=${this.resetSeriesOriginal} .disabled=${!this.model.resetAvailable()} appearance=transparent icon-end=reset>${this._messages.reset}</calcite-button></div>${this.buildSeriesList()}`;
  }
}
$("arcgis-charts-config-bar-chart-series", w);
export {
  w as ArcgisChartsConfigBarChartSeries
};
