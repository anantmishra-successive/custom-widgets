import { isNil as o } from "lodash-es";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const a = {
  BarChartDataPopover: "HTMLArcgisChartsConfigBarChartPopoverElement",
  BarChartSeriesPopover: "HTMLArcgisChartsConfigBarChartSeriesPopoverElement",
  BoxPlotDataPopover: "HTMLArcgisChartsConfigBoxPlotPopoverElement",
  BoxPlotSeriesPopover: "HTMLArcgisChartsConfigBoxPlotSeriesPopoverElement",
  ChartRenamePopover: "HTMLArcgisChartsConfigChartRenamePopoverElement",
  FormatPopover: "HTMLArcgisChartsConfigFormatPopoverElement",
  GuidePopover: "HTMLArcgisChartsConfigGuidePopoverElement",
  HistogramDataPopover: "HTMLArcgisChartsConfigHistogramPopoverElement",
  LineChartDataPopover: "HTMLArcgisChartsConfigLineChartPopoverElement",
  LineChartSeriesPopover: "HTMLArcgisChartsConfigLineChartSeriesPopoverElement",
  PieChartDataPopover: "HTMLArcgisChartsConfigPieChartPopoverElement",
  PieChartSlicesPopover: "HTMLArcgisChartsConfigPieChartSlicesPopoverElement",
  ScatterplotDataPopover: "HTMLArcgisChartsConfigScatterplotPopoverElement",
  SelectChartTypePopover: "HTMLArcgisChartsConfigSelectChartTypePopoverElement"
}, f = (r) => (r?.remove(), null);
function s(r) {
  const e = document.createElement("arcgis-charts-config-histogram-popover");
  return e.layerFieldsInfo = [...r.layerFieldsInfo], e.addEventListener("arcgisChartsConfigHistogramPopoverSymbolChange", r.updateSymbolProps), e.addEventListener("arcgisChartsConfigHistogramPopoverChange", r.updateProps), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function i(r) {
  const e = document.createElement("arcgis-charts-config-bar-chart-popover");
  return e.layerFieldsInfo = [...r.layerFieldsInfo], e.addEventListener("arcgisChartsConfigBarChartDataPopoverChange", r.onBarChartDataChange), e;
}
function c(r) {
  const e = document.createElement("arcgis-charts-config-bar-chart-series-popover");
  return e.referenceElement = r.hostElement, e.placement = r.placement, e.addEventListener("arcgisChartsConfigSeriesPopoverNameChange", r.seriesNameChange), e.addEventListener("arcgisChartsConfigSeriesPopoverColorChange", r.seriesColorChange), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function h(r) {
  const e = document.createElement("arcgis-charts-config-box-plot-popover");
  return e.layerFieldsInfo = [...r.layerFieldsInfo], e.addEventListener("arcgisChartsConfigBoxPlotDataPopoverChange", r.onBoxPlotDataChange), e;
}
function C(r) {
  const e = document.createElement("arcgis-charts-config-box-plot-series-popover");
  return e.referenceElement = r.hostElement, e.placement = r.placement, e.labelCanBeConfigured = r.labelCanBeConfigured, e.addEventListener("arcgisChartsConfigSeriesPopoverNameChange", r.seriesNameChange), e.addEventListener("arcgisChartsConfigSeriesPopoverColorChange", r.seriesColorChange), e.addEventListener("arcgisChartsConfigSeriesPopoverLineStyleChange", r.seriesLineStyleChange), e.addEventListener("arcgisChartsConfigSeriesPopoverLineWidthChange", r.seriesLineWidthChange), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function l(r) {
  const e = document.createElement("arcgis-charts-config-line-chart-popover");
  return e.layerFieldsInfo = [...r.layerFieldsInfo], e.addEventListener("arcgisChartsConfigLineChartDataPopoverChange", r.onLineChartDataChange), e;
}
function g(r) {
  const e = document.createElement("arcgis-charts-config-pie-chart-popover");
  return e.layerFieldsInfo = [...r.layerFieldsInfo], e.addEventListener("arcgisChartsConfigPieChartDataPopoverChange", r.onPieChartDataChange), e;
}
function d(r) {
  const e = document.createElement("arcgis-charts-config-format-popover");
  return e.selectedElement = r.selectedElement, e.referenceElement = r.referenceElement, e.addEventListener("arcgisChartsConfigFormatPopoverSymbolChange", r.updateSymbolProps), e.addEventListener("arcgisChartsConfigFormatPopoverTextChange", r.updateTextProps), e.addEventListener("arcgisChartsConfigFormatPopoverColorChange", r.updateBackground), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function P(r) {
  const e = document.createElement("arcgis-charts-config-guide-popover");
  return e.addEventListener("arcgisChartsConfigGuidePopoverColorChange", r.colorChange), e.addEventListener("arcgisChartsConfigGuidePopoverSymbolChange", r.symbolChange), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.popoverDismiss), e;
}
function m(r) {
  const e = document.createElement("arcgis-charts-config-line-chart-series-popover");
  return e.referenceElement = r.referenceElement, e.placement = r.placement, e.addEventListener("arcgisChartsConfigSeriesPopoverNameChange", r.seriesNameChange), e.addEventListener("arcgisChartsConfigSeriesPopoverColorChange", r.seriesColorChange), e.addEventListener("arcgisChartsConfigSeriesPopoverLineStyleChange", r.seriesLineStyleChange), e.addEventListener("arcgisChartsConfigSeriesPopoverLineWidthChange", r.seriesLineWidthChange), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function v(r) {
  const e = document.createElement("arcgis-charts-config-pie-chart-slices-popover");
  return e.referenceElement = r.referenceElement, e.placement = r.placement, e.addEventListener("arcgisChartsConfigSlicesPopoverNameChange", r.sliceNameChange), e.addEventListener("arcgisChartsConfigSlicesPopoverColorChange", r.sliceColorChange), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
function p(r) {
  const e = document.createElement("arcgis-charts-config-select-chart-type-popover");
  return e.addEventListener("arcgisChartsConfigSelectChartTypeChange", r.onSelectChartTypeChange), e;
}
function E(r) {
  const e = document.createElement("arcgis-charts-config-chart-rename-popover");
  return e.name = r.name, e.popoverReferenceElement = r.popoverReferenceElement, e.addEventListener("arcgisChartsConfigChartRenamePopoverChange", r.onChartRename), e;
}
function L(r) {
  const e = document.createElement("arcgis-charts-config-scatter-plot-popover");
  return e.addEventListener("arcgisChartsConfigScatterplotLineStyleChange", r.setTrendLineSymbol), e.addEventListener("arcgisChartsConfigScatterplotFillColorChange", r.setFixedSymbolRGBAColor), e.addEventListener("arcgisChartsConfigScatterplotXYFieldChange", r.setXYField), e.addEventListener("arcgisChartsConfigScatterplotSizeVariableFieldChange", r.setSizeVariableField), e.addEventListener("arcgisChartsConfigPopoverOpenChange", r.openChange), e;
}
const S = (r, e) => {
  let t;
  switch (r) {
    // Histogram data popover
    case a.HistogramDataPopover:
      t = s(e);
      break;
    // Bar Chart data popover
    case a.BarChartDataPopover:
      t = i(e);
      break;
    // * Bar Chart Series Popover
    case a.BarChartSeriesPopover:
      t = c(e);
      break;
    // Box Plot data popover
    case a.BoxPlotDataPopover:
      t = h(e);
      break;
    // * Box Plot Series Popover
    case a.BoxPlotSeriesPopover:
      t = C(e);
      break;
    // * Line Chart data popover
    case a.LineChartDataPopover:
      t = l(e);
      break;
    // Pie Chart data popover
    case a.PieChartDataPopover:
      t = g(e);
      break;
    // Format chart popover
    case a.FormatPopover:
      t = d(e);
      break;
    // Guide popover
    case a.GuidePopover:
      t = P(e);
      break;
    // Line Chart series popover
    case a.LineChartSeriesPopover:
      t = m(e);
      break;
    // Pie Chart slices popover
    case a.PieChartSlicesPopover:
      t = v(e);
      break;
    // Scatter Plot data popover
    case a.ScatterplotDataPopover:
      t = L(e);
      break;
    // Select Chart Type popover
    case a.SelectChartTypePopover:
      t = p(e);
      break;
    // Chart Rename Popover
    case a.ChartRenamePopover:
      t = E(e);
      break;
    default:
      throw new Error("Invalid popover type provided");
  }
  return t.open = !0, t.addEventListener("arcgisChartsConfigPopoverClose", e.popoverClose), t;
}, y = (r, e = !1) => {
  if (o(r))
    return;
  e ? (r.style.setProperty("opacity", "1"), r.style.setProperty("pointer-events", "initial")) : (r.style.removeProperty("opacity"), r.style.removeProperty("pointer-events"));
  const t = r.referenceElement, n = t !== void 0 ? {
    getBoundingClientRect: () => t.getBoundingClientRect()
  } : {
    getBoundingClientRect: () => new DOMRect()
  };
  r.referenceElement = n, r.triggerDisabled = e, r.open = e;
};
export {
  a as P,
  S as c,
  y as e,
  f as r
};
