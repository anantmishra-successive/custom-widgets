import { c as d } from "../../chunks/runtime.js";
import { html as l } from "lit-html";
import { RESTSymbolType as u, RESTFontWeight as s, RESTFontStyle as c, RESTFontDecoration as r } from "@arcgis/charts-spec";
import { merge as i } from "lodash-es";
import "d3-array";
import { a1 as y } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { b as S, m as h, s as g, c as m } from "../../chunks/chart-ui-utils2.js";
import { u as b } from "../../chunks/useT9n.js";
import { createRef as v, ref as C } from "lit-html/directives/ref.js";
import { LitElement as $, createEvent as p, safeClassMap as n } from "@arcgis/lumina";
import { css as x } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const E = {
  arial: "Arial",
  arialBlack: "Arial Black",
  bookman: "Bookman",
  candara: "Candara",
  courier: "Courier",
  courierNew: "Courier New",
  garamond: "Garamond",
  georgia: "Georgia",
  impact: "Impact",
  palatino: "Palatino",
  roboto: "Roboto",
  times: "Times",
  timesNewRoman: "Times New Roman",
  verdana: "Verdana"
}, o = {
  fontStyleContainer: "font-style-container",
  font: "font",
  numberInput: "number-input",
  inputLabel: "input-label"
}, w = x`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{overflow-y:auto}:host calcite-panel .font-style-container{display:flex;padding:0 1rem}:host calcite-panel .font-style-container .input-label{--calcite-label-margin-bottom: var(--arcgis-charts-intra-section-margin) !important}:host calcite-panel .font-style-container .number-input{margin-bottom:.5rem;display:flex}:host calcite-panel .font-style-container .number-input>div{width:100%}:host calcite-panel .font-style-container calcite-action,:host calcite-panel .font-style-container calcite-label{flex:1 1 0px;display:flex;width:0px}:host calcite-panel .font-style-container calcite-label{flex-grow:2}:host calcite-panel calcite-label.font{display:block;margin-top:1rem}`;
class I extends $ {
  constructor() {
    super(...arguments), this._messages = b(), this.fontSizeInputElement = v(), this.fontStyle = {
      type: u.TS
    }, this.arcgisChartsConfigFontStyleChange = p(), this.arcgisChartsConfigFontStyleClose = p();
  }
  static {
    this.properties = { messageOverrides: 0, fontStyle: 2, header: 1, open: 7, enableClose: 7 };
  }
  static {
    this.styles = w;
  }
  closePanel(t) {
    t.target.closed && this.enableClose === !0 && (this.open = !1, this.arcgisChartsConfigFontStyleClose.emit());
  }
  fontChange(t) {
    const f = t.target.selectedOption.value;
    if (f !== void 0) {
      const a = {
        family: f
      };
      this.isNewFontProperty("family", a) && (this.fontStyle = i(this.fontStyle, { font: a }), this.emitFontStyleEvent({ font: a }));
    }
  }
  fontSizeChange() {
    const t = this.fontSizeInputElement.value?.value;
    if (t !== void 0 && S(t, this.fontSizeInputElement.value?.min, this.fontSizeInputElement.value?.max)) {
      const e = {
        size: Number.parseInt(t)
      };
      this.isNewFontProperty("size", e) && (this.fontStyle = i(this.fontStyle, { font: e }), this.emitFontStyleEvent({ font: e })), this.fontSizeInputElement.value && h({
        inputElement: this.fontSizeInputElement.value,
        status: m.IDLE
      });
    } else this.fontSizeInputElement.value && h({
      inputElement: this.fontSizeInputElement.value,
      status: m.INVALID
    });
  }
  boldSelect() {
    let t = s.Bold;
    this.fontStyle?.font?.weight === t && (t = s.Normal);
    const e = { weight: t };
    this.fontStyle = i(this.fontStyle, { font: e }), this.fontStyle = { ...this.fontStyle }, this.emitFontStyleEvent({ font: e });
  }
  italicSelect() {
    let t = c.Italic;
    this.fontStyle?.font?.style === t && (t = c.Normal);
    const e = { style: t };
    this.fontStyle = i(this.fontStyle, { font: e }), this.fontStyle = { ...this.fontStyle }, this.emitFontStyleEvent({ font: e });
  }
  underlineSelect() {
    let t = r.Underline;
    this.fontStyle?.font?.decoration === t && (t = r.None);
    const e = { decoration: t };
    this.fontStyle = i(this.fontStyle, { font: e }), this.fontStyle = { ...this.fontStyle }, this.emitFontStyleEvent({ font: e });
  }
  colorChange(t) {
    const e = t.detail;
    this.fontStyle = i(this.fontStyle, { color: e }), this.emitFontStyleEvent({ color: e });
  }
  emitFontStyleEvent(t) {
    this.arcgisChartsConfigFontStyleChange.emit(t);
  }
  isNewFontProperty(t, e) {
    return this.fontStyle?.font?.[t] !== e[t];
  }
  renderFonts() {
    const t = Object.values(E).map((e) => l`<calcite-option .value=${e} .selected=${e === this.fontStyle?.font?.family || e === y().font?.family?.split(",")[0] && this.fontStyle?.font?.family === void 0}>${e}</calcite-option>`);
    return this.fontStyle?.font?.family === "" && t.push(l`<calcite-option value selected></calcite-option>`), t;
  }
  render() {
    return l`<calcite-panel .heading=${this.header ?? this._messages.header} .closed=${this.open === !1} .closable=${this.enableClose ?? !1} @calcitePanelClose=${this.closePanel}><div class=${n(o.fontStyleContainer)}><calcite-label class=${n(o.font)}>${this._messages.font}<calcite-select .label=${this._messages.font ?? ""} @calciteSelectChange=${this.fontChange}>${this.renderFonts()}</calcite-select></calcite-label></div><div class=${n(o.fontStyleContainer)}><calcite-label class=${n(o.inputLabel)}>${this._messages.size}<calcite-input class=${n(o.numberInput)} type=number min=6 max=40 step=1 .value=${g(this.fontStyle?.font?.size)} @calciteInputInput=${this.fontSizeChange} ${C(this.fontSizeInputElement)}></calcite-input></calcite-label><calcite-action appearance=transparent .text=${this._messages.bold ?? ""} @click=${this.boldSelect} scale=l .active=${this.fontStyle?.font?.weight === s.Bold}><calcite-icon scale=s icon=bold></calcite-icon></calcite-action><calcite-action appearance=transparent .text=${this._messages.italic ?? ""} @click=${this.italicSelect} scale=l .active=${this.fontStyle?.font?.style === c.Italic}><calcite-icon scale=s icon=italicize></calcite-icon></calcite-action><calcite-action appearance=transparent .text=${this._messages.underline ?? ""} @click=${this.underlineSelect} scale=l .active=${this.fontStyle?.font?.decoration === r.Underline}><calcite-icon scale=s icon=underline></calcite-icon></calcite-action></div><div class=${n(o.fontStyleContainer)}><arcgis-charts-config-colors .rgba=${this.fontStyle?.color ?? void 0} @colorSelect=${this.colorChange}></arcgis-charts-config-colors></div></calcite-panel>`;
  }
}
d("arcgis-charts-config-font-style", I);
export {
  I as ArcgisChartsConfigFontStyle
};
