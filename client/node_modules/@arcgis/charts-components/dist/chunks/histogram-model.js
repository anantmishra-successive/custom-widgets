import { WebChartTypes as e } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { aI as a } from "./interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { h as i } from "./data.js";
import { g as s, s as o, a as r, b as n, c as m, d as h, e as l, f as g, h as d, i as y, j as S, k as f, l as c, m as p, n as v, o as u, p as M, q as C, r as D, t as b, u as w, v as _, w as O, x as N, y as T, z as U } from "./histogram-data.js";
import { C as B, M as W, a as E } from "./model-with-y-guides.js";
import { M as F, a as x, b as H, c as L } from "./model-with-data-labels.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
class I extends B {
  constructor() {
    super(...arguments), this._chartType = e.HistogramSeries;
  }
  async setup(t) {
    await this.loadConfigFromLayer(t), this.resolveSetup();
  }
  // ---------------------------------------------------------------------------------------------
  // Data Props
  // ---------------------------------------------------------------------------------------------
  /**
   * Gets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
   * @returns {string}
   */
  getNumericField() {
    return s(this._config);
  }
  /**
   * Sets numeric field. This is the field used to create a histogram to visualize the frequency distribution of its values.
   * @param {string} numericField
   * @async **This method is `async` and must be awaited for the changes to take effect.**
   */
  async setNumericField(t) {
    await o(t, this._config, this.layerInfo), this.dispatchEvent(new CustomEvent("arcgisChartsModelDataChange")), this.emitConfigUpdate("setNumericField");
  }
  /**
   * Gets the number of bins used to create the histogram.
   * @returns {number}
   */
  getBinCount() {
    return r(this._config);
  }
  /**
   * Sets the number of bins used to create the histogram.
   * @param {number} binCount
   */
  setBinCount(t) {
    n(t, this._config), this.dispatchEvent(new CustomEvent("arcgisChartsModelDataChange")), this.emitConfigUpdate("setBinCount");
  }
  /**
   * Gets the fill symbol used for the bins in the histogram.
   * @returns {ISimpleFillSymbol}
   */
  getBinSymbol() {
    return m(this._config);
  }
  /**
   * Sets the fill symbol used for the bins in the histogram.
   * @param {ISimpleFillSymbol} symbol
   */
  setBinSymbol(t) {
    h(t, this._config), this.emitConfigUpdate("setBinSymbol");
  }
  /**
   * Gets the data transformation type used in the histogram.
   * @returns {WebChartDataTransformations}
   */
  getDataTransformationType() {
    return l(this._config);
  }
  /**
   * Sets the data transformation type used in the histogram.
   * @param {WebChartDataTransformations} dataTransformationType
   */
  setDataTransformationType(t) {
    g(t, this._config), this.dispatchEvent(new CustomEvent("arcgisChartsModelDataChange")), this.emitConfigUpdate("setDataTransformationType");
  }
  /**
   * Gets the line symbol used for the mean overlay in the histogram.
   * @returns {ISimpleLineSymbol}
   */
  getMeanSymbol() {
    return d(this._config);
  }
  /**
   * Sets the line symbol used for the mean overlay in the histogram.
   * @param {ISimpleLineSymbol} symbol
   */
  setMeanSymbol(t) {
    y(t, this._config), this.emitConfigUpdate("setMeanSymbol");
  }
  /**
   * Gets the line symbol used for the median overlay in the histogram.
   * @returns {ISimpleLineSymbol}
   */
  getMedianSymbol() {
    return S(this._config);
  }
  /**
   * Sets the line symbol used for the median overlay in the histogram.
   * @param {ISimpleLineSymbol} symbol
   */
  setMedianSymbol(t) {
    f(t, this._config), this.emitConfigUpdate("setMedianSymbol");
  }
  /**
   * Gets the line symbol used for the normal distribution overlay in the histogram.
   * @returns {ISimpleLineSymbol}
   */
  getNormalDistSymbol() {
    return c(this._config);
  }
  /**
   * Sets the line symbol used for the normal distribution overlay in the histogram.
   * @param {ISimpleLineSymbol} symbol
   */
  setNormalDistSymbol(t) {
    p(t, this._config), this.emitConfigUpdate("setNormalDistSymbol");
  }
  /**
   * Gets the line symbol used for the standard deviation overlay in the histogram.
   * @returns {ISimpleLineSymbol}
   */
  getStandardDevSymbol() {
    return v(this._config);
  }
  /**
   * Sets the line symbol used for the standard deviation overlay in the histogram.
   * @param {ISimpleLineSymbol} symbol
   */
  setStandardDevSymbol(t) {
    u(t, this._config), this.emitConfigUpdate("setStandardDevSymbol");
  }
  /**
   * Gets whether the normal distribution overlay is shown in the histogram.
   * @returns {boolean}
   */
  getShowNormalDistOverlay() {
    return M(this._config);
  }
  /**
   * Sets whether to show the normal distribution overlay for the histogram.
   * @param {boolean} show
   */
  setShowNormalDistOverlay(t) {
    C(t, this._config), this.emitConfigUpdate("setShowNormalDistOverlay");
  }
  /**
   * Gets whether the mean overlay is shown in the histogram.
   * @returns {boolean}
   */
  getShowMeanOverlay() {
    return D(this._config);
  }
  /**
   * Sets whether to show the mean overlay for the histogram.
   * @param {boolean} show
   */
  setShowMeanOverlay(t) {
    b(t, this._config), this.emitConfigUpdate("setShowMeanOverlay");
  }
  /**
   * Gets whether the median overlay is shown in the histogram.
   * @returns {boolean}
   */
  getShowMedianOverlay() {
    return w(this._config);
  }
  /**
   * Sets whether to show the median overlay for the histogram.
   * @param {boolean} show
   */
  setShowMedianOverlay(t) {
    _(t, this._config), this.emitConfigUpdate("setShowMedianOverlay");
  }
  /**
   * Gets whether the standard deviation overlay is shown in the histogram.
   * @returns {boolean}
   */
  getShowStandardDevOverlay() {
    return O(this._config);
  }
  /**
   * Sets whether to show the standard deviation overlay for the histogram.
   * @param {boolean} show
   */
  setShowStandardDevOverlay(t) {
    N(t, this._config), this.emitConfigUpdate("setShowStandardDevOverlay");
  }
  /**
   * Get the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
   */
  getSeriesOverlay() {
    return T(this._config);
  }
  /**
   * Set the chart overlays for the series. Histogram supports 4 overlays: **mean**, **median**, **standardDeviation** and **comparisonDistribution**.
   * @param overlays The overlays
   */
  setSeriesOverlays(t) {
    U(t, this._config), this.emitConfigUpdate("setSeriesOverlay");
  }
  // ---------------------------------------------------------------------------------------------
  // Protected methods
  // ---------------------------------------------------------------------------------------------
  async generateDefaultConfig() {
    return await a();
  }
}
i(I, [
  W,
  F,
  x,
  H,
  L,
  E
]);
export {
  I as HistogramModel
};
