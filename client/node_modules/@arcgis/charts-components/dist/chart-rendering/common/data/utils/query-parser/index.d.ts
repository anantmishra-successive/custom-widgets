import { TimeIntervalInfo, WebBoxPlot, WebChart, WebChartQuery } from '@arcgis/charts-spec';
import { QueryObject } from '../../../../../utils';
import { ChartOptions } from '../../../interfaces';
import { UniqueQuery } from './interfaces';
/**
 * Handles the limitation of features on the chart (when the chart limits are reached but the requested behavior is to render up to the limit).
 * See https://devtopia.esri.com/WebGIS/arcgis-charts/issues/5126
 * Temporal charts are handled differently in `fetchFinishedBinnedTemporalData()` as we can't predict beforehand how many time bins there will be on the chart.
 *
 * @param props.chartConfig The chart's config
 * @param props.uniqueQuery The web chart query
 * @param props.options The runtime chart's options
 */
export declare function addFeatureLimitation(props: {
    chartConfig: WebChart;
    uniqueQuery: WebChartQuery;
    options?: ChartOptions;
}): void;
/**
 * Function building a unique query based on the chart series config.
 *
 * @param props.chartConfig The chart config
 * @param props.queryObject The query object
 * @param props.queryConfig The config query
 * @param props.options Runtime options
 * @param props.timeIntervalInfo Time interval info.
 * @param props.setTimeBinningInfoWhenNotProvided indicator whether to set time binning info when not provided
 * @param props.fetchFullBoxPlotData Whether to fetch the full box plot data
 */
export declare function buildUniqueQuery(props: {
    chartConfig: WebBoxPlot | WebChart;
    queryObject?: QueryObject;
    queryConfig: WebChartQuery;
    options?: ChartOptions;
    timeIntervalInfo?: TimeIntervalInfo;
    setTimeBinningInfoWhenNotProvided?: boolean;
    fetchFullBoxPlotData?: boolean;
}): Promise<UniqueQuery>;
