import { c as M } from "../../chunks/runtime.js";
import { keyed as f } from "lit-html/directives/keyed.js";
import { WebChartDataTransformations as v, RESTSymbolType as k } from "@arcgis/charts-spec";
import { debounce as y } from "lodash-es";
import "d3-array";
import { c9 as x, $ as T, Z as L } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as V, c as N, P as B } from "../../chunks/popover-ui-utils.js";
import { H as l, c as i, d as r } from "../../chunks/interfaces2.js";
import { b as I, m as S, U as C, f as F, s as _, c as D, D as H } from "../../chunks/chart-ui-utils2.js";
import { d as K, s as A } from "../../chunks/store.js";
import { u as U } from "../../chunks/useT9n.js";
import { html as n } from "lit";
import { createRef as g, ref as m } from "lit-html/directives/ref.js";
import { LitElement as z, createEvent as u, safeStyleMap as P, safeClassMap as o } from "@arcgis/lumina";
import { css as j } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const s = {
  label: "label",
  row: "row",
  binCountContainer: "bin-count-container",
  iconSelect: "icon-select",
  sectionLabel: "section-label",
  binTextPadding: "bin-text-padding",
  histogramStatsList: "histogram-stats-list"
}, q = j`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}calcite-list-item{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor)}.label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.row{padding-top:1rem}.bin-count-container{display:flex;flex-wrap:wrap;padding:var(--arcgis-charts-config-margin-minor)}.bin-count-container>calcite-slider{flex-grow:10;min-width:50%}.bin-count-container>calcite-input{margin-bottom:.5rem;margin-top:var(--arcgis-charts-config-margin-minor);margin-left:var(--arcgis-charts-config-margin-minor);width:5rem}.section-label{display:flex;margin:var(--arcgis-charts-config-margin-major) var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.bin-text-padding{margin-left:var(--arcgis-charts-config-margin-minor)}.histogram-stats-list{pointer-events:none;margin-bottom:var(--arcgis-charts-config-margin-minor)}`;
class R extends z {
  constructor() {
    super(...arguments), this._messages = U(), this.numericalFieldSelectionElement = g(), this.transformationSelectionElement = g(), this.histogramPopover = null, this.binColorSectionElement = g(), this.binSliderElement = g(), this.binInputElement = g(), this.popoverHeading = "", this.onBinCountChange = y(() => {
      const e = this.binInputElement.value?.value;
      e !== void 0 && I(e, this.binInputElement.value?.min, this.binInputElement.value?.max) ? this.binCountChange(e) : this.binInputElement.value && S({
        inputElement: this.binInputElement.value,
        status: D.INVALID
      });
    }, C.DebounceTimer), this.onBinCountSliderChange = y(() => {
      this.binCountChange(this.binSliderElement.value?.value?.toString() ?? "");
    }, C.DebounceTimer), this.onNormalDistColorSelect = () => {
      this.onColorElementSelect(this.model.getNormalDistSymbol(), this._messages.normalDistStyle ?? "", this.normalDistOverlayElement);
    }, this.onMeanColorSelect = () => {
      this.onColorElementSelect(this.model.getMeanSymbol(), this._messages.meanStyle ?? "", this.meanOverlayElement);
    }, this.onMedianColorSelect = () => {
      this.onColorElementSelect(this.model.getMedianSymbol(), this._messages.medianStyle ?? "", this.medianOverlayElement);
    }, this.onStandardDevColorSelect = () => {
      this.onColorElementSelect(this.model.getStandardDevSymbol(), this._messages.standardDevStyle ?? "", this.standardDevOverlayElement);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.updateProps = async (e) => {
      try {
        if (e.detail !== null && e.detail !== void 0) {
          const { contentKind: t } = e.detail, { value: a } = e.detail;
          switch (K(A), t) {
            case l.transformation:
              this.model.setDataTransformationType(a ?? v.None);
              break;
            case l.numericFields:
              await this.model.setNumericField(a ?? "");
              break;
            default:
              break;
          }
        }
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
      this.removeHistogramDataPopover(), this.requestUpdate();
    }, this.updateSymbolProps = (e) => {
      if (this.selectedBinColorSymbol !== void 0)
        this.onBinColorChange(e);
      else
        switch (this.selectedOverlayKind) {
          case i.Mean:
            this.onMeanStyleChange(e);
            break;
          case i.Median:
            this.onMedianStyleChange(e);
            break;
          case i.StandardDev:
            this.onStandardDevStyleChange(e);
            break;
          case i.NormalDist:
            this.onNormalDistStyleChange(e);
            break;
        }
    }, this.popoverClose = () => {
      this.selectedOverlaySymbol = void 0, this.selectedBinColorSymbol = void 0, this.selectedNumericalField = void 0, this.selectedTransformationType = void 0, this.binColorSelected = !1, this.histogramPopover && (this.histogramPopover.open = !1);
    }, this.binColorSelected = !1, this.layerFieldsInfo = [], this.arcgisChartsConfigDataChangeError = u(), this.arcgisChartsConfigHistogramDataPopoverChange = u(), this.arcgisChartsConfigPopoverOpenChange = u();
  }
  static {
    this.properties = { binColorSelected: 16, selectedBinColorSymbol: 16, selectedOverlaySymbol: 16, selectedNumericalField: 16, selectedTransformationType: 16, messageOverrides: 0, model: 0, meanValue: 9, medianValue: 9, standardDevValue: 9, minValue: 9, maxValue: 9, sumValue: 9, nullsValue: 9, countValue: 9, layerFieldsInfo: 0, open: 7 };
  }
  static {
    this.styles = q;
  }
  set selectedBinColorSymbol(e) {
    this._selectedBinColorSymbol = e, this.histogramPopover && (this.histogramPopover.selectedBinColor = e);
  }
  get selectedBinColorSymbol() {
    return this._selectedBinColorSymbol;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeHistogramDataPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  removeHistogramDataPopover() {
    this.histogramPopover !== null && (this.histogramPopover.open = !1, this.histogramPopover = V(this.histogramPopover)), this.histogramPopoverChange(!1);
  }
  getDataTransformationLabel() {
    let e;
    switch (this.model.getDataTransformationType()) {
      case v.None:
        e = this._messages.none ?? "";
        break;
      case v.Log:
        e = this._messages.log ?? "";
        break;
      case v.Sqrt:
        e = this._messages.sqRt ?? "";
        break;
      default:
        e = this._messages.none ?? "";
        break;
    }
    return e;
  }
  getStatValue(e) {
    let t;
    switch (e) {
      case r.Min:
        t = this.minValue;
        break;
      case r.Max:
        t = this.maxValue;
        break;
      case r.Sum:
        t = this.sumValue;
        break;
      case r.Nulls:
        t = this.nullsValue;
        break;
      case r.Count:
        t = this.countValue !== void 0 && this.nullsValue !== void 0 ? this.countValue + this.nullsValue : Number.NaN;
        break;
      case r.CountExcludingNulls:
        t = this.countValue;
        break;
      case r.Mean:
        t = this.meanValue;
        break;
      case r.Median:
        t = this.medianValue;
        break;
      case r.StandardDev:
        t = this.standardDevValue;
        break;
      default:
        t = void 0;
        break;
    }
    return F(t, H);
  }
  binCountChange(e) {
    const t = Number.parseInt(e);
    this.model.getBinCount() !== t && (this.model.setBinCount(t), this.binInputElement.value && S({
      inputElement: this.binInputElement.value,
      status: D.IDLE
    }));
  }
  onColorElementSelect(e, t, a) {
    this.binColorSelected = a === void 0, e.type === k.SFS ? (this.selectedOverlaySymbol = void 0, this.selectedBinColorSymbol = e, this.contentKind = l.fillSymbol) : (this.selectedBinColorSymbol = void 0, this.selectedOverlaySymbol = e, this.overlaySectionElement = a, this.contentKind = l.lineSymbol), this.popoverHeading = t, this.setupPopover();
  }
  onNumericFieldSelect() {
    this.selectedNumericalField = this.model.getNumericField(), this.contentKind = l.numericFields, this.setupPopover();
  }
  onTransformationSelect() {
    this.selectedTransformationType = this.model.getDataTransformationType(), this.contentKind = l.transformation, this.setupPopover();
  }
  onBinColorSelect() {
    this.binColorSelected ? this.popoverClose() : this.onColorElementSelect(this.model.getBinSymbol(), this._messages.binColor ?? "");
  }
  onBinColorChange(e) {
    this.model.setColorMatch(!1), this.model.setBinSymbol(e.detail), this.selectedBinColorSymbol = e.detail;
  }
  onMeanStyleChange(e) {
    this.model.setMeanSymbol(e.detail);
  }
  onMedianStyleChange(e) {
    this.model.setMedianSymbol(e.detail);
  }
  onStandardDevStyleChange(e) {
    this.model.setStandardDevSymbol(e.detail);
  }
  onNormalDistStyleChange(e) {
    this.model.setNormalDistSymbol(e.detail);
  }
  onShowDataLabelsChange(e) {
    this.model.setDataLabelsVisibility(e.target.checked);
  }
  onOverlayListChange(e) {
    const t = e.target.selectedItems.map((p) => p.value), a = t.includes(i.Mean), c = t.includes(i.Median), h = t.includes(i.StandardDev), d = t.includes(i.NormalDist);
    this.meanOverlayVisible !== a && (this.model.setShowMeanOverlay(a), this.meanOverlayVisible = a), this.medianOverlayVisible !== c && (this.model.setShowMedianOverlay(c), this.medianOverlayVisible = c), this.standardDevOverlayVisible !== h && (this.model.setShowStandardDevOverlay(h), this.standardDevOverlayVisible = h), this.normalDistOverlayVisible !== d && (this.model.setShowNormalDistOverlay(d), this.normalDistOverlayVisible = d);
  }
  histogramPopoverChange(e) {
    this.arcgisChartsConfigHistogramDataPopoverChange.emit({
      open: e,
      element: this.histogramPopover
    });
  }
  setupPopover() {
    this.removeHistogramDataPopover();
    const e = {
      layerFieldsInfo: this.layerFieldsInfo,
      updateProps: this.updateProps,
      updateSymbolProps: this.updateSymbolProps,
      popoverClose: this.popoverClose,
      openChange: this.openChange
    };
    if (this.histogramPopover = N(B.HistogramDataPopover, e), this.histogramPopover !== void 0 && this.histogramPopover !== null) {
      switch (this.contentKind) {
        case l.transformation:
          this.histogramPopover.selectedTransformationType = this.selectedTransformationType, this.histogramPopover.referenceElement = this.transformationSelectionElement.value, this.histogramPopover.placement = "trailing", this.histogramPopover.selectedBinColor = void 0, this.histogramPopover.selectedOverlaySymbol = void 0, this.histogramPopover.selectedNumericField = void 0;
          break;
        case l.numericFields:
          this.histogramPopover.selectedNumericField = this.selectedNumericalField, this.histogramPopover.referenceElement = this.numericalFieldSelectionElement.value, this.histogramPopover.placement = "trailing", this.histogramPopover.selectedBinColor = void 0, this.histogramPopover.selectedOverlaySymbol = void 0, this.histogramPopover.selectedTransformationType = void 0;
          break;
        case l.fillSymbol:
          this.histogramPopover.referenceElement = this.binColorSectionElement.value, this.histogramPopover.selectedBinColor = this.selectedBinColorSymbol, this.histogramPopover.headingTitle = this.popoverHeading, this.histogramPopover.placement = "leading", this.histogramPopover.selectedOverlaySymbol = void 0, this.histogramPopover.selectedTransformationType = void 0, this.histogramPopover.selectedNumericField = void 0;
          break;
        case l.lineSymbol:
          this.selectedOverlayKind = this.overlaySectionElement?.value, this.histogramPopover.referenceElement = this.overlaySectionElement, this.histogramPopover.selectedOverlaySymbol = this.selectedOverlaySymbol, this.histogramPopover.headingTitle = this.popoverHeading, this.histogramPopover.placement = "leading", this.histogramPopover.selectedBinColor = void 0, this.histogramPopover.selectedTransformationType = void 0, this.histogramPopover.selectedNumericField = void 0;
          break;
      }
      this.histogramPopover.contentKind = this.contentKind, this.histogramPopover.open = !0, this.addPopover();
    }
  }
  addPopover() {
    this.histogramPopover !== void 0 && this.histogramPopover !== null && (document.body.contains(this.histogramPopover) || document.body.appendChild(this.histogramPopover));
  }
  renderFieldSelect() {
    return n`<arcgis-charts-config-field-select .label=${x(this.layerFieldsInfo, this.model.getNumericField())} @click=${this.onNumericFieldSelect} ${m(this.numericalFieldSelectionElement)}></arcgis-charts-config-field-select>`;
  }
  renderDataTransformationType() {
    return n`<arcgis-charts-config-field-select .label=${this.getDataTransformationLabel()} @click=${this.onTransformationSelect} ${m(this.transformationSelectionElement)}></arcgis-charts-config-field-select>`;
  }
  renderColorListItem(e) {
    const { textLabel: t, key: a, value: c, selected: h, ref: d, colorAction: p, color: $ } = e, [b, O, w, E] = [...$ ?? T()];
    return f(a, n`<calcite-list-item .label=${t ?? ""} .value=${c} .selected=${h} ${m(d ?? void 0)}><calcite-action text=color slot=actions-end appearance=transparent @click=${p}><calcite-icon icon=line-solid style=${P(b !== void 0 ? { color: `rgba(${b},${O},${w},${(E ?? 0) / 255})` } : {})}></calcite-icon></calcite-action></calcite-list-item>`);
  }
  renderBinColorElement() {
    const [e, t, a, c] = [...this.model.getBinSymbol()?.color ?? L(0)];
    return n`<calcite-list label selection-mode=single selection-appearance=border><calcite-list-item .label=${this._messages.binColor} value=selectTrendLine .selected=${this.binColorSelected} @click=${this.onBinColorSelect} ${m(this.binColorSectionElement)}><calcite-icon slot=content-end icon=square-f style=${P({ color: `rgba(${e},${t},${a},${c / 255})` })} class=${o(s.iconSelect)}></calcite-icon></calcite-list-item></calcite-list>`;
  }
  renderNormalDistOverlay() {
    return this.normalDistOverlayVisible = this.model.getShowNormalDistOverlay(), this.renderColorListItem({
      textLabel: this._messages.normalDist,
      color: this.model.getNormalDistSymbol()?.color,
      key: i.NormalDist,
      value: i.NormalDist,
      selected: this.model.getShowNormalDistOverlay(),
      ref: (e) => {
        this.normalDistOverlayElement = e;
      },
      colorAction: this.onNormalDistColorSelect
    });
  }
  renderMeanOverlay() {
    return this.meanOverlayVisible = this.model.getShowMeanOverlay(), this.renderColorListItem({
      textLabel: this._messages.mean,
      textDescription: this.meanValue,
      color: this.model.getMeanSymbol()?.color,
      key: i.Mean,
      value: i.Mean,
      selected: this.model.getShowMeanOverlay(),
      ref: (e) => {
        this.meanOverlayElement = e;
      },
      colorAction: this.onMeanColorSelect
    });
  }
  renderStandardDevOverlay() {
    return this.standardDevOverlayVisible = this.model.getShowStandardDevOverlay(), this.renderColorListItem({
      textLabel: this._messages.standardDev,
      textDescription: this.standardDevValue,
      color: this.model.getStandardDevSymbol()?.color,
      key: i.StandardDev,
      value: i.StandardDev,
      selected: this.model.getShowStandardDevOverlay(),
      ref: (e) => {
        this.standardDevOverlayElement = e;
      },
      colorAction: this.onStandardDevColorSelect
    });
  }
  renderMedianOverlay() {
    return this.medianOverlayVisible = this.model.getShowMedianOverlay(), this.renderColorListItem({
      textLabel: this._messages.median,
      textDescription: this.medianValue,
      color: this.model.getMedianSymbol()?.color,
      key: i.Median,
      value: i.Median,
      selected: this.model.getShowMedianOverlay(),
      ref: (e) => {
        this.medianOverlayElement = e;
      },
      colorAction: this.onMedianColorSelect
    });
  }
  renderOverlayList() {
    return n`<calcite-list label selection-mode=multiple @calciteListChange=${this.onOverlayListChange}>${this.renderNormalDistOverlay()}${this.renderMeanOverlay()}${this.renderMedianOverlay()}${this.renderStandardDevOverlay()}</calcite-list>`;
  }
  renderStatItem(e) {
    return f(e, n`<calcite-list-item .label=${this._messages[e]} .description=${this.getStatValue(e)} .value=${e}></calcite-list-item>`);
  }
  renderStats() {
    const e = Object.values(r);
    return n`<calcite-list label class=${o(s.histogramStatsList)}>${e.map((t) => this.renderStatItem(t))}</calcite-list>`;
  }
  renderShowDataLabels() {
    return n`<div class=${o(s.row)}><calcite-label class=${o(s.label)} layout=inline-space-between>${this._messages.showDataLabels}<calcite-switch .checked=${this.model.getDataLabelsVisibility()} @calciteSwitchChange=${this.onShowDataLabelsChange}></calcite-switch></calcite-label></div>`;
  }
  renderBinsSection() {
    return n`<div class=${o(s.binCountContainer)}><calcite-slider label-handles min=1 max=64 step=1 snap .value=${this.model.getBinCount()} @calciteSliderChange=${this.onBinCountSliderChange} ${m(this.binSliderElement)}></calcite-slider><calcite-input type=number min=1 max=64 step=1 .value=${_(this.model.getBinCount())} @calciteInputInput=${this.onBinCountChange} ${m(this.binInputElement)}></calcite-input></div>`;
  }
  render() {
    const e = this.renderFieldSelect(), t = this.renderDataTransformationType();
    return n`<div><div class=${o(s.sectionLabel)}>${this._messages.variables}</div><calcite-label class=${o(s.label)}>${this._messages.number}${e}</calcite-label><calcite-label class=${o(s.label)}>${this._messages.withTransformation}${t}</calcite-label><div class=${o(s.sectionLabel)}>${this._messages.bins}</div><p class=${o(s.binTextPadding)}>${this._messages.numberOfBins}</p>${this.renderBinsSection()}${this.renderBinColorElement()}<div class=${o(s.sectionLabel)}>${this._messages.overlays}</div>${this.renderOverlayList()}${this.renderShowDataLabels()}<div class=${o(s.sectionLabel)}>${this._messages.statistics}</div>${this.renderStats()}</div>`;
  }
}
M("arcgis-charts-config-histogram-data", R);
export {
  R as ArcgisChartsConfigHistogramData
};
