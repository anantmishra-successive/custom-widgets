import { Color, ISimpleLineSymbol, WebChart, WebChartPieChartGroupSlice, WebChartPieChartSlice, WebChartStatisticType } from '@arcgis/charts-spec';
import { ChartConfig, ChartTypes } from '../../utils';
import { ChartModel } from '../chart-model/chart-model';
import { ModelParams } from '../interfaces/chart-interfaces';
import { LayerInfo, ModelTypes, PieChartDataSortingKinds, PieChartSlicesDisplay, PieChartDataModes } from '../interfaces/common';
import { ModelWithColorMatch, ModelWithDataLabels, ModelWithTooltips } from '../mixins';
import { PieChartLegendModel } from './pie-chart-legend-model';
export declare class PieChartModel extends ChartModel {
    /**
     * Current configuration used for the pie chart
     */
    protected _config: ChartConfig<typeof ModelTypes.PieChart, WebChart>;
    protected _chartType: ChartTypes;
    /**
     * Protected property to hold the pie chart data mode (Category or Fields)
     *
     * `category` - The chart will use values from the category field to determine each slice.
     *
     * `fields` - The chart will use aggregated values from the numeric fields to determine each slice.
     *
     * @category Protected
     */
    protected _mode: PieChartDataModes;
    protected layerInfo: LayerInfo;
    /**
     * Array of hidden grouped slice ids
     * @category Private
     */
    private _groupedSliceIds;
    setup(params: ModelParams<ChartConfig<typeof ModelTypes.PieChart>>): Promise<void>;
    /**
     * Gets the category field for the pie chart.
     * @returns {string}
     */
    getCategory(): string;
    /**
     * Sets the category field for the pie chart.
     * @param {string} category The category field.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setCategory(category: string): Promise<void>;
    /**
     * Gets the numeric fields for the pie chart.
     * @returns {string[]}
     */
    getNumericFields(): string[];
    /**
     * Sets the numeric field or numeric fields array for the pie chart.
     * @param {string[]} numericFields The numeric field or numeric fields array.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setNumericFields(numericFields: string[] | string): Promise<void>;
    /**
     * Gets the aggregation type for the pie chart.
     * @returns {WebChartStatisticType}
     */
    getAggregationType(): WebChartStatisticType;
    /**
     * Sets the aggregation type for the pie chart.
     * @param {WebChartStatisticType} aggregationType The aggregation type. Must be one of the values allowed by `WebChartStatisticType`.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setAggregationType(aggregationType: WebChartStatisticType): Promise<void>;
    /**
     * Gets the sort order for the pie chart.
     * @returns {PieChartDataSortingKinds}
     */
    getSortOrder(): PieChartDataSortingKinds;
    /**
     * Sets the sort order for the pie chart.
     * @param {PieChartDataSortingKinds} sortOrder The sort order.
     */
    setSortOrder(sortOrder: PieChartDataSortingKinds, orderByList?: string[]): void;
    getOrderByList(): string[];
    /**
     * Sets the list of category's values for custom sort
     * @param {string[]} orderByList The list of category's values
     */
    setOrderByList(orderByList: string[]): void;
    /**
     * Gets the pie chart data mode (Category or Fields).
     *
     * `category` - The chart is using values from the category field to determine each slice.
     *
     * `fields` - The chart is using aggregated values from the numeric fields to determine each slice.
     *
     * @returns {PieChartDataModes}
     */
    getMode(): PieChartDataModes;
    /**
     * Sets the pie chart data mode (Category or Fields).
     *
     * `category` - The chart should use values from the category field to determine each slice.
     *
     * `fields` - The chart should use aggregated values from the numeric fields to determine each slice.
     *
     * @param {PieChartDataModes} mode The mode.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMode(mode: PieChartDataModes): void;
    /**
     * Gets the list of the category values for the chart.
     * @returns {string[]}
     */
    getCustomSortValues(): Promise<string[]>;
    /**
     * Moves the custom sort values in-place for the order by list in the config.
     *
     * NOTE: This method should be only used when the sort order is set to `customSort`.
     * @param {number} fromIndex The index to move the custom sort item from.
     * @param {number} toIndex The index to move the category item to.
     */
    moveCustomSortValuesInOrderByList(fromIndex: number, toIndex: number): void;
    /**
     * Gets the symbol for the ticks connecting the slices to the labels.
     * @returns {ISimpleLineSymbol | undefined}
     */
    getTicksSymbol(): ISimpleLineSymbol | undefined;
    /**
     * Sets the symbol for the ticks connecting the slices to the labels.
     * @param {ISimpleLineSymbol | undefined} lineSymbol The ticks symbol.
     */
    setTicksSymbol(lineSymbol: ISimpleLineSymbol | undefined): void;
    /**
     * Gets the array of slices for the pie chart.
     * @returns {WebChartPieChartSlice[] | undefined}
     */
    getSlices(): WebChartPieChartSlice[] | undefined;
    /**
     * Sets the array of slices for the pie chart.
     * @param {WebChartPieChartSlice[] | undefined} slices The slices array.
     */
    setSlices(slices: WebChartPieChartSlice[] | undefined): void;
    /**
     * Gets the array of grouped slice ids for the pie chart.
     * @returns {string[]}
     */
    getGroupedSliceIds(): string[];
    /**
     * Sets the array of grouped slice ids for the pie chart.
     * @param {string[]} groupedSliceIds The grouped slice ids array.
     */
    setGroupedSliceIds(groupedSliceIds: string[]): void;
    /**
     * Gets the slice grouping configuration for the pie chart.
     * @returns {WebChartPieChartGroupSlice | undefined}
     */
    getSliceGrouping(): WebChartPieChartGroupSlice | undefined;
    /**
     * Sets the slice grouping configuration for the pie chart.
     * @param {WebChartPieChartGroupSlice | undefined} sliceGrouping The slice grouping configuration.
     */
    setSliceGrouping(sliceGrouping: WebChartPieChartGroupSlice | undefined): void;
    /**
     * Gets the inner radius size for the pie chart.
     * @returns {number}
     */
    getInnerRadiusSize(): number;
    /**
     * Sets the inner radius size for the pie chart.
     * @param {number} size The inner radius size.
     */
    setInnerRadiusSize(size: number): void;
    /**
     * Gets the threshold below which slices will be grouped.
     * @returns {number}
     */
    getGroupingThreshold(): number;
    /**
     * Sets the threshold below which slices will be grouped.
     * @param {number} threshold The grouping threshold.
     */
    setGroupingThreshold(threshold: number): void;
    /**
     * Gets the character limit for the slice labels.
     * @returns {number | null}
     */
    getLabelCharacterLimit(): number | null;
    /**
     * Sets the character limit for the slice labels.
     * @param {number | null} limit The label character limit.
     */
    setLabelCharacterLimit(limit: number | null): void;
    /**
     * Gets the number of decimal places to display in the slice values.
     * @returns {number}
     */
    getDecimalPlaces(): number;
    /**
     * Sets the number of decimal places to display in the slice values.
     * @param {number} decimalPlaces The decimal places.
     */
    setDecimalPlaces(decimalPlaces: number): void;
    /**
     * Gets the display type for the pie chart slices. Specifies whether to display the slices as a percentage, value, or both.
     * @returns {PieChartSlicesDisplay}
     */
    getDisplayType(): PieChartSlicesDisplay;
    /**
     * Sets the display type for the pie chart slices. Specifies whether to display the slices as a percentage, value, or both.
     * @param {PieChartSlicesDisplay} displayType The display type.
     */
    setDisplayType(displayType: PieChartSlicesDisplay): void;
    protected generateDefaultConfig(): Promise<Omit<typeof this._config, "iLayer">>;
    /**
     * Gets the original name of the slice based on the slice index.
     * @returns {Date | number | string | null | undefined}
     */
    getOriginalSliceName(sliceIndex: number): Date | number | string | null | undefined;
    /**
     * Gets the name of the slice based on the slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {string | undefined}
     */
    getSliceName(sliceIndex: number): string | undefined;
    /**
     * Sets name of the slice based on the slice index.
     * @param {string} name The name for the slice.
     * @param {number} sliceIndex The index of the slice.
     */
    setSliceName(name: string, sliceIndex: number): void;
    /**
     * Gets the color of the slice based on the slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {Color | undefined}
     */
    getSliceColor(sliceIndex: number): Color | undefined;
    /**
     * Sets the color of the slice based on the slice index.
     * @param {Color | undefined} color The color for the slice.
     * @param {number} sliceIndex The index of the slice.
     */
    setSliceColor(color: Color | undefined, sliceIndex: number): void;
    /**
     * Gets the order of the slice array by returning an array of slice ids
     * @returns {string[] | undefined}
     */
    getOrderOfSlices(): string[] | undefined;
    /**
     * Sets the order of the slices array by providing an array of slice ids.
     * @param {string[]} order The order of the slices.
     */
    setOrderOfSlices(order: string[]): void;
    /**
     * Moves a series from one index in the series array to another.
     * @param {number} fromIndex Index to move the series from.
     * @param {number} toIndex Index to move the series to.
     */
    moveSeries(fromIndex: number, toIndex: number): void;
    /**
     * Gets the slice id for a given slice index. If the index is out of bounds, this function will return `undefined`.
     * @param {number} sliceIndex The index of the slice.
     * @returns {string | undefined}
     */
    getSliceId(sliceIndex: number): string | undefined;
    /**
     * Gets the slice index for a given slice id. If the `sliceId` is not found, this function will return `undefined`.
     * @param {string} sliceId The id of the slice.
     * @returns {number | undefined}
     */
    getSliceIndex(sliceId: string): number | undefined;
    /**
     * Gets the length of the slices array.
     * @returns {number}
     */
    getSlicesLength(): number;
    /**
     * Resets the slices styling to the default styling.
     */
    resetSlices(): void;
    /**
     * Returns whether the series styling is able to be reset.
     * @returns {boolean}
     */
    resetAvailable(): boolean;
    /**
     * Gets the visibility of the ticks.
     * @returns {boolean}
     */
    getTicksVisibility(): boolean;
    /**
     * Sets the visibility of the ticks.
     * @param visibility The visibility setting for the ticks.
     */
    setTicksVisibility(visibility: boolean): void;
    /**
     * Gets the start angle of the pie chart.
     * @returns {number | null | undefined}
     */
    getStartAngle(): number | null | undefined;
    /**
     * Sets the start angle for the pie chart.
     * @param angle The start angle for the pie chart.
     */
    setStartAngle(angle: number): void;
    /**
     * Gets the end angle of the pie chart.
     * @returns {number | null | undefined}
     */
    getEndAngle(): number | null | undefined;
    /**
     * Sets the end angle for the pie chart.
     * @param angle The end angle for the pie chart.
     */
    setEndAngle(angle: number): void;
    /**
     * Gets the display category value on tooltip setting from the chart config.
     * @returns {boolean}
     * @remarks If the setting is not found in the config, it will default to `true`.
     */
    getDisplayCategoryValueOnTooltip(): boolean;
    /**
     * Gets the display numeric value on tooltip setting from the chart config.
     * @returns {boolean}
     * @remarks If the setting is not found in the config, it will default to `true`.
     */
    getDisplayNumericValueOnTooltip(): boolean;
    /**
     * Sets the display category value on tooltip setting in the chart config.
     * @param display The boolean value to set the displayCategoryOnTooltip to
     */
    setDisplayCategoryOnTooltip(display: boolean): void;
    /**
     * Sets the display numeric value on tooltip setting in the chart config.
     * @param display The boolean value to set the displayNumericValueOnTooltip to
     */
    setDisplayNumericValueOnTooltip(display: boolean): void;
    /**
     * Gets the display percentage on tooltip setting from the chart config.
     * @returns {boolean}
     * @remarks If the setting is not found in the config, it will default to `true`.
     */
    getDisplayPercentageOnTooltip(): boolean;
    /**
     * Sets the display percentage on tooltip setting in the chart config.
     * @param display The boolean value to set the displayPercentageOnTooltip to
     */
    setDisplayPercentageOnTooltip(display: boolean): void;
    /**
     * Gets the prefix of the values of the slices.
     * @returns {string | undefined}
     */
    getValuePrefix(): string | undefined;
    /**
     * Sets the prefix for the values of the slices.
     * @param prefix The prefix for the values of the slices.
     */
    setValuePrefix(prefix: string): void;
    /**
     * Gets the suffix of the values of the slice.
     * @returns {string | undefined}
     */
    getValueSuffix(): string | undefined;
    /**
     * Sets the suffix for the values of the slices.
     * @param suffix The suffix for the values of the slices.
     */
    setValueSuffix(suffix: string): void;
    /**
     * Gets the prefix of the percentages of the slices.
     * @returns {string | undefined}
     */
    getPercentagePrefix(): string | undefined;
    /**
     * Sets the prefix for the percentages of the slices.
     * @param prefix The prefix for the percentages of the slices.
     */
    setPercentagePrefix(prefix: string): void;
    /**
     * Gets the suffix of the percentages of the slices.
     * @returns {string | undefined}
     */
    getPercentageSuffix(): string | undefined;
    /**
     * Sets the suffix for the percentages of the slices.
     * @param suffix The suffix for the percentages of the slices.
     */
    setPercentageSuffix(suffix: string): void;
    /**
     * Gets the offset for the data labels.
     * @returns {string | undefined}
     */
    getDataLabelsOffset(): number;
    /**
     * Sets the offset for the data labels.
     * @param offset The offset for the data labels.
     */
    setDataLabelsOffset(offset: number): void;
    /**
     * Gets the align data labels setting for the pie chart.
     * @returns {boolean | undefined}
     */
    getAlignDataLabels(): boolean | undefined;
    /**
     * Sets the align data labels setting for the pie chart.
     * @param align The align data labels setting for the pie chart.
     */
    setAlignDataLabels(align: boolean): void;
    /**
     * Gets the setting for placing the data labels inside of the slices.
     * @returns {boolean | undefined}
     */
    getDataLabelsInside(): boolean | undefined;
    /**
     * Sets the setting for placing the data labels inside of the slices.
     * @param inside Whether to place the data labels inside of the slices
     */
    setDataLabelsInside(inside: boolean): void;
    /**
     * Gets the optimize data labels overlapping setting for the pie chart.
     * @returns {boolean | undefined}
     */
    getOptimizeDataLabelsOverlapping(): boolean | undefined;
    /**
     * Sets the optimize data labels overlapping setting for the pie chart.
     * @param optimize The optimize data labels overlapping setting for the pie chart.
     */
    setOptimizeDataLabelsOverlapping(optimize: boolean): void;
}
export interface PieChartModel extends PieChartLegendModel, ModelWithTooltips, ModelWithColorMatch, ModelWithDataLabels {
}
