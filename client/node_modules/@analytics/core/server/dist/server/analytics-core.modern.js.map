{"version":3,"file":"analytics-core.modern.js","sources":["../../../src/vendor/redux/utils/defs.js","../../../src/vendor/redux/createStore.js","../../../src/vendor/redux/combineReducers.js","../../../src/vendor/redux/compose.js","../../../src/constants.js","../../../src/utils/internalConstants.js","../../../src/events.js","../../../src/middleware/initialize.js","../../../src/modules/user.js","../../../src/middleware/identify.js","../../../src/utils/callback-stack.js","../../../src/utils/waitForReady.js","../../../src/utils/heartbeat.js","../../../src/middleware/plugins/engine.js","../../../src/middleware/plugins/index.js","../../../src/utils/filterDisabled.js","../../../src/middleware/storage.js","../../../src/middleware/dynamic.js","../../../src/modules/plugins.js","../../../src/utils/serialize.js","../../../src/modules/track.js","../../../src/modules/queue.js","../../../src/modules/page.js","../../../src/modules/context.js","../../../src/utils/getOSName/node.js","../../../src/utils/debug.js","../../../src/utils/ensureArray.js","../../../src/utils/enrichMeta.js","../../../src/utils/getCallback.js","../../../src/utils/timestamp.js","../../../src/index.js","../../../src/vendor/redux/applyMiddleware.js"],"sourcesContent":["export const FUNC = 'function'\nexport const UNDEF = 'undefined'\nexport const REDUCER = 'reducer'\n\nconst base = '@@redux/'\nexport const ACTION_INIT = base + 'INIT'\nexport const ACTION_TEST = base + Math.random().toString(36)\n","import { isObject } from '@analytics/type-utils'\nimport { FUNC, UNDEF, ACTION_INIT, REDUCER } from './utils/defs.js'\n\n// eslint-disable-next-line\nconst $$observable = /* #__PURE__ */ (() => (typeof Symbol === FUNC && Symbol.observable) || '@@observable')();\n\n/*\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nconst msg = ' != ' + FUNC\nexport default function createStore(reducer, preloadedState, enhancer) {\n  if (typeof preloadedState === FUNC && typeof enhancer === UNDEF) {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n\n  if (typeof enhancer !== UNDEF) {\n    if (typeof enhancer !== FUNC) {\n      throw new Error('enhancer' + msg)\n    }\n\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n\n  if (typeof reducer !== FUNC) {\n    throw new Error(REDUCER + msg)\n  }\n\n  let currentReducer = reducer\n  let currentState = preloadedState\n  let currentListeners = []\n  let nextListeners = currentListeners\n  let isDispatching = false\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice()\n    }\n  }\n\n  /*\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState\n  }\n\n  /*\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== FUNC) {\n      throw new Error('Listener' + msg)\n    }\n\n    let isSubscribed = true\n\n    ensureCanMutateNextListeners()\n    nextListeners.push(listener)\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return\n      }\n\n      isSubscribed = false\n\n      ensureCanMutateNextListeners()\n      const index = nextListeners.indexOf(listener)\n      nextListeners.splice(index, 1)\n    }\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    /* // add default info to actions... \n    console.log('dispatch before', _action)\n    const action = {\n      ..._action,\n      ...{\n        action: {\n          ..._action.action,\n          ...{ customInfo: 'yoooo'} \n        }\n      }\n    }\n    console.log('dispatch after', action)\n    /** */\n\n    if (!isObject(action)) {\n      throw new Error('Act != obj')\n    }\n\n    if (typeof action.type === UNDEF) {\n      throw new Error('ActType ' + UNDEF)\n    }\n\n    if (isDispatching) {\n      throw new Error('Dispatch in ' + REDUCER)\n    }\n\n    try {\n      isDispatching = true\n      currentState = currentReducer(currentState, action)\n    } finally {\n      isDispatching = false\n    }\n\n    const listeners = currentListeners = nextListeners\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i]\n      listener()\n    }\n\n    return action\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== FUNC) {\n      throw new Error('next ' + REDUCER + msg)\n    }\n\n    currentReducer = nextReducer\n    dispatch({ type: ACTION_INIT })\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe\n    return {\n      /*\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Observer != obj')\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState())\n          }\n        }\n\n        observeState()\n        const unsubscribe = outerSubscribe(observeState)\n        return { unsubscribe }\n      },\n\n      [$$observable]() {\n        return this\n      }\n    }\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ACTION_INIT })\n\n  return {\n    dispatch,\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  }\n}\n","import { isObject } from '@analytics/type-utils'\nimport warning from './utils/warning.js'\nimport { FUNC, UNDEF, REDUCER, ACTION_INIT, ACTION_TEST } from './utils/defs.js'\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  const actionType = action && action.type\n  const actionName = (actionType && actionType.toString()) || '?'\n\n  return ('action ' + actionName + REDUCER + ' ' + key + ' returns ' + UNDEF)\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  const reducerKeys = Object.keys(reducers)\n  const argumentName = action && action.type === ACTION_INIT ? 'preloadedState arg passed to createStore' : 'previous state received by ' + REDUCER\n\n  if (reducerKeys.length === 0) {\n    return ('Store has no valid reducers')\n  }\n\n  if (!isObject(inputState)) {\n    return (\n      `The ${argumentName} has unexpected type of \"` +\n      ({}).toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] +\n      `\". Expected argument to be an object with the following ` +\n      `keys: \"${reducerKeys.join('\", \"')}\"`\n    )\n  }\n\n  const unexpectedKeys = Object.keys(inputState).filter(key =>\n    !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]\n  )\n\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true\n  })\n\n  if (unexpectedKeys.length > 0) {\n    return (\n      `Unexpected keys ${unexpectedKeys.join('\", \"')} in ${argumentName}. ` +\n      `Expected to find 1 of the known reducer keys instead: ${reducerKeys.join('\", \"')}`\n    )\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key]\n    const initialState = reducer(undefined, { type: ACTION_INIT })\n    if (\n      typeof initialState === UNDEF ||\n      typeof reducer(undefined, { type: ACTION_TEST }) === UNDEF\n    ) {\n      throw new Error(REDUCER + ' ' + key + ' ' + UNDEF)\n    }\n  })\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nexport default function combineReducers(reducers) {\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i]\n\n    if (NODE_ENV !== 'production') {\n      if (typeof reducers[key] === UNDEF) {\n        warning(`No reducer > ${key}`)\n      }\n    }\n\n    if (typeof reducers[key] === FUNC) {\n      finalReducers[key] = reducers[key]\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers)\n\n  let unexpectedKeyCache\n  if (NODE_ENV !== 'production') {\n    unexpectedKeyCache = {}\n  }\n\n  let shapeAssertionError\n  try {\n    assertReducerShape(finalReducers)\n  } catch (e) {\n    shapeAssertionError = e\n  }\n\n  return function combination(state = {}, action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError\n    }\n\n    if (NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache)\n      if (warningMessage) {\n        warning(warningMessage)\n      }\n    }\n\n    let hasChanged = false\n    const nextState = {}\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i]\n      const reducer = finalReducers[key]\n      const previousStateForKey = state[key]\n      const nextStateForKey = reducer(previousStateForKey, action)\n      if (typeof nextStateForKey === UNDEF) {\n        const errorMessage = getUndefinedStateErrorMessage(key, action)\n        throw new Error(errorMessage)\n      }\n      nextState[key] = nextStateForKey\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n    }\n    return hasChanged ? nextState : state\n  }\n}\n","/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n","/**\n * Core Analytic constants. These are exposed for third party plugins & listeners\n * @typedef {Object} constants\n * @property {ANON_ID} ANON_ID - Anonymous visitor Id localstorage key\n * @property {USER_ID} USER_ID - Visitor Id localstorage key\n * @property {USER_TRAITS} USER_TRAITS - Visitor traits localstorage key\n */\nimport { PREFIX } from '@analytics/type-utils'\n\n\n/**\n * Anonymous visitor Id localstorage key\n * @typedef {String} ANON_ID\n */\nexport const ANON_ID = PREFIX + 'anon_id' // __anon_id\n/**\n * Visitor Id localstorage key\n * @typedef {String} USER_ID\n */\nexport const USER_ID = PREFIX + 'user_id' // __user_id\n/**\n * Visitor traits localstorage key\n * @typedef {String} USER_TRAITS\n */\nexport const USER_TRAITS = PREFIX + 'user_traits' // __user_traits\n","\nexport const LIB_NAME = 'analytics'\n\nexport const ID = 'userId'\n\nexport const ANONID = 'anonymousId'\n\nexport const ERROR_URL = 'https://lytics.dev/errors/'","/* Core Analytic Events */\n\nexport const coreEvents = [\n  /**\n   * `bootstrap` - Fires when analytics library starts up.\n   * This is the first event fired. '.on/once' listeners are not allowed on bootstrap\n   * Plugins can attach logic to this event\n   */\n  'bootstrap',\n  /**\n   * `params` - Fires when analytics parses URL parameters\n   */\n  'params',\n  /**\n   * `campaign` - Fires if params contain \"utm\" parameters\n   */\n  'campaign',\n  /**\n   * `initializeStart` - Fires before 'initialize', allows for plugins to cancel loading of other plugins\n   */\n  'initializeStart',\n  /**\n   * `initialize` - Fires when analytics loads plugins\n   */\n  'initialize',\n  /**\n   * `initializeEnd` - Fires after initialize, allows for plugins to run logic after initialization methods run\n   */\n  'initializeEnd',\n  /**\n   * `ready` - Fires when all analytic providers are fully loaded. This waits for 'initialize' and 'loaded' to return true\n   */\n  'ready',\n  /**\n   * `resetStart` - Fires if analytic.reset() is called.\n   * Use this event to cancel reset based on a specific condition\n   */\n  'resetStart',\n  /**\n   * `reset` - Fires if analytic.reset() is called.\n   * Use this event to run custom cleanup logic (if needed)\n   */\n  'reset',\n  /**\n   * `resetEnd` - Fires after analytic.reset() is called.\n   * Use this event to run a callback after user data is reset\n   */\n  'resetEnd',\n  /******************\n   * Page Events\n   ******************/\n  /**\n   * `pageStart` - Fires before 'page' events fire.\n   *  This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'pageStart',\n  /**\n   * `page` - Core analytics hook for page views.\n   *  If your plugin or integration tracks page views, this is the event to fire on.\n   */\n  'page',\n  /**\n   * `pageEnd` - Fires after all registered 'page' methods fire.\n   */\n  'pageEnd',\n  /**\n   * `pageAborted` - Fires if 'page' call is cancelled by a plugin\n   */\n  'pageAborted',\n  /****************\n   * Track Events\n   ***************/\n  /**\n   * `trackStart` - Called before the 'track' events fires.\n   *  This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'trackStart',\n  /**\n   * `track` - Core analytics hook for event tracking.\n   *  If your plugin or integration tracks custom events, this is the event to fire on.\n   */\n  'track',\n  /**\n   * `trackEnd` - Fires after all registered 'track' events fire from plugins.\n   */\n  'trackEnd',\n  /**\n   * `trackAborted` - Fires if 'track' call is cancelled by a plugin\n   */\n  'trackAborted',\n  /******************\n   * Identify Events\n   ******************/\n  /**\n   * `identifyStart` - Called before the 'identify' events fires.\n   * This allows for dynamic page view cancellation based on current state of user or options passed in.\n   */\n  'identifyStart',\n  /**\n   * `identify` - Core analytics hook for user identification.\n   *  If your plugin or integration identifies users or user traits, this is the event to fire on.\n   */\n  'identify',\n  /**\n   * `identifyEnd` - Fires after all registered 'identify' events fire from plugins.\n   */\n  'identifyEnd',\n  /**\n   * `identifyAborted` - Fires if 'track' call is cancelled by a plugin\n   */\n  'identifyAborted',\n  /**\n   * `userIdChanged` - Fires when a user id is updated\n   */\n  'userIdChanged',\n  /******************\n   * Plugin Events\n   ******************/\n  /**\n   * `registerPlugins` - Fires when analytics is registering plugins\n   */\n  'registerPlugins',\n  /**\n   * `enablePlugin` - Fires when 'analytics.plugins.enable()' is called\n   */\n  'enablePlugin',\n  /**\n   * `disablePlugin` - Fires when 'analytics.plugins.disable()' is called\n   */\n  'disablePlugin',\n  /*\n   * `loadPlugin` - Fires when 'analytics.loadPlugin()' is called\n   */\n  // 'loadPlugin',\n  /******************\n   * Browser activity events\n   ******************/\n  /**\n   * `online` - Fires when browser network goes online.\n   * This fires only when coming back online from an offline state.\n   */\n  'online',\n  /**\n   * `offline` - Fires when browser network goes offline.\n   */\n  'offline',\n  /******************\n   * Storage events\n   ******************/\n  /**\n   * `setItemStart` - Fires when analytics.storage.setItem is initialized.\n   * This event gives plugins the ability to intercept keys & values and alter them before they are persisted.\n   */\n  'setItemStart',\n  /**\n   * `setItem` - Fires when analytics.storage.setItem is called.\n   * This event gives plugins the ability to intercept keys & values and alter them before they are persisted.\n   */\n  'setItem',\n  /**\n   * `setItemEnd` - Fires when setItem storage is complete.\n   */\n  'setItemEnd',\n  /**\n   * `setItemAborted` - Fires when setItem storage is cancelled by a plugin.\n   */\n  'setItemAborted',\n  /**\n   * `removeItemStart` - Fires when analytics.storage.removeItem is initialized.\n   * This event gives plugins the ability to intercept removeItem calls and abort / alter them.\n   */\n  'removeItemStart',\n  /**\n   * `removeItem` - Fires when analytics.storage.removeItem is called.\n   * This event gives plugins the ability to intercept removeItem calls and abort / alter them.\n   */\n  'removeItem',\n  /**\n   * `removeItemEnd` - Fires when removeItem storage is complete.\n   */\n  'removeItemEnd',\n  /**\n   * `removeItemAborted` - Fires when removeItem storage is cancelled by a plugin.\n   */\n  'removeItemAborted',\n]\n\n/* Keys on a plugin that are not considered events */\nexport const nonEvents = ['name', 'EVENTS', 'config', 'loaded']\n\nconst pluginEvents = {\n  registerPluginType: (name) => `registerPlugin:${name}`,\n  pluginReadyType: (name) => `ready:${name}`,\n}\n\nconst EVENTS = coreEvents.reduce((acc, curr) => {\n  acc[curr] = curr\n  return acc\n}, pluginEvents)\n\nexport default EVENTS\n\nexport function isReservedAction(type) {\n  return coreEvents.includes(type)\n}\n","/* eslint-disable camelcase */\nimport EVENTS from '../events.js'\nimport { ANON_ID, USER_ID, USER_TRAITS } from '../constants.js'\n\nconst utmRegex = /^utm_/\nconst propRegex = /^an_prop_/\nconst traitRegex = /^an_trait_/\n\n// Middleware runs during EVENTS.initialize\nexport default function initializeMiddleware(instance) {\n  const { setItem } = instance.storage\n  return store => next => action => {\n    /* Handle bootstrap event */\n    if (action.type === EVENTS.bootstrap) {\n      const { params, user, persistedUser, initialUser } = action\n      const isKnownId = persistedUser.userId === user.userId\n      /* 1. Set anonymous ID */\n      if (persistedUser.anonymousId !== user.anonymousId) {\n        setItem(ANON_ID, user.anonymousId)\n      }\n      /* 2. Set userId */\n      if (!isKnownId) {\n        setItem(USER_ID, user.userId)\n      }\n      /* 3. Set traits if they are different */\n      if (initialUser.traits) {\n         setItem(USER_TRAITS, {\n          ...(isKnownId && persistedUser.traits) ? persistedUser.traits : {},\n          ...initialUser.traits\n        })\n        /* TODO multi user setup\n        setItem(`${USER_TRAITS}.${user.userId}`, {\n          ...(isKnownId) ? existingTraits : {},\n          ...initialUser.traits\n        })\n        */\n      }\n      /* 4. Parse url params */\n      const paramsArray = Object.keys(action.params)\n      if (paramsArray.length) {\n        const { an_uid, an_event } = params\n        const groupedParams = paramsArray.reduce((acc, key) => {\n          // match utm params & dclid (display) & gclid (cpc)\n          if (key.match(utmRegex) || key.match(/^(d|g)clid/)) {\n            const cleanName = key.replace(utmRegex, '')\n            const keyName = (cleanName === 'campaign') ? 'name' : cleanName\n            acc.campaign[keyName] = params[key]\n          }\n          if (key.match(propRegex)) {\n            acc.props[key.replace(propRegex, '')] = params[key]\n          }\n          if (key.match(traitRegex)) {\n            acc.traits[key.replace(traitRegex, '')] = params[key]\n          }\n          return acc\n        }, {\n          campaign: {},\n          props: {},\n          traits: {}\n        })\n\n        store.dispatch({\n          type: EVENTS.params,\n          raw: params,\n          ...groupedParams,\n          ...(an_uid ? { userId: an_uid } : {}),\n        })\n\n        /* If userId set, call identify */\n        if (an_uid) {\n          // timeout to debounce and make sure integration is registered. Todo refactor\n          setTimeout(() => instance.identify(an_uid, groupedParams.traits), 0)\n        }\n\n        /* If tracking event set, call track */\n        if (an_event) {\n          // timeout to debounce and make sure integration is registered. Todo refactor\n          setTimeout(() => instance.track(an_event, groupedParams.props), 0)\n        }\n\n        // if url has utm params\n        if (Object.keys(groupedParams.campaign).length) {\n          store.dispatch({\n            type: EVENTS.campaign,\n            campaign: groupedParams.campaign\n          })\n        }\n      }\n    }\n    return next(action)\n  }\n}\n","import { get } from '@analytics/global-storage-utils'\nimport { isObject, PREFIX } from '@analytics/type-utils'\nimport { ANON_ID, USER_ID, USER_TRAITS } from '../constants.js'\nimport EVENTS from '../events.js'\n\n/* user reducer */\nexport default function userReducer(storage) {\n  return function user(state = {}, action = {}) {\n\n    if (action.type === EVENTS.setItemEnd) {\n      // Set anonymousId if changed by storage.setItem\n      if (action.key === ANON_ID) {\n        return { ...state, ...{ anonymousId: action.value }}\n      }\n      // Set userId if changed by storage.setItem\n      if (action.key === USER_ID) {\n        return { ...state, ...{ userId: action.value }}\n      }\n    }\n\n    switch (action.type) {\n      case EVENTS.identify:\n        return Object.assign({}, state, {\n          userId: action.userId,\n          traits: {\n            ...state.traits,\n            ...action.traits\n          }\n        })\n      case EVENTS.reset:\n        // Side effect to fix race condition in Node. TODO refactor\n        // This is from default storage.removeItem: (key) => globalContext[key] = undefined\n        [ USER_ID, ANON_ID, USER_TRAITS ].forEach((key) => {\n          // sync storage, not instance.storage\n          storage.removeItem(key)\n        })\n        return Object.assign({}, state, {\n          userId: null,\n          // TODO reset anon id automatically?\n          anonymousId: null,\n          traits: {},\n        })\n      default:\n        return state\n    }\n  }\n}\n\nexport function getPersistedUserData(storage) {\n  return {\n    userId: storage.getItem(USER_ID),\n    anonymousId: storage.getItem(ANON_ID),\n    traits: storage.getItem(USER_TRAITS)\n  }\n}\n\nexport const tempKey = (key) => PREFIX + 'TEMP' + PREFIX + key\n\nexport function getUserPropFunc(storage) {\n  return function getUserProp(key, instance, payload) {\n    /* 1. Try current state */\n    const currentId = instance.getState('user')[key]\n    if (currentId) {\n      /*\n      console.log(`from state ${key}`, currentId)\n      /** */\n      return currentId\n    }\n\n    /* 2. Try event payload */\n    if (payload && isObject(payload) && payload[key]) {\n      /*\n      console.log(`from payload ${key}`, payload[key])\n      /** */\n      return payload[key]\n    }\n\n    /* 3. Try persisted data */\n    const persistedInfo = getPersistedUserData(storage)[key]\n    if (persistedInfo) {\n      /*\n      console.log(`from persistedInfo ${key}`, persistedInfo)\n      /** */\n      return persistedInfo\n    }\n\n    /* 4. Else, try to get in memory placeholder. TODO watch this for future issues */\n    return get(tempKey(key)) || null\n  }\n}\n","import { uuid } from 'analytics-utils'\nimport { remove } from '@analytics/global-storage-utils'\nimport { tempKey } from '../modules/user.js'\nimport { USER_ID, USER_TRAITS, ANON_ID } from '../constants.js'\nimport { ID, ANONID } from '../utils/internalConstants.js'\nimport EVENTS from '../events.js'\n\nexport default function identifyMiddleware(instance) {\n  const { setItem, removeItem, getItem } = instance.storage\n  return store => next => action => {\n    const { userId, traits, options } = action\n    /* Reset user id and traits */\n    if (action.type === EVENTS.reset) {\n      // Remove stored data\n      [ USER_ID, USER_TRAITS, ANON_ID ].forEach((key) => {\n        // Fires async removeItem dispatch\n        removeItem(key)\n      });\n      [ ID, ANONID, 'traits' ].forEach((key) => {\n        // Remove from global context\n        remove(tempKey(key))\n      })\n    }\n\n    if (action.type === EVENTS.identify) {\n      /* If no anon id. Set it! */\n      if (!getItem(ANON_ID)) {\n        setItem(ANON_ID, uuid())\n      }\n\n      const currentId = getItem(USER_ID)\n      const currentTraits = getItem(USER_TRAITS) || {}\n\n      if (currentId && (currentId !== userId)) {\n        store.dispatch({\n          type: EVENTS.userIdChanged,\n          old: {\n            userId: currentId,\n            traits: currentTraits,\n          },\n          new: {\n            userId,\n            traits\n          },\n          options: options,\n        })\n      }\n\n      /* Save user id */\n      if (userId) {\n        setItem(USER_ID, userId)\n      }\n\n      /* Save user traits */\n      if (traits) {\n        setItem(USER_TRAITS, {\n          ...currentTraits,\n          ...traits\n        })\n      }\n    }\n    return next(action)\n  }\n}\n","import { isFunction } from '@analytics/type-utils'\n\n// Stack to temporarily hold deferred promises/callbacks\nconst stack = {}\n\nfunction runCallback(id, payload) {\n  if (stack[id] && isFunction(stack[id])) {\n    // console.log(`run ${id}`)\n    stack[id](payload)\n    delete stack[id]\n  }\n}\n\nexport { stack, runCallback }","/**\n * Wait until a given analytics provider is ready.\n * @param  {Object} data - passthrough resolve data\n * @param  {Function} predicate - function that resolves true\n * @param  {Number} timeout - max wait time\n * @return {Promise}\n */\nexport default function waitForReady(data, predicate, timeout) {\n  return new Promise((resolve, reject) => {\n    if (predicate()) {\n      return resolve(data)\n    }\n    // Timeout. Add to queue\n    if (timeout < 1) {\n      return reject({ ...data, queue: true }) // eslint-disable-line\n    }\n    // Else recursive retry\n    return pause(10).then(_ => {\n      return waitForReady(data, predicate, timeout - 10).then(resolve, reject)\n    })\n  })\n}\n\nfunction pause(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { isFunction, isObject } from '@analytics/type-utils'\nimport { ID, ANONID } from './internalConstants.js'\n\nfunction abort(reason) {\n  return { abort: reason }\n}\n\nexport function processQueue(store, getPlugins, instance) {\n  const abortedCalls = {}\n  const pluginMethods = getPlugins()\n  const { plugins, context, queue, user } = store.getState()\n  const isOnline = !context.offline\n  /* If network connection found and there is items in queue, process them all */\n  if (isOnline && queue && queue.actions && queue.actions.length) {\n    const pipeline = queue.actions.reduce((acc, item, index) => {\n      const isLoaded = plugins[item.plugin].loaded\n      if (isLoaded) {\n        acc.process.push(item)\n        acc.processIndex.push(index)\n      } else {\n        acc.requeue.push(item)\n        acc.requeueIndex.push(index)\n      }\n      return acc\n    }, {\n      processIndex: [],\n      process: [],\n      requeue: [],\n      requeueIndex: []\n    })\n\n    if (pipeline.processIndex && pipeline.processIndex.length) {\n      pipeline.processIndex.forEach((i) => {\n        const processAction = queue.actions[i]\n        // console.log('RePROCESS THIS>', processAction)\n        // Call methods directly right now\n        const currentPlugin = processAction.plugin\n        const currentMethod = processAction.payload.type\n        const method = pluginMethods[currentPlugin][currentMethod]\n        if (method && isFunction(method)) {\n          /* enrich queued payload with userId / anon id if missing */\n          /* TODO hoist enrich into where action queued? */\n          // console.log('before', processAction.payload)\n          const enrichedPayload = enrich(processAction.payload, user)\n          // console.log('user.userId', user.userId)\n          // console.log('user.anonymousId', user.anonymousId)\n          // console.log('after enrich', enrichedPayload)\n          let retVal\n          const isAborted = abortedCalls[enrichedPayload.meta.rid]\n          /* if not aborted call method */\n          if (!isAborted) {\n            // TODO make async\n            retVal = method({\n              payload: enrichedPayload,\n              config: plugins[currentPlugin].config,\n              instance,\n              abort\n            })\n            // If aborted, cancel the downstream calls\n            if (retVal && isObject(retVal) && retVal.abort) {\n              abortedCalls[enrichedPayload.meta.rid] = true\n              return\n            }\n          }\n\n          /* Then redispatch for .on listeners / other middleware */\n          if (!isAborted) {\n            const pluginEvent = `${currentMethod}:${currentPlugin}`\n            store.dispatch({\n              ...enrichedPayload,\n              type: pluginEvent,\n              /* Internal data for analytics engine */\n              _: {\n                called: pluginEvent,\n                from: 'queueDrain'\n              }\n            })\n          }\n        }\n      })\n\n      /* Removed processed actions */\n      const reQueueActions = queue.actions.filter((value, index) => {\n        // note !~ === return pipeline.processIndex.indexOf(index) === -1\n        return !~pipeline.processIndex.indexOf(index)\n      })\n\n      /* Set queue actions. TODO refactor to non mutatable or move out of redux */\n      queue.actions = reQueueActions\n\n      /*\n      if (!reQueueActions.length) {\n        console.log('Queue clears')\n        console.log('abortedCalls', abortedCalls)\n      }\n      /** */\n    }\n  }\n}\n\n/* Heartbeat retries queued events */\nexport default function heartBeat(store, getPlugins, instance) {\n  // 3e3 === 3000 ms\n  return setInterval(() => processQueue(store, getPlugins, instance), 3e3)\n}\n\n// Assign userId && anonymousId values if present in payload but null\nfunction enrich(payload = {}, user = {}) {\n  return [ ID, ANONID ].reduce((acc, key) => {\n    if (payload.hasOwnProperty(key) && user[key] && (user[key] !== payload[key])) {\n      // console.log(`${key} stale update with ${user[key]}`)\n      acc[key] = user[key]\n    }\n    return acc\n  }, payload)\n}\n","import EVENTS from '../../events.js'\nimport fitlerDisabledPlugins from '../../utils/filterDisabled.js'\nimport { isFunction, isObject, isString } from '@analytics/type-utils'\nimport { runCallback } from '../../utils/callback-stack.js'\n\nconst endsWithStartRegex = /Start$/\nconst bootstrapRegex = /^bootstrap/\nconst readyRegex = /^ready/\n\nexport default async function (action, getPlugins, instance, store, eventsInfo) {\n  const pluginObject = isFunction(getPlugins) ? getPlugins() : getPlugins\n  const originalType = action.type\n  const updatedType = originalType.replace(endsWithStartRegex, '')\n\n  /* If action already dispatched exit early. This makes it so plugin methods are not fired twice. */\n  if (action._ && action._.called) {\n    // console.log('Already called', action._.called)\n    return action\n  }\n\n  const state = instance.getState()\n  /* Remove plugins that are disabled by options or by settings */\n  let activePlugins = fitlerDisabledPlugins(pluginObject, state.plugins, action.options)\n\n  /* If analytics.plugin.enable calls do special behavior */\n  if (originalType === EVENTS.initializeStart && action.fromEnable) {\n    // Return list of all enabled plugins that have NOT been initialized yet\n    activePlugins = Object.keys(state.plugins).filter((name) => {\n      const info = state.plugins[name]\n      return action.plugins.includes(name) && !info.initialized\n    }).map((name) => pluginObject[name])\n  }\n  // console.log(`engine activePlugins ${action.type}`, activePlugins)\n\n  const allActivePluginKeys = activePlugins.map((p) => p.name)\n  // console.log('allActivePluginKeys', allActivePluginKeys)\n  const allMatches = getAllMatchingCalls(originalType, activePlugins, pluginObject)\n  // console.log('allMatches', allMatches)\n\n  /* @TODO cache matches and purge on enable/disable/add plugin */\n\n  /**\n   * Process all 'actionBefore' hooks\n   * Example:\n   *  This is processes 'pageStart' methods from plugins and update the event to send through the chain\n   */\n  const actionBefore = await processEvent({\n    action: action,\n    data: {\n      exact: allMatches.before,\n      namespaced: allMatches.beforeNS\n    },\n    state: state,\n    allPlugins: pluginObject,\n    allMatches,\n    instance,\n    store,\n    EVENTS: eventsInfo\n  })\n  // console.log('____ actionBefore out', actionBefore)\n\n  /* Abort if ‘eventBefore’ returns abort data */\n  if (shouldAbortAll(actionBefore, allActivePluginKeys.length)) {\n    return actionBefore\n  }\n\n  /* Filter over the plugin method calls and remove aborted plugin by name */\n  // const activeAndNonAbortedCalls = activePlugins.filter((plugin) => {\n  //   if (shouldAbort(actionBefore, plugin.name)) return false\n  //   return true\n  // })\n  // console.log(`activeAndNonAbortedCalls ${action.type}`, activeAndNonAbortedCalls)\n\n  let actionDuring\n  if (originalType === updatedType) {\n    /* If type the same don't double process */\n    actionDuring = actionBefore\n  } else {\n    /**\n     * Process all 'action' hooks\n     * Example: This is process 'page' methods from plugins and update the event to send through\n     */\n    actionDuring = await processEvent({\n      action: {\n        ...actionBefore,\n        type: updatedType\n      },\n      data: {\n        exact: allMatches.during,\n        namespaced: allMatches.duringNS\n      },\n      state: state,\n      allPlugins: pluginObject,\n      allMatches,\n      instance,\n      store,\n      EVENTS: eventsInfo\n    })\n  }\n  // console.log('____ actionDuring', actionDuring)\n\n  /**\n   * Process all 'actionEnd' hooks\n   * Example:\n   *  This is process 'pageEnd' methods from plugins and update the event to send through\n   */\n  // Only trigger `eventTypeEnd` if originalAction has Start ending.\n  if (originalType.match(endsWithStartRegex)) {\n    const afterName = `${updatedType}End`\n    const actionAfter = await processEvent({\n      action: {\n        ...actionDuring,\n        type: afterName\n      },\n      data: {\n        exact: allMatches.after,\n        namespaced: allMatches.afterNS\n      },\n      state: state,\n      allPlugins: pluginObject,\n      allMatches,\n      instance,\n      store,\n      EVENTS: eventsInfo\n    })\n    // console.log('____ actionAfter', actionAfter)\n\n    /* Fire callback if supplied */\n    if (actionAfter.meta && actionAfter.meta.hasCallback) {\n      /*\n      console.log('End of engine action has callback')\n      console.log(actionAfter.meta)\n      console.log('stack', stack)\n      /** */\n\n      // @TODO figure out exact args calls and .on will get\n      runCallback(actionAfter.meta.rid, { payload: actionAfter })\n    }\n  }\n\n  return actionBefore\n}\n\n/**\n * Async reduce over matched plugin methods\n * Fires plugin functions\n */\nasync function processEvent({\n  data,\n  action,\n  instance,\n  state,\n  allPlugins,\n  allMatches,\n  store,\n  EVENTS\n}) {\n  const { plugins, context } = state\n  const method = action.type\n  const isStartEvent = method.match(endsWithStartRegex)\n  // console.log(`data ${method}`, data)\n  // console.log(`data allMatches ${method}`, allMatches)\n  let abortable = data.exact.map((x) => {\n    return x.pluginName\n  })\n\n  /* If abort is called from xyzStart */\n  if (isStartEvent) {\n    abortable = allMatches.during.map((x) => {\n      return x.pluginName\n    })\n  }\n\n  /* make args for functions to concume */\n  const makeArgs = argumentFactory(instance, abortable)\n  // console.log('makeArgs', makeArgs)\n\n  /* Check if plugin loaded, if not mark action for queue */\n  const queueData = data.exact.reduce((acc, thing) => {\n    const { pluginName, methodName } = thing\n    let addToQueue = false\n    // Queue actions if plugin not loaded except for initialize and reset\n    if (!methodName.match(/^initialize/) && !methodName.match(/^reset/)) {\n      addToQueue = !plugins[pluginName].loaded\n    }\n    /* If offline and its a core method. Add to queue */\n    if (context.offline && (methodName.match(/^(page|track|identify)/))) {\n      addToQueue = true\n    }\n    acc[`${pluginName}`] = addToQueue\n    return acc\n  }, {})\n\n  /* generate plugin specific payloads */\n  const payloads = await data.exact.reduce(async (scoped, curr, i) => {\n    const { pluginName } = curr\n    const curScope = await scoped\n    if (data.namespaced && data.namespaced[pluginName]) {\n      const scopedPayload = await data.namespaced[pluginName].reduce(async (acc, p, count) => {\n        // await value\n        const curScopeData = await acc\n        if (!p.method || !isFunction(p.method)) {\n          return curScopeData\n        }\n\n        /* Make sure plugins don’t call themselves */\n        validateMethod(p.methodName, p.pluginName)\n\n        function genAbort(currentAct, pname, otherPlug) {\n          return function (reason, plugins) {\n            const callsite = otherPlug || pname\n            // console.log(`__abort msg: ${reason}`)\n            // console.log(`__abort ${pname}`)\n            // console.log(`__abort xxx: ${plugins}`)\n            // console.log(`__abort otherPlug`, otherPlug)\n            return {\n              ...currentAct,\n              abort: {\n                reason: reason,\n                plugins: plugins || [pname],\n                caller: method,\n                from: callsite\n              }\n            }\n          }\n        }\n\n        const val = await p.method({\n          payload: curScopeData,\n          instance,\n          abort: genAbort(curScopeData, pluginName, p.pluginName),\n          config: getConfig(p.pluginName, plugins, allPlugins),\n          plugins: plugins\n        })\n        const returnValue = isObject(val) ? val : {}\n        return Promise.resolve({\n          ...curScopeData,\n          ...returnValue\n        })\n      }, Promise.resolve(action))\n\n      /* Set scoped payload */\n      curScope[pluginName] = scopedPayload\n    } else {\n      /* Set payload as default action */\n      curScope[pluginName] = action\n    }\n    return Promise.resolve(curScope)\n  }, Promise.resolve({}))\n  // console.log(`aaa scoped payloads ${action.type}`, payloads)\n\n  // Then call the normal methods with scoped payload\n  const resolvedAction = await data.exact.reduce(async (promise, curr, i) => {\n    const lastLoop = data.exact.length === (i + 1)\n    const { pluginName } = curr\n    const currentPlugin = allPlugins[pluginName]\n    const currentActionValue = await promise\n\n    let payloadValue = (payloads[pluginName]) ? payloads[pluginName] : {}\n    /* If eventStart, allow for value merging */\n    if (isStartEvent) {\n      payloadValue = currentActionValue\n    }\n\n    if (shouldAbort(payloadValue, pluginName)) {\n      // console.log(`> Abort from payload specific \"${pluginName}\" abort value`, payloadValue)\n      abortDispatch({\n        data: payloadValue,\n        method,\n        instance,\n        pluginName,\n        store\n      })\n      return Promise.resolve(currentActionValue)\n    }\n    if (shouldAbort(currentActionValue, pluginName)) {\n      // console.log(`> Abort from ${method} abort value`, currentActionValue)\n      if (lastLoop) {\n        abortDispatch({\n          data: currentActionValue,\n          method,\n          instance,\n          // pluginName,\n          store\n        })\n      }\n      return Promise.resolve(currentActionValue)\n    }\n\n    if (queueData.hasOwnProperty(pluginName) && queueData[pluginName] === true) {\n      // console.log('Queue this instead', pluginName)\n      store.dispatch({\n        type: `queue`,\n        plugin: pluginName,\n        payload: payloadValue,\n        /* Internal data for analytics engine */\n        _: {\n          called: `queue`,\n          from: 'queueMechanism' // for debugging\n        }\n      })\n      return Promise.resolve(currentActionValue)\n    }\n    /*\n    const checkForLoaded = () => {\n      const p = instance.getState('plugins')\n      return p[currentPlugin.name].loaded\n    }\n    // const p = instance.getState('plugins')\n    console.log(`loaded \"${currentPlugin.name}\" > ${method}:`, p[currentPlugin.name].loaded)\n    // await waitForReady(currentPlugin, checkForLoaded, 10000).then((d) => {\n    //   console.log(`Loaded ${method}`, currentPlugin.name)\n    // }).catch((e) => {\n    //   console.log(`Error ${method} ${currentPlugin.name}`, e)\n    //   // TODO dispatch failure\n    // })\n    */\n\n    // @TODO figure out if we want queuing semantics\n\n    const funcArgs = makeArgs(payloads[pluginName], allPlugins[pluginName])\n\n    // console.log(`funcArgs ${method} ${pluginName}`, funcArgs)\n\n    /* Run the plugin function */\n    const val = await currentPlugin[method]({\n      // currentPlugin: pluginName,\n      abort: funcArgs.abort,\n      // Send in original action value or scope payload\n      payload: payloadValue,\n      instance,\n      config: getConfig(pluginName, plugins, allPlugins),\n      plugins: plugins\n    })\n\n    const returnValue = isObject(val) ? val : {}\n    const merged = {\n      ...currentActionValue,\n      ...returnValue\n    }\n\n    const scopedPayload = payloads[pluginName] // || currentActionValue\n    if (shouldAbort(scopedPayload, pluginName)) {\n      // console.log(`>> HANDLE abort ${method} ${pluginName}`)\n      abortDispatch({\n        data: scopedPayload,\n        method,\n        instance,\n        pluginName,\n        store\n      })\n    } else {\n      const nameSpaceEvent = `${method}:${pluginName}`\n      const actionDepth = (nameSpaceEvent.match(/:/g) || []).length\n      if (actionDepth < 2 && !method.match(bootstrapRegex) && !method.match(readyRegex)) {\n        const updatedPayload = (isStartEvent) ? merged : payloadValue\n        // Dispatched for `.on('xyz') listeners.\n        instance.dispatch({\n          ...updatedPayload,\n          type: nameSpaceEvent,\n          _: {\n            called: nameSpaceEvent,\n            from: 'submethod'\n          }\n        })\n      }\n    }\n    // console.log('merged', merged)\n    return Promise.resolve(merged)\n  }, Promise.resolve(action))\n\n  // Dispatch End. Make sure actions don't get double dispatched. EG userIdChanged\n  if (!method.match(endsWithStartRegex) &&\n      !method.match(/^registerPlugin/) &&\n      // !method.match(/^disablePlugin/) &&\n      // !method.match(/^enablePlugin/) &&\n      !method.match(readyRegex) &&\n      !method.match(bootstrapRegex) &&\n      !method.match(/^params/) &&\n      !method.match(/^userIdChanged/)\n  ) {\n    if (EVENTS.plugins.includes(method)) {\n      // console.log(`Dont dispatch for ${method}`, resolvedAction)\n      // return resolvedAction\n    }\n    /*\n      Verify this original action setup.\n      It's intended to keep actions from double dispatching themselves\n    */\n    if (resolvedAction._ && resolvedAction._.originalAction === method) {\n      // console.log(`Dont dispatch for ${method}`, resolvedAction)\n      return resolvedAction\n    }\n\n    let endAction = {\n      ...resolvedAction,\n      ...{\n        _: {\n          originalAction: resolvedAction.type,\n          called: resolvedAction.type,\n          from: 'engineEnd'\n        }\n      }\n    }\n\n    /* If all plugins are aborted, dispatch xAborted */\n    if (shouldAbortAll(resolvedAction, data.exact.length) && !method.match(/End$/)) {\n      endAction = {\n        ...endAction,\n        ...{\n          type: resolvedAction.type + 'Aborted',\n        }\n      }\n    }\n\n    store.dispatch(endAction)\n  }\n\n  return resolvedAction\n}\n\nfunction abortDispatch({ data, method, instance, pluginName, store }) {\n  const postFix = (pluginName) ? ':' + pluginName : ''\n  const abortEvent = method + 'Aborted' + postFix\n  store.dispatch({\n    ...data,\n    type: abortEvent,\n    _: {\n      called: abortEvent,\n      from: 'abort'\n    }\n  })\n}\n\nfunction getConfig(name, pluginState, allPlugins) {\n  const pluginData = pluginState[name] || allPlugins[name]\n  if (pluginData && pluginData.config) {\n    return pluginData.config\n  }\n  return {}\n}\n\nfunction getPluginFunctions(methodName, plugins) {\n  return plugins.reduce((arr, plugin) => {\n    return (!plugin[methodName]) ? arr : arr.concat({\n      methodName: methodName,\n      pluginName: plugin.name,\n      method: plugin[methodName],\n    })\n  }, [])\n}\n\nfunction formatMethod(type) {\n  return type.replace(endsWithStartRegex, '')\n}\n\n/**\n * Return array of event names\n * @param  {String} eventType - original event type\n * @param  {String} namespace - optional namespace postfix\n * @return {array} - type, method, end\n */\nfunction getEventNames(eventType, namespace) {\n  const method = formatMethod(eventType)\n  const postFix = (namespace) ? `:${namespace}` : ''\n  // `typeStart:pluginName`\n  const type = `${eventType}${postFix}`\n  // `type:pluginName`\n  const methodName = `${method}${postFix}`\n  // `typeEnd:pluginName`\n  const end = `${method}End${postFix}`\n  return [ type, methodName, end ]\n}\n\n/* Collect all calls for a given event in the system */\nfunction getAllMatchingCalls(eventType, activePlugins, allPlugins) {\n  const eventNames = getEventNames(eventType)\n  // console.log('eventNames', eventNames)\n  // 'eventStart', 'event', & `eventEnd`\n  const core = eventNames.map((word) => {\n    return getPluginFunctions(word, activePlugins)\n  })\n  // Gather nameSpaced Events\n  return activePlugins.reduce((acc, plugin) => {\n    const { name } = plugin\n    const nameSpacedEvents = getEventNames(eventType, name)\n    // console.log('eventNames namespaced', nameSpacedEvents)\n    const [ beforeFuncs, duringFuncs, afterFuncs ] = nameSpacedEvents.map((word) => {\n      return getPluginFunctions(word, activePlugins)\n    })\n\n    if (beforeFuncs.length) {\n      acc.beforeNS[name] = beforeFuncs\n    }\n    if (duringFuncs.length) {\n      acc.duringNS[name] = duringFuncs\n    }\n    if (afterFuncs.length) {\n      acc.afterNS[name] = afterFuncs\n    }\n    return acc\n  }, {\n    before: core[0],\n    beforeNS: {},\n    during: core[1],\n    duringNS: {},\n    after: core[2],\n    afterNS: {}\n  })\n}\n\nfunction shouldAbort({ abort }, pluginName) {\n  if (!abort) return false\n  if (abort === true) return true\n  return includes(abort, pluginName) || (abort && includes(abort.plugins, pluginName))\n}\n\nfunction shouldAbortAll({ abort }, pluginsCount) {\n  if (!abort) return false\n  if (abort === true || isString(abort)) return true\n  const { plugins } = abort\n  return (isArray(abort) && (abort.length === pluginsCount)) || (isArray(plugins) && (plugins.length === pluginsCount))\n}\n\nfunction isArray(arr) {\n  return Array.isArray(arr)\n}\n\nfunction includes(arr, name) {\n  if (!arr || !isArray(arr)) return false\n  return arr.includes(name)\n}\n\n/**\n * Generate arguments to pass to plugin methods\n * @param  {Object} instance - analytics instance\n * @param  {array} abortablePlugins - plugins that can be cancelled by caller\n * @return {*} function to inject plugin params\n */\nfunction argumentFactory(instance, abortablePlugins) {\n  // console.log('abortablePlugins', abortablePlugins)\n  return function (action, plugin, otherPlugin) {\n    const { config, name } = plugin\n    let method = `${name}.${action.type}`\n    if (otherPlugin) {\n      method = otherPlugin.event\n    }\n\n    const abortF = (action.type.match(endsWithStartRegex))\n      ? abortFunction(name, method, abortablePlugins, otherPlugin, action)\n      : notAbortableError(action, method)\n\n    return {\n      /* self: plugin, for future maybe */\n      // clone objects to avoid reassign\n      payload: formatPayload(action),\n      instance: instance,\n      config: config || {},\n      abort: abortF\n    }\n  }\n}\n\nfunction abortFunction(pluginName, method, abortablePlugins, otherPlugin, action) {\n  return function (reason, plugins) {\n    const caller = (otherPlugin) ? otherPlugin.name : pluginName\n    let pluginsToAbort = (plugins && isArray(plugins)) ? plugins : abortablePlugins\n    if (otherPlugin) {\n      pluginsToAbort = (plugins && isArray(plugins)) ? plugins : [pluginName]\n      if (!pluginsToAbort.includes(pluginName) || pluginsToAbort.length !== 1) {\n        throw new Error(`Method ${method} can only abort ${pluginName} plugin. ${JSON.stringify(pluginsToAbort)} input valid`)\n      }\n    }\n    return {\n      ...action, // 🔥 todo verify this merge is ok\n      abort: {\n        reason: reason,\n        plugins: pluginsToAbort,\n        caller: method,\n        _: caller\n      }\n    }\n  }\n}\n\nfunction notAbortableError(action, method) {\n  return () => {\n    throw new Error(action.type + ' action not cancellable. Remove abort in ' + method)\n  }\n}\n\n/**\n * Verify plugin is not calling itself with whatever:myPluginName self refs\n */\nfunction validateMethod(actionName, pluginName) {\n  const text = getNameSpacedAction(actionName)\n  const methodCallMatchesPluginNamespace = text && (text.name === pluginName)\n  if (methodCallMatchesPluginNamespace) {\n    const sub = getNameSpacedAction(text.method)\n    const subText = (sub) ? 'or ' + sub.method : ''\n    throw new Error([ pluginName + ' plugin is calling method ' + actionName,\n      'Plugins cant call self',\n      `Use ${text.method} ${subText} in ${pluginName} plugin insteadof ${actionName}`]\n      .join('\\n')\n    )\n  }\n}\n\nfunction getNameSpacedAction(event) {\n  const split = event.match(/(.*):(.*)/)\n  if (!split) {\n    return false\n  }\n  return {\n    method: split[1],\n    name: split[2],\n  }\n}\n\nfunction formatPayload(action) {\n  return Object.keys(action).reduce((acc, key) => {\n    // redact type from { payload }\n    if (key === 'type') {\n      return acc\n    }\n    if (isObject(action[key])) {\n      acc[key] = Object.assign({}, action[key])\n    } else {\n      acc[key] = action[key]\n    }\n    return acc\n  }, {})\n}\n\n/*\nfunction getMatchingMethods(eventType, activePlugins) {\n  const exact = getPluginFunctions(eventType, activePlugins)\n  // console.log('exact', exact)\n  // Gather nameSpaced Events\n  return activePlugins.reduce((acc, plugin) => {\n    const { name } = plugin\n    const clean = getPluginFunctions(`${eventType}:${name}`, activePlugins)\n    if (clean.length) {\n      acc.namespaced[name] = clean\n    }\n    return acc\n  }, {\n    exact: exact,\n    namespaced: {}\n  })\n}\n*/\n","import EVENTS, { nonEvents } from '../../events.js'\nimport { runCallback, stack } from '../../utils/callback-stack.js'\nimport waitForReady from '../../utils/waitForReady.js'\nimport { processQueue } from '../../utils/heartbeat.js'\nimport runPlugins from './engine.js'\n\nexport default function pluginMiddleware(instance, getPlugins, systemEvents) {\n  const isReady = {}\n  return store => next => async action => {\n    const { type, abort, plugins } = action\n    let updatedAction = action\n\n    if (abort) {\n      return next(action)\n    }\n\n    /* Analytics.plugins.enable called, we need to init the plugins */\n    if (type === EVENTS.enablePlugin) {\n      store.dispatch({\n        type: EVENTS.initializeStart,\n        plugins: plugins,\n        disabled: [],\n        fromEnable: true,\n        meta: action.meta\n      })\n    }\n    \n    if (type === EVENTS.disablePlugin) {\n      // If cached callback, resolve promise/run callback. debounced to fix race condition\n      setTimeout(() => runCallback(action.meta.rid, { payload: action }), 0)\n    }\n\n    /* @TODO implement\n    if (type === EVENTS.loadPlugin) {\n      // Rerun initialize calls in plugins\n      const allPlugins = getPlugins()\n      const pluginsToLoad = Object.keys(allPlugins).filter((name) => {\n        return plugins.includes(name)\n      }).reduce((acc, curr) => {\n        acc[curr] = allPlugins[curr]\n        return acc\n      }, {})\n      const initializeAction = {\n        type: EVENTS.initializeStart,\n        plugins: plugins\n      }\n      const updated = await runPlugins(initializeAction, pluginsToLoad, instance, store, systemEvents)\n      return next(updated)\n    }\n    */\n\n    //  || type.match(/^initializeAbort:/)\n    if (type === EVENTS.initializeEnd) {\n      const allPlugins = getPlugins()\n      const pluginsArray = Object.keys(allPlugins)\n      const allRegisteredPlugins = pluginsArray.filter((name) => {\n        return plugins.includes(name)\n      }).map((name) => {\n        return allPlugins[name]\n      })\n      let completed = []\n      let failed = []\n      let disabled = action.disabled\n      // console.log('allRegisteredPlugins', allRegisteredPlugins)\n      const waitForPluginsToLoad = allRegisteredPlugins.map((plugin) => {\n        const { loaded, name, config } = plugin\n        const loadedFn = () => loaded({ config }) // @TODO add in more to api to match other funcs?\n        /* Plugins will abort trying to load after 10 seconds. 1e4 === 10000 MS */\n        return waitForReady(plugin, loadedFn, 1e4).then((d) => {\n          if (!isReady[name]) {\n            // only dispatch namespaced rdy once\n            store.dispatch({\n              type: EVENTS.pluginReadyType(name), // `ready:${name}`\n              name: name,\n              events: Object.keys(plugin).filter((name) => {\n                return !nonEvents.includes(name)\n              })\n            })\n            isReady[name] = true\n          }\n          completed = completed.concat(name)\n\n          return plugin\n          // It's loaded! run the command\n        }).catch((e) => {\n          // Timeout Add to queue\n          // console.log('Error generic waitForReady. Push this to queue', e)\n          if (e instanceof Error) {\n            throw new Error(e)\n          }\n          failed = failed.concat(e.name)\n          // Failed to fire, add to queue\n          return e\n        })\n      })\n\n      Promise.all(waitForPluginsToLoad).then((calls) => {\n        // setTimeout to ensure runs after 'page'\n        const payload = {\n          plugins: completed,\n          failed: failed,\n          disabled: disabled\n        }\n        setTimeout(() => {\n          if (pluginsArray.length === (waitForPluginsToLoad.length + disabled.length)) {\n            store.dispatch({\n              ...{ type: EVENTS.ready },\n              ...payload,\n              \n            })\n          }\n        }, 0)\n      })\n    }\n\n    /* New plugin system */\n    if (type !== EVENTS.bootstrap) {\n      if (/^ready:([^:]*)$/.test(type)) {\n        // Immediately flush queue\n        setTimeout(() => processQueue(store, getPlugins, instance), 0)\n      }\n      const updated = await runPlugins(action, getPlugins, instance, store, systemEvents)\n      return next(updated)\n    }\n\n    return next(updatedAction)\n  }\n}\n","import { isBoolean } from '@analytics/type-utils'\n\nexport default function fitlerDisabledPlugins(allPlugins, settings = {}, options = {}) {\n  return Object.keys(allPlugins).filter((name) => {\n    const fromCallOptions = options.plugins || {}\n    // If enabled/disabled by options. Override settings\n    if (isBoolean(fromCallOptions[name])) {\n      return fromCallOptions[name]\n    }\n    // If all: false disable everything unless true explicitly set\n    if (fromCallOptions.all === false) {\n      return false\n    }\n    // else use state.plugin settings\n    if (settings[name] && settings[name].enabled === false) {\n      return false\n    }\n    return true\n  }).map((name) => allPlugins[name])\n}\n","import EVENTS from '../events.js'\n\nexport default function storageMiddleware(storage) {\n  return store => next => action => {\n    const { type, key, value, options } = action\n    if (type === EVENTS.setItem || type === EVENTS.removeItem) {\n      if (action.abort) {\n        return next(action)\n      }\n      // Run storage set or remove\n      if (type === EVENTS.setItem) {\n        storage.setItem(key, value, options)\n      } else {\n        storage.removeItem(key, options)\n      }\n    }\n    return next(action)\n  }\n}\n\n/*\n  Todo: emit events for keys we care about\n  window.addEventListener('storage', (event) => console.log(event));\n*/\n","import { compose } from '../vendor/redux/index.js'\n\n/* Class to fix dynamic middlewares from conflicting with each other\nif more than one analytic instance is active */\nexport default class DynamicMiddleware {\n  before = []\n  after = []\n  addMiddleware = (middlewares, position) => {\n    this[position] = this[position].concat(middlewares)\n  }\n  removeMiddleware = (middleware, position) => {\n    const index = this[position].findIndex(d => d === middleware)\n    if (index === -1) return\n\n    this[position] = [\n      ...this[position].slice(0, index),\n      ...this[position].slice(index + 1),\n    ]\n  }\n  /* Not currently in use\n  resetMiddlewares = (position) => {\n    if (!position) {\n      this.before = []\n      this.after = []\n    } else {\n      this[position] = []\n    }\n  }\n  */\n  dynamicMiddlewares = (position) => {\n    return store => next => action => {\n      const middlewareAPI = {\n        getState: store.getState,\n        dispatch: (act) => store.dispatch(act),\n      }\n      const chain = this[position].map(middleware => middleware(middlewareAPI))\n      return compose(...chain)(next)(action)\n    }\n  }\n}\n","// Integrations Reducer. Follows ducks pattern http://bit.ly/2DnERMc\nimport EVENTS from '../events.js'\n\nexport default function createReducer(getPlugins) {\n  return function plugins(state = {}, action) {\n    let newState = {}\n    if (action.type === 'initialize:aborted') {\n      return state\n    }\n    if (/^registerPlugin:([^:]*)$/.test(action.type)) {\n      const name = getNameFromEventType(action.type, 'registerPlugin')\n      const plugin = getPlugins()[name]\n      if (!plugin || !name) {\n        return state\n      }\n      const isEnabled = action.enabled\n      const config = plugin.config\n      newState[name] = {\n        enabled: isEnabled,\n        /* if no initialization method. Set initialized true */\n        initialized: (isEnabled) ? Boolean(!plugin.initialize) : false,\n        /* If plugin enabled === false, set loaded to false, else check plugin.loaded function */\n        loaded: (isEnabled) ? Boolean(plugin.loaded({ config })) : false,\n        config\n      }\n      return { ...state, ...newState }\n    }\n    if (/^initialize:([^:]*)$/.test(action.type)) {\n      const name = getNameFromEventType(action.type, EVENTS.initialize)\n      const plugin = getPlugins()[name]\n      if (!plugin || !name) {\n        return state\n      }\n      const config = plugin.config\n      newState[name] = {\n        ...state[name],\n        ...{\n          initialized: true,\n          /* check plugin.loaded function */\n          loaded: Boolean(plugin.loaded({ config }))\n        }\n      }\n      return { ...state, ...newState }\n    }\n    if (/^ready:([^:]*)$/.test(action.type)) {\n      // const name = getNameFromEventType(action.type, 'ready')\n      newState[action.name] = {\n        ...state[action.name],\n        ...{ loaded: true }\n      }\n      return { ...state, ...newState }\n    }\n    switch (action.type) {\n      /* case EVENTS.pluginFailed:\n        // console.log('PLUGIN_FAILED', action.name)\n        newState[action.name] = {\n          ...state[action.name],\n          ...{ loaded: false }\n        }\n        return { ...state, ...newState }\n      */\n      /* When analytics.plugins.disable called */\n      case EVENTS.disablePlugin:\n        return { \n          ...state,\n          ...togglePluginStatus(action.plugins, false, state)\n        }\n      /* When analytics.plugins.enable called */\n      case EVENTS.enablePlugin:\n        return {\n          ...state, \n          ...togglePluginStatus(action.plugins, true, state)\n        }\n      default:\n        return state\n    }\n  }\n}\n\nfunction getNameFromEventType(type, baseName) {\n  return type.substring(baseName.length + 1, type.length)\n}\n\nfunction togglePluginStatus(plugins, status, currentState) {\n  return plugins.reduce((acc, pluginKey) => {\n    acc[pluginKey] = {\n      ...currentState[pluginKey],\n      ...{\n        enabled: status \n      }\n    }\n    return acc\n  }, currentState)\n}\n","export default function serialize(obj) {\n  try {\n   return JSON.parse(JSON.stringify(obj))\n  } catch (err) {}\n  return obj\n}","// Track Module. Follows ducks pattern http://bit.ly/2DnERMc\nimport EVENTS from '../events.js'\nimport serialize from '../utils/serialize.js'\n\n// Track State\nconst initialState = {\n  last: {},\n  history: [],\n}\n\n// track reducer\nexport default function trackReducer(state = initialState, action) {\n  const { type, event, properties, options, meta } = action\n\n  switch (type) {\n    case EVENTS.track:\n      const trackEvent = serialize({\n        event,\n        properties,\n        ...(Object.keys(options).length) && { options: options },\n        meta\n      })\n      return {\n        ...state,\n        ...{\n          last: trackEvent,\n          // Todo prevent LARGE arrays https://bit.ly/2MnBwPT\n          history: state.history.concat(trackEvent)\n        }\n      }\n    default:\n      return state\n  }\n}\n","import EVENTS from '../events.js'\n/*\nTODO figure out if this should live in state...\nQueue could be in mermory as well.\nBut also needs to be persisted to storage\n*/\n\nconst initialState = {\n  actions: [],\n}\n\nexport default function queueReducer(state = initialState, action) {\n  const { type, payload } = action\n\n  switch (type) {\n    case 'queue':\n      let actionChain\n      /* prioritize identify in event queue */\n      if (payload && payload.type && payload.type === EVENTS.identify) {\n        actionChain = [action].concat(state.actions)\n      } else {\n        actionChain = state.actions.concat(action)\n      }\n      return {\n        ...state,\n        actions: actionChain\n      }\n    case 'dequeue':\n      return []\n    // todo push events to history\n    default:\n      return state\n  }\n}\n\nexport const queueAction = (data, timestamp) => {\n  return {\n    type: 'queue',\n    timestamp: timestamp,\n    data: data\n  }\n}\n","// Page View Reducer. Follows ducks pattern http://bit.ly/2DnERMc\nimport { isBrowser } from '@analytics/type-utils'\nimport serialize from '../utils/serialize.js'\n\nimport EVENTS from '../events.js'\n\nconst hashRegex = /#.*$/\n\nfunction canonicalUrl() {\n  if (!isBrowser) return\n  const tags = document.getElementsByTagName('link')\n  for (var i = 0, tag; tag = tags[i]; i++) {\n    if (tag.getAttribute('rel') === 'canonical') {\n      return tag.getAttribute('href')\n    }\n  }\n}\n\nfunction urlPath(url) {\n  const regex = /(http[s]?:\\/\\/)?([^\\/\\s]+\\/)(.*)/g\n  const matches = regex.exec(url)\n  const pathMatch = (matches && matches[3]) ? matches[3].split('?')[0].replace(hashRegex, '') : ''\n  return '/' + pathMatch\n}\n\n/**\n * Return the canonical URL and rmove the hash.\n * @param  {string} search - search param\n * @return {string} return current canonical URL\n */\nfunction currentUrl(search) {\n  const canonical = canonicalUrl()\n  if (!canonical) return window.location.href.replace(hashRegex, '')\n  return canonical.match(/\\?/) ? canonical : canonical + search\n}\n\n/**\n * Page data for overides\n * @typedef {object} PageData\n * @property {string} [title] - Page title\n * @property {string} [url] - Page url\n * @property {string} [path] - Page path\n * @property {string} [search] - Page search\n * @property {string} [width] - Page width\n * @property {string} [height] - Page height\n*/\n\n/**\n * Get information about current page\n * @typedef {Function} getPageData\n * @param  {PageData} [pageData = {}] - Page data overides\n * @return {PageData} resolved page data\n */\nexport const getPageData = (pageData = {}) => {\n  if (!isBrowser) return pageData\n  const { title, referrer } = document\n  const { location, innerWidth, innerHeight } = window\n  const { hash, search } = location\n  const url = currentUrl(search)\n  const page = {\n    title: title,\n    url: url,\n    path: urlPath(url),\n    hash: hash,\n    search: search,\n    width: innerWidth,\n    height: innerHeight,\n  }\n  if (referrer && referrer !== '') {\n    page.referrer = referrer\n  }\n\n  return {\n    ...page,\n    /* .page() user overrrides */\n    ...pageData\n  }\n}\n\nconst initialState = {\n  last: {},\n  history: [],\n}\n\n// page reducer\nexport default function page(state = initialState, action) {\n  const { properties, options, meta } = action\n  switch (action.type) {\n    case EVENTS.page:\n      const viewData = serialize({\n        properties,\n        meta,\n        ...(Object.keys(options).length) && { options: options },\n      })\n      return {\n        ...state,\n        ...{\n          last: viewData,\n          // Todo prevent LARGE arrays https://bit.ly/2MnBwPT\n          history: state.history.concat(viewData)\n        }\n      }\n    default:\n      return state\n  }\n}\n","// Context Reducer.  Follows ducks pattern http://bit.ly/2DnERMc\nimport { getBrowserLocale, getTimeZone, uuid } from 'analytics-utils'\nimport { isBrowser } from '@analytics/type-utils'\nimport EVENTS from '../events.js'\nimport { LIB_NAME } from '../utils/internalConstants.js'\nimport getOSNameNode from '../utils/getOSName/node.js'\nimport getOSNameBrowser from '../utils/getOSName/browser.js'\n\nlet osName\nlet referrer\nlet locale\nlet timeZone\nif (BROWSER) {\n  osName = getOSNameBrowser()\n  referrer = (isBrowser) ? document.referrer : null\n  locale = getBrowserLocale()\n  timeZone = getTimeZone()\n} else {\n  osName = getOSNameNode()\n  referrer = {}\n}\n\nconst initialState = {\n  initialized: false,\n  sessionId: uuid(),\n  app: null,\n  version: null,\n  debug: false,\n  offline: (isBrowser) ? !navigator.onLine : false, // use node network is-online\n  os: {\n    name: osName,\n  },\n  userAgent: (isBrowser) ? navigator.userAgent : 'node', // https://github.com/bestiejs/platform.js\n  library: {\n    name: LIB_NAME,\n    // TODO fix version number. npm run publish:patch has wrong version\n    version: VERSION\n  },\n  timezone: timeZone,\n  locale: locale,\n  campaign: {},\n  referrer: referrer,\n}\n\n// context reducer\nexport default function context(state = initialState, action) {\n  const { initialized } = state\n  const { type, campaign } = action\n  switch (type) {\n    case EVENTS.campaign:\n      return {\n        ...state,\n        ...{ campaign: campaign }\n      }\n    case EVENTS.offline:\n      return {\n        ...state,\n        ...{ offline: true }\n      }\n    case EVENTS.online:\n      return {\n        ...state,\n        ...{ offline: false }\n      }\n    default:\n      if (!initialized) {\n        return {\n          ...initialState,\n          ...state,\n          ...{ initialized: true }\n        }\n      }\n      return state\n  }\n}\n\nconst excludeItems = ['plugins', 'reducers', 'storage']\n// Pull plugins and reducers off intital config\nexport function makeContext(config) {\n  return Object.keys(config).reduce((acc, current) => {\n    if (excludeItems.includes(current)) {\n      return acc\n    }\n    acc[current] = config[current]\n    return acc\n  }, {})\n}\n","// import os from 'os'\n\n// TODO fix os. os getting stripped out for node build\nexport default function getNodeOS() {\n  return 'na' // os.platform()\n}\n","import { set, globalContext, KEY } from '@analytics/global-storage-utils'\nimport { compose } from '../vendor/redux/index.js'\nimport { LIB_NAME } from './internalConstants.js'\n\nexport function Debug() {\n  // Global key is window.__global__.analytics\n  set(LIB_NAME, [])\n  // Return debugger\n  return (createStore) => {\n    return (reducer, preloadedState, enhancer) => {\n      const store = createStore(reducer, preloadedState, enhancer)\n      const origDispatch = store.dispatch\n      const dispatch = (action) => {\n        const a = action.action || action\n        globalContext[KEY][LIB_NAME].push(a)\n        return origDispatch(action)\n      }\n      return Object.assign(store, { dispatch: dispatch })\n    }\n  }\n}\n\nexport function composeWithDebug(config) {\n  return function () {\n    return compose(compose.apply(null, arguments), Debug(config))\n  }\n}\n","import { isArray } from '@analytics/type-utils'\n\nexport default function ensureArray(singleOrArray) {\n  if (!singleOrArray) return []\n  if (isArray(singleOrArray)) return singleOrArray\n  return [singleOrArray] \n}","import getCallback from './getCallback.js'\nimport { stack } from './callback-stack.js'\nimport timestamp from './timestamp.js'\nimport { uuid } from 'analytics-utils'\n\n// Async promise resolver\nfunction deferredPromiseResolver(resolver, callback) {\n  return (data) => {\n    if (callback) callback(data)\n    resolver(data)\n  }\n}\n\nexport default function generateMeta(meta = {}, resolve, possibleCallbacks) {\n    const rid = uuid()\n    if (resolve) {\n      // stack[`${rid}-info`] = meta\n      stack[rid] = deferredPromiseResolver(resolve, getCallback(possibleCallbacks))\n    }\n    return {\n      ...meta,\n      rid: rid,\n      ts: timestamp(),\n      ...(!resolve) ? {} : { hasCallback: true },\n    }\n  }","import { isFunction } from '@analytics/type-utils'\n\n/**\n * Grab first function found from arguments\n * @param {array} [argArray] - arguments array to find first function\n * @returns {Function|undefined}\n */\nexport default function getCallbackFromArgs(argArray) {\n  const args = argArray || Array.prototype.slice.call(arguments)\n  let cb\n  for (let i = 0; i < args.length; i++) {\n    if (isFunction(args[i])) {\n      cb = args[i]; break;\n    }\n  }\n  return cb\n}","\nexport default function timeStamp() {\n  return new Date().getTime()\n}\n","import { uuid, paramsParse, dotProp } from 'analytics-utils'\nimport { get, set, remove } from '@analytics/global-storage-utils'\nimport { isBrowser, isFunction, isObject, isString } from '@analytics/type-utils'\nimport { createStore, combineReducers, applyMiddleware, compose } from './vendor/redux/index.js'\nimport * as CONSTANTS from './constants.js'\nimport { ID, ANONID, ERROR_URL } from './utils/internalConstants.js'\nimport EVENTS, { coreEvents, nonEvents, isReservedAction } from './events.js'\n// Middleware\nimport * as middleware from './middleware/index.js'\nimport DynamicMiddleware from './middleware/dynamic.js'\n// Modules\nimport pluginsMiddleware from './modules/plugins.js'\nimport track from './modules/track.js'\nimport queue from './modules/queue.js'\nimport page, { getPageData } from './modules/page.js'\nimport context, { makeContext } from './modules/context.js'\nimport user, { getUserPropFunc, tempKey, getPersistedUserData } from './modules/user.js'\n/* Utils */\nimport { watch } from './utils/handleNetworkEvents.js'\nimport { Debug, composeWithDebug } from './utils/debug.js'\nimport heartBeat from './utils/heartbeat.js'\nimport ensureArray from './utils/ensureArray.js'\nimport enrichMeta from './utils/enrichMeta.js'\nimport './pluginTypeDef.js'\n\n/**\n * Analytics library configuration\n *\n * After the library is initialized with config, the core API is exposed & ready for use in the application.\n *\n * @param {object} config - analytics core config\n * @param {string} [config.app] - Name of site / app\n * @param {string|number} [config.version] - Version of your app\n * @param {boolean} [config.debug] - Should analytics run in debug mode\n * @param {Array.<AnalyticsPlugin>}  [config.plugins] - Array of analytics plugins\n * @return {AnalyticsInstance} Analytics Instance\n * @example\n *\n * import Analytics from 'analytics'\n * import pluginABC from 'analytics-plugin-abc'\n * import pluginXYZ from 'analytics-plugin-xyz'\n *\n * // initialize analytics\n * const analytics = Analytics({\n *   app: 'my-awesome-app',\n *   plugins: [\n *     pluginABC,\n *     pluginXYZ\n *   ]\n * })\n *\n */\nfunction analytics(config = {}) {\n  const customReducers = config.reducers || {}\n  const initialUser = config.initialUser || {}\n  // @TODO add custom value resolvers for userId and anonId\n  // const resolvers = config.resolvers || {}\n  // if (BROWSER) {\n  //   console.log('INIT browser')\n  // }\n  // if (SERVER) {\n  //   console.log('INIT SERVER')\n  // }\n  /* Parse plugins array */\n  const parsedOptions = (config.plugins || []).reduce((acc, plugin) => {\n    if (isFunction(plugin)) {\n      /* Custom redux middleware */\n      acc.middlewares = acc.middlewares.concat(plugin)\n      return acc\n    }\n    // Legacy plugin with name\n    if (plugin.NAMESPACE) plugin.name = plugin.NAMESPACE\n    if (!plugin.name) {\n      /* Plugins must supply a \"name\" property. See error url for more details */\n      throw new Error(ERROR_URL + '1')\n    }\n    // Set config if empty\n    if (!plugin.config) plugin.config = {}\n    // if plugin exposes EVENTS capture available events\n    const definedEvents = (plugin.EVENTS) ? Object.keys(plugin.EVENTS).map((k) => {\n      return plugin.EVENTS[k]\n    }) : []\n\n    const enabledFromMerge = !(plugin.enabled === false)\n    const enabledFromPluginConfig = !(plugin.config.enabled === false)\n    // top level { enabled: false } takes precedence over { config: enabled: false }\n    acc.pluginEnabled[plugin.name] = enabledFromMerge && enabledFromPluginConfig\n    delete plugin.enabled\n\n    if (plugin.methods) {\n      acc.methods[plugin.name] = Object.keys(plugin.methods).reduce((a, c) => {\n        // enrich methods with analytics instance\n        a[c] = appendArguments(plugin.methods[c])\n        return a\n      }, {})\n      // Remove additional methods from plugins\n      delete plugin.methods\n    }\n    // Convert available methods into events\n    const methodsToEvents = Object.keys(plugin)\n    // Combine events\n    const allEvents = methodsToEvents.concat(definedEvents)\n    // Dedupe events list\n    const allEventsUnique = new Set(acc.events.concat(allEvents))\n    acc.events = Array.from(allEventsUnique)\n\n    acc.pluginsArray = acc.pluginsArray.concat(plugin)\n\n    if (acc.plugins[plugin.name]) {\n      throw new Error(plugin.name + 'AlreadyLoaded')\n    }\n    acc.plugins[plugin.name] = plugin\n    if (!acc.plugins[plugin.name].loaded) {\n      // set default loaded func\n      acc.plugins[plugin.name].loaded = () => true\n    }\n    return acc\n  }, {\n    plugins: {},\n    pluginEnabled: {},\n    methods: {},\n    pluginsArray: [],\n    middlewares: [],\n    events: []\n  })\n  \n  /* Storage by default is set to global & is not persisted */\n  const storage = (config.storage) ? config.storage : {\n    getItem: get,\n    setItem: set,\n    removeItem: remove\n  }\n\n  const getUserProp = getUserPropFunc(storage)\n\n  // mutable integrations object for dynamic loading\n  let customPlugins = parsedOptions.plugins\n\n  /* Grab all registered events from plugins loaded */\n  const allPluginEvents = parsedOptions.events.filter((name) => {\n    return !nonEvents.includes(name)\n  }).sort()\n  const uniqueEvents = new Set(allPluginEvents.concat(coreEvents).filter((name) => {\n    return !nonEvents.includes(name)\n  }))\n  const allSystemEvents = Array.from(uniqueEvents).sort()\n\n  /* plugin methods(functions) must be kept out of state. thus they live here */\n  const getPlugins = () => customPlugins\n\n  const {\n    addMiddleware,\n    removeMiddleware,\n    dynamicMiddlewares\n  } = new DynamicMiddleware()\n\n  const nonAbortable = () => {\n    // throw new Error(`${ERROR_URL}3`)\n    throw new Error('Abort disabled inListener')\n  }\n  \n  // Parse URL parameters\n  const params = paramsParse()\n  // Initialize visitor information\n  const persistedUser = getPersistedUserData(storage)\n  const visitorInfo = {\n    ...persistedUser,\n    ...initialUser,\n    ...(!params.an_uid) ? {} : { userId: params.an_uid },\n    ...(!params.an_aid) ? {} : { anonymousId: params.an_aid },\n  }\n  // If no anon id set, create one\n  if (!visitorInfo.anonymousId) {\n    visitorInfo.anonymousId = uuid()\n  }\n\n  /**\n   * Async Management methods for plugins. \n   * \n   * This is also where [custom methods](https://bit.ly/329vFXy) are loaded into the instance.\n   * @typedef {Object} Plugins\n   * @property {EnablePlugin} enable - Set storage value\n   * @property {DisablePlugin} disable - Remove storage value\n   * @example\n   *\n   * // Enable a plugin by namespace\n   * analytics.plugins.enable('keenio')\n   *\n   * // Disable a plugin by namespace\n   * analytics.plugins.disable('google-analytics')\n   */\n  const plugins = {\n    /**\n     * Enable analytics plugin\n     * @typedef {Function} EnablePlugin\n     * @param  {string|string[]} plugins - name of plugins(s) to disable\n     * @param  {Function} [callback] - callback after enable runs\n     * @returns {Promise}\n     * @example\n     *\n     * analytics.plugins.enable('google-analytics').then(() => {\n     *   console.log('do stuff')\n     * })\n     *\n     * // Enable multiple plugins at once\n     * analytics.plugins.enable(['google-analytics', 'segment']).then(() => {\n     *   console.log('do stuff')\n     * })\n     */\n    enable: (plugins, callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.enablePlugin,\n          plugins: ensureArray(plugins),\n          _: { originalAction: EVENTS.enablePlugin },\n        }, resolve, [ callback ])\n      })\n    },\n    /**\n     * Disable analytics plugin\n     * @typedef {Function} DisablePlugin\n     * @param  {string|string[]} plugins - name of integration(s) to disable\n     * @param  {Function} [callback] - callback after disable runs\n     * @returns {Promise}\n     * @example\n     *\n     * analytics.plugins.disable('google').then(() => {\n     *   console.log('do stuff')\n     * })\n     *\n     * analytics.plugins.disable(['google', 'segment']).then(() => {\n     *   console.log('do stuff')\n     * })\n     */\n    disable: (plugins, callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.disablePlugin,\n          plugins: ensureArray(plugins),\n          _: { originalAction: EVENTS.disablePlugin },\n        }, resolve, [callback])\n      })\n    },\n    /*\n     * Load registered analytic providers.\n     * @param  {String} plugins - integration namespace\n     *\n     * @example\n     * analytics.plugins.load('segment')\n     @TODO implement\n    load: (plugins) => {\n      store.dispatch({\n        type: EVENTS.loadPlugin,\n        // Todo handle multiple plugins via array\n        plugins: (plugins) ? [plugins] : Object.keys(getPlugins()),\n      })\n    },\n    */\n    /* @TODO if it stays, state loaded needs to be set. Re PLUGIN_INIT above\n    add: (newPlugin) => {\n      if (typeof newPlugin !== 'object') return false\n      // Set on global integration object\n      customPlugins = Object.assign({}, customPlugins, {\n        [`${newPlugin.name}`]: newPlugin\n      })\n      // then add it, and init state key\n      store.dispatch({\n        type: EVENTS.pluginRegister,\n        name: newPlugin.name,\n        plugin: newPlugin\n      })\n    }, */\n    // Merge in custom plugin methods\n    ...parsedOptions.methods\n  }\n  \n  let readyCalled = false\n  /**\n   * Analytic instance returned from initialization\n   * @typedef {Object} AnalyticsInstance\n   * @property {Identify} identify - Identify a user\n   * @property {Track} track - Track an analytics event\n   * @property {Page} page - Trigger page view\n   * @property {User} user - Get user data\n   * @property {Reset} reset - Clear information about user & reset analytics\n   * @property {Ready} ready - Fire callback on analytics ready event\n   * @property {On} on - Fire callback on analytics lifecycle events.\n   * @property {Once} once - Fire callback on analytics lifecycle events once.\n   * @property {GetState} getState - Get data about user, activity, or context.\n   * @property {Storage} storage - storage methods\n   * @property {Plugins} plugins - plugin methods\n   */\n  const instance = {\n    /**\n    * Identify a user. This will trigger `identify` calls in any installed plugins and will set user data in localStorage\n    * @typedef {Function} Identify\n    * @param  {String}   userId  - Unique ID of user\n    * @param  {Object}   [traits]  - Object of user traits\n    * @param  {Object}   [options] - Options to pass to identify call\n    * @param  {Function} [callback] - Callback function after identify completes\n    * @returns {Promise}\n    * @api public\n    *\n    * @example\n    *\n    * // Basic user id identify\n    * analytics.identify('xyz-123')\n    *\n    * // Identify with additional traits\n    * analytics.identify('xyz-123', {\n    *   name: 'steve',\n    *   company: 'hello-clicky'\n    * })\n    *\n    * // Fire callback with 2nd or 3rd argument\n    * analytics.identify('xyz-123', () => {\n    *   console.log('do this after identify')\n    * })\n    *\n    * // Disable sending user data to specific analytic tools\n    * analytics.identify('xyz-123', {}, {\n    *   plugins: {\n    *     // disable sending this identify call to segment\n    *     segment: false\n    *   }\n    * })\n    *\n    * // Send user data to only to specific analytic tools\n    * analytics.identify('xyz-123', {}, {\n    *   plugins: {\n    *     // disable this specific identify in all plugins except customerio\n    *     all: false,\n    *     customerio: true\n    *   }\n    * })\n    */\n    identify: async (userId, traits, options, callback) => {\n      const id = isString(userId) ? userId : null\n      const data = isObject(userId) ? userId : traits\n      const opts = options || {}\n      const user = instance.user()\n\n      /* sets temporary in memory id. Not to be relied on */\n      set(tempKey(ID), id)\n\n      const resolvedId = id || data.userId || getUserProp(ID, instance, data)\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.identifyStart,\n          userId: resolvedId,\n          traits: data || {},\n          options: opts,\n          anonymousId: user.anonymousId,\n          // Add previousId if exists\n          ...(user.id && (user.id !== id) && { previousId: user.id }),\n        }, resolve, [traits, options, callback])\n      })\n    },\n    /**\n     * Track an analytics event. This will trigger `track` calls in any installed plugins\n     * @typedef {Function} Track\n     * @param  {String}   eventName - Event name\n     * @param  {Object}   [payload]   - Event payload\n     * @param  {Object}   [options]   - Event options\n     * @param  {Function} [callback]  - Callback to fire after tracking completes\n     * @returns {Promise}\n     * @api public\n     *\n     * @example\n     *\n     * // Basic event tracking\n     * analytics.track('buttonClicked')\n     *\n     * // Event tracking with payload\n     * analytics.track('itemPurchased', {\n     *   price: 11,\n     *   sku: '1234'\n     * })\n     *\n     * // Fire callback with 2nd or 3rd argument\n     * analytics.track('newsletterSubscribed', () => {\n     *   console.log('do this after track')\n     * })\n     *\n     * // Disable sending this event to specific analytic tools\n     * analytics.track('cartAbandoned', {\n     *   items: ['xyz', 'abc']\n     * }, {\n     *   plugins: {\n     *     // disable track event for segment\n     *     segment: false\n     *   }\n     * })\n     *\n     * // Send event to only to specific analytic tools\n     * analytics.track('customerIoOnlyEventExample', {\n     *   price: 11,\n     *   sku: '1234'\n     * }, {\n     *   plugins: {\n     *     // disable this specific track call all plugins except customerio\n     *     all: false,\n     *     customerio: true\n     *   }\n     * })\n     */\n    track: async (eventName, payload, options, callback) => {\n      const name = isObject(eventName) ? eventName.event : eventName\n      if (!name || !isString(name)) {\n        throw new Error('EventMissing')\n      }\n      const data = isObject(eventName) ? eventName : (payload || {})\n      const opts = isObject(options) ? options : {}\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.trackStart,\n          event: name,\n          properties: data,\n          options: opts,\n          userId: getUserProp(ID, instance, payload),\n          anonymousId: getUserProp(ANONID, instance, payload),\n        }, resolve, [payload, options, callback])\n      })\n    },\n    /**\n     * Trigger page view. This will trigger `page` calls in any installed plugins\n     * @typedef {Function} Page\n     * @param  {PageData} [data] - Page data overrides.\n     * @param  {Object}   [options] - Page tracking options\n     * @param  {Function} [callback] - Callback to fire after page view call completes\n     * @returns {Promise}\n     * @api public\n     *\n     * @example\n     *\n     * // Basic page tracking\n     * analytics.page()\n     *\n     * // Page tracking with page data overrides\n     * analytics.page({\n     *   url: 'https://google.com'\n     * })\n     *\n     * // Fire callback with 1st, 2nd or 3rd argument\n     * analytics.page(() => {\n     *   console.log('do this after page')\n     * })\n     *\n     * // Disable sending this pageview to specific analytic tools\n     * analytics.page({}, {\n     *   plugins: {\n     *     // disable page tracking event for segment\n     *     segment: false\n     *   }\n     * })\n     *\n     * // Send pageview to only to specific analytic tools\n     * analytics.page({}, {\n     *   plugins: {\n     *     // disable this specific page in all plugins except customerio\n     *     all: false,\n     *     customerio: true\n     *   }\n     * })\n     */\n    page: async (data, options, callback) => {\n      const d = isObject(data) ? data : {}\n      const opts = isObject(options) ? options : {}\n\n      /*\n      // @TODO add custom value resolvers for userId and anonId\n      if (resolvers.getUserId) {\n        const asyncUserId = await resolvers.getUserId()\n        console.log('x', x)\n      }\n      */\n\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.pageStart,\n          properties: getPageData(d),\n          options: opts,\n          userId: getUserProp(ID, instance, d),\n          anonymousId: getUserProp(ANONID, instance, d),\n        }, resolve, [data, options, callback])\n      })\n    },\n    /**\n     * Get user data\n     * @typedef {Function} User\n     * @param {string} [key] - dot.prop.path of user data. Example: 'traits.company.name'\n     * @returns {string|object} value of user data or null\n     *\n     * @example\n     *\n     * // Get all user data\n     * const userData = analytics.user()\n     *\n     * // Get user id\n     * const userId = analytics.user('userId')\n     *\n     * // Get user company name\n     * const companyName = analytics.user('traits.company.name')\n     */\n    user: (key) => {\n      if (key === ID || key === 'id') {\n        return getUserProp(ID, instance)\n      }\n      if (key === ANONID || key === 'anonId') {\n        return getUserProp(ANONID, instance)\n      }\n      const user = instance.getState('user')\n      if (!key) return user\n      return dotProp(user, key)\n    },\n    /**\n     * Clear all information about the visitor & reset analytic state.\n     * @typedef {Function} Reset\n     * @param {Function} [callback] - Handler to run after reset\n     * @returns {Promise}\n     * @example\n     *\n     * // Reset current visitor\n     * analytics.reset()\n     */\n    reset: (callback) => {\n      return new Promise((resolve) => {\n        store.dispatch({\n          type: EVENTS.resetStart\n        }, resolve, callback)\n      })\n    },\n    /**\n     * Fire callback on analytics ready event\n     * @typedef {Function} Ready\n     * @param  {Function} callback - function to trigger when all providers have loaded\n     * @returns {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * analytics.ready((payload) => {\n     *   console.log('all plugins have loaded or were skipped', payload);\n     * })\n     */\n    ready: (callback) => {\n      // If ready already fired. Call callback immediately\n      if (readyCalled) callback({ plugins, instance })\n      return instance.on(EVENTS.ready, (x) => {\n        if (callback) callback(x)\n        readyCalled = true\n      })\n    },\n    /**\n     * Attach an event handler function for analytics lifecycle events.\n     * @typedef {Function} On\n     * @param  {String}   name - Name of event to listen to\n     * @param  {Function} callback - function to fire on event\n     * @return {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * // Fire function when 'track' calls happen\n     * analytics.on('track', ({ payload }) => {\n     *   console.log('track call just happened. Do stuff')\n     * })\n     *\n     * // Remove listener before it is called\n     * const removeListener = analytics.on('track', ({ payload }) => {\n     *   console.log('This will never get called')\n     * })\n     *\n     * // cleanup .on listener\n     * removeListener()\n     */\n    on: (name, callback) => {\n      if (!name || !isFunction(callback)) {\n        return false\n      }\n      if (name === EVENTS.bootstrap) {\n        throw new Error('.on disabled for ' + name)\n      }\n      const startRegex = /Start$|Start:/\n      if (name === '*') {\n        const beforeHandler = store => next => action => {\n          if (action.type.match(startRegex)) {\n            callback({ // eslint-disable-line\n              payload: action,\n              instance,\n              plugins: customPlugins\n            })\n          }\n          return next(action)\n        }\n        const afterHandler = store => next => action => {\n          if (!action.type.match(startRegex)) {\n            callback({ // eslint-disable-line\n              payload: action,\n              instance,\n              plugins: customPlugins\n            })\n          }\n          return next(action)\n        }\n        addMiddleware(beforeHandler, before)\n        addMiddleware(afterHandler, after)\n        /**\n         * Detach listeners\n         * @typedef {Function} DetachListeners\n         */\n        return () => {\n          removeMiddleware(beforeHandler, before)\n          removeMiddleware(afterHandler, after)\n        }\n      }\n\n      const position = (name.match(startRegex)) ? before : after // eslint-disable-line\n      const handler = store => next => action => {\n        // Subscribe to EVERYTHING\n        if (action.type === name) {\n          callback({ // eslint-disable-line\n            payload: action,\n            instance: instance,\n            plugins: customPlugins,\n            abort: nonAbortable\n          })\n        }\n        /* For future matching of event subpaths `track:*` etc\n        } else if (name.match(/\\*$/)) {\n          const match = (name === '*') ? '.' : name\n          const regex = new RegExp(`${match}`, 'g')\n        } */\n        return next(action)\n      }\n      addMiddleware(handler, position)\n      return () => removeMiddleware(handler, position)\n    },\n    /**\n     * Attach a handler function to an event and only trigger it once.\n     * @typedef {Function} Once\n     * @param  {String} name - Name of event to listen to\n     * @param  {Function} callback - function to fire on event\n     * @return {DetachListeners} - Function to detach listener\n     *\n     * @example\n     *\n     * // Fire function only once per 'track'\n     * analytics.once('track', ({ payload }) => {\n     *   console.log('This is only triggered once when analytics.track() fires')\n     * })\n     *\n     * // Remove listener before it is called\n     * const listener = analytics.once('track', ({ payload }) => {\n     *   console.log('This will never get called b/c listener() is called')\n     * })\n     *\n     * // cleanup .once listener before it fires\n     * listener()\n     */\n    once: (name, callback) => {\n      if (!name || !isFunction(callback)) {\n        return false\n      }\n      if (name === EVENTS.bootstrap) {\n        throw new Error('.once disabled for ' + name)\n      }\n      const detachListener = instance.on(name, ({ payload }) => {\n        callback({ // eslint-disable-line\n          payload: payload,\n          instance: instance,\n          plugins: customPlugins,\n          abort: nonAbortable\n        })\n        // detach listener after its called once\n        detachListener()\n      })\n      return detachListener\n    },\n    /**\n     * Get data about user, activity, or context. Access sub-keys of state with `dot.prop` syntax.\n     * @typedef {Function} GetState\n     * @param  {string} [key] - dot.prop.path value of state\n     * @return {any}\n     *\n     * @example\n     *\n     * // Get the current state of analytics\n     * analytics.getState()\n     *\n     * // Get a subpath of state\n     * analytics.getState('context.offline')\n     */\n    getState: (key) => {\n      const state = store.getState()\n      if (key) return dotProp(state, key)\n      return Object.assign({}, state)\n    },\n    /*\n     * Emit events for other plugins or middleware to react to.\n     * @param  {Object} action - event to dispatch\n     */\n    dispatch: (action) => {\n      const actionData = isString(action) ? { type: action } : action\n      if (isReservedAction(actionData.type)) {\n        throw new Error('reserved action ' + actionData.type)\n      }\n      const _private = action._ || {}\n      // Dispatch actionStart\n      // const autoPrefixType = `${actionData.type.replace(/Start$/, '')}Start`\n\n      const dispatchData = {\n        ...actionData,\n        _: {\n          originalAction: actionData.type,\n          ..._private\n        }\n        // type: `${autoPrefixType}`\n      }\n      store.dispatch(dispatchData)\n    },\n    // Do not use. Will be removed. Here for Backwards compatibility.\n    // Moved to analytics.plugins.enable\n    enablePlugin: plugins.enable,\n    /// Do not use. Will be removed. Here for Backwards compatibility.\n    /// Moved to analytics.plugins.disable\n    disablePlugin: plugins.disable,\n    // Do not use. Will be removed. Here for Backwards compatibility.\n    // New plugins api\n    plugins: plugins,\n    /**\n     * Storage utilities for persisting data.\n     * These methods will allow you to save data in localStorage, cookies, or to the window.\n     * @typedef {Object} Storage\n     * @property {GetItem} getItem - Get value from storage\n     * @property {SetItem} setItem - Set storage value\n     * @property {RemoveItem} removeItem - Remove storage value\n     *\n     * @example\n     *\n     * // Pull storage off analytics instance\n     * const { storage } = analytics\n     *\n     * // Get value\n     * storage.getItem('storage_key')\n     *\n     * // Set value\n     * storage.setItem('storage_key', 'value')\n     *\n     * // Remove value\n     * storage.removeItem('storage_key')\n     */\n    storage: {\n      /**\n       * Get value from storage\n       * @typedef {Function} GetItem\n       * @param {String} key - storage key\n       * @param {Object} [options] - storage options\n       * @return {Any}\n       *\n       * @example\n       *\n       * analytics.storage.getItem('storage_key')\n       */\n      getItem: storage.getItem,\n      /**\n       * Set storage value\n       * @typedef {Function} SetItem\n       * @param {String} key - storage key\n       * @param {any} value - storage value\n       * @param {Object} [options] - storage options\n       *\n       * @example\n       *\n       * analytics.storage.setItem('storage_key', 'value')\n       */\n      setItem: (key, value, options) => {\n        store.dispatch({\n          type: EVENTS.setItemStart,\n          key: key,\n          value: value,\n          options: options\n        })\n      },\n      /**\n       * Remove storage value\n       * @typedef {Function} RemoveItem\n       * @param {String} key - storage key\n       * @param {Object} [options] - storage options\n       *\n       * @example\n       *\n       * analytics.storage.removeItem('storage_key')\n       */\n      removeItem: (key, options) => {\n        store.dispatch({\n          type: EVENTS.removeItemStart,\n          key: key,\n          options: options\n        })\n      },\n    },\n    /*\n     * Set the anonymous ID of the visitor\n     * @param {String} anonymousId - anonymous Id to set\n     * @param {Object} [options] - storage options\n     *\n     * @example\n     *\n     * // Set anonymous ID\n     * analytics.setAnonymousId('1234567')\n     */\n    setAnonymousId: (anonymousId, options) => {\n      /* sets temporary in memory id. Not to be relied on */\n      // set(tempKey(ANONID), anonymousId)\n      instance.storage.setItem(CONSTANTS.ANON_ID, anonymousId, options)\n    },\n    /*\n     * Events exposed by core analytics library and all loaded plugins\n     * @type {Array}\n     */\n    events: {\n      core: coreEvents,\n      plugins: allPluginEvents,\n      // byType: (type) => {} @Todo grab logic from engine and give inspectable events\n    }\n  }\n  const enrichMiddleware = storeAPI => next => action => {\n    if (!action.meta) {\n      action.meta = enrichMeta()\n    }\n    return next(action)\n  }\n  const middlewares = parsedOptions.middlewares.concat([\n    enrichMiddleware,\n    /* Core analytics middleware */\n    dynamicMiddlewares(before), // Before dynamic middleware <-- fixed pageStart .on listener\n    /* Plugin engine */\n    middleware.plugins(instance, getPlugins, {\n      all: allSystemEvents,\n      plugins: allPluginEvents\n    }),\n    middleware.storage(storage),\n    middleware.initialize(instance),\n    middleware.identify(instance, storage),\n    /* after dynamic middleware */\n    dynamicMiddlewares(after)\n  ])\n\n  /* Initial analytics state keys */\n  const coreReducers = {\n    context: context,\n    user: user(storage),\n    page: page,\n    track: track,\n    plugins: pluginsMiddleware(getPlugins),\n    queue: queue\n  }\n\n  let composeEnhancers = compose\n  let composeWithGlobalDebug = compose\n  if (isBrowser && config.debug) {\n    const devTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    if (devTools) {\n      composeEnhancers = devTools({ trace: true, traceLimit: 25 })\n    }\n    composeWithGlobalDebug = function() {\n      if (arguments.length === 0) return Debug()\n      if (isObject(typeof arguments[0])) return composeWithDebug(arguments[0])\n      return composeWithDebug().apply(null, arguments)\n    }\n  }\n\n  const initialConfig = makeContext(config)\n\n  const initialPluginState = parsedOptions.pluginsArray.reduce((acc, plugin) => {\n    const { name, config, loaded } = plugin\n    const isEnabled = parsedOptions.pluginEnabled[name]\n    acc[name] = {\n      enabled: isEnabled,\n      // If plugin enabled & has no initialize method, set initialized to true, else false\n      initialized: (isEnabled) ? Boolean(!plugin.initialize) : false,\n      loaded: Boolean(loaded({ config })),\n      config\n    }\n    return acc\n  }, {})\n  \n  const initialState = {\n    context: initialConfig,\n    user: visitorInfo,\n    plugins: initialPluginState,\n    // Todo allow for more userland defined initial state?\n  }\n\n  /* Create analytics store! */\n  const store = createStore(\n    // register reducers\n    combineReducers({ ...coreReducers, ...customReducers }),\n    // set user defined initial state\n    initialState,\n    // register middleware & plugins used\n    composeWithGlobalDebug(\n      composeEnhancers(\n        applyMiddleware(...middlewares),\n      )\n    )\n  )\n\n  /* Supe up dispatch with callback promise resolver. Happens in enrichMeta */\n  function enhanceDispatch(fn) {\n    return function (event, resolver, callbacks) {\n      // console.log('original event', event)\n      const meta = enrichMeta(event.meta, resolver, ensureArray(callbacks))\n      // if (resolver) console.log('dispatch resolver', resolver)\n      // if (callbacks) console.log('dispatch callbacks', callbacks)\n      const newEvent = { ...event, ...{ meta: meta } }\n      // console.log('newEvent', newEvent)\n      return fn.apply(null, [ newEvent ])\n    }\n  }\n\n  // Automatically apply meta to dispatch calls\n  store.dispatch = enhanceDispatch(store.dispatch)\n\n  /* Synchronously call bootstrap & register Plugin methods */\n  const pluginKeys = Object.keys(customPlugins)\n\n  /* Bootstrap analytic plugins */\n  store.dispatch({\n    type: EVENTS.bootstrap,\n    plugins: pluginKeys,\n    config: initialConfig,\n    params: params,\n    user: visitorInfo,\n    initialUser,\n    persistedUser\n  })\n\n  const enabledPlugins = pluginKeys.filter((name) => parsedOptions.pluginEnabled[name])\n  const disabledPlugins = pluginKeys.filter((name) => !parsedOptions.pluginEnabled[name])\n \n  /* Register analytic plugins */\n  store.dispatch({\n    type: EVENTS.registerPlugins,\n    plugins: pluginKeys,\n    enabled: parsedOptions.pluginEnabled,\n  })\n\n  /* dispatch register for individual plugins */\n  parsedOptions.pluginsArray.map((plugin, i) => {\n    const { bootstrap, config, name } = plugin\n    if (bootstrap && isFunction(bootstrap)) {\n      bootstrap({ instance, config, payload: plugin })\n    }\n    /* Register plugins */\n    store.dispatch({\n      type: EVENTS.registerPluginType(name),\n      name: name,\n      enabled: parsedOptions.pluginEnabled[name],\n      plugin: plugin\n    })\n\n    /* All plugins registered initialize, is last loop */\n    if (parsedOptions.pluginsArray.length === (i + 1)) {\n      store.dispatch({\n        type: EVENTS.initializeStart,\n        plugins: enabledPlugins,\n        disabled: disabledPlugins\n      })\n    }\n  })\n\n  if (BROWSER) {\n    /* Watch for network events */\n    watch((offline) => {\n      store.dispatch({\n        type: (offline) ? EVENTS.offline : EVENTS.online,\n      })\n    })\n    /* Tick heartbeat for queued events */\n    heartBeat(store, getPlugins, instance)\n  }\n\n  function appendArguments(fn) {\n    return function () {\n      /* Get original args */\n      const args = Array.prototype.slice.call(arguments)\n      /* Create clone of args */\n      let newArgs = new Array(fn.length)\n      for (let i = 0; i < args.length; i++) {\n        newArgs[i] = args[i]\n      }\n      /* Append new arg to end */\n      newArgs[newArgs.length] = instance\n      // Set instance on extended methods\n      return fn.apply({ instance }, newArgs)\n    }\n  }\n\n  /* Return analytics instance */\n  return instance\n}\n\n// Duplicated strings\nconst before = 'before'\nconst after = 'after'\n\nexport default analytics\n\n/*\n * analytics.init exported for standalone browser build\n * CDN build exposes global _analytics variable\n *\n * Initialize instance with _analytics.init() or _analytics['default']()\n */\nexport { analytics as init }\n\n/*\n * analytics.Analytics exported for node usage\n *\n * Initialize instance with _analytics.init() or _analytics['default']()\n */\nexport { analytics as Analytics }\n/*\n * Core Analytic events. These are exposed for third party plugins & listeners\n * Use these magic strings to attach functions to event names.\n * @type {Object}\n */\nexport { EVENTS }\n\nexport { CONSTANTS }\n","import compose from './compose.js'\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    const store = createStore(reducer, preloadedState, enhancer)\n    let dispatch = store.dispatch\n    let chain = []\n\n    const middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    }\n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch\n    }\n  }\n}\n"],"names":["FUNC","UNDEF","REDUCER","base","ACTION_INIT","ACTION_TEST","Math","random","toString","$$observable","Symbol","observable","msg","createStore","reducer","preloadedState","enhancer","undefined","Error","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","isObject","type","listeners","i","length","replaceReducer","nextReducer","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","this","getUndefinedStateErrorMessage","key","actionType","compose","funcs","arg","reduce","a","b","args","ANON_ID","PREFIX","USER_ID","USER_TRAITS","LIB_NAME","ID","ANONID","coreEvents","nonEvents","EVENTS$1","acc","curr","registerPluginType","name","pluginReadyType","utmRegex","propRegex","traitRegex","initializeMiddleware","instance","setItem","storage","store","EVENTS","bootstrap","params","user","persistedUser","initialUser","isKnownId","userId","anonymousId","traits","_extends","paramsArray","Object","keys","an_uid","an_event","groupedParams","match","cleanName","replace","campaign","props","raw","setTimeout","identify","track","userReducer","state","setItemEnd","value","assign","reset","forEach","removeItem","getPersistedUserData","getItem","tempKey","identifyMiddleware","options","remove","uuid","currentId","currentTraits","userIdChanged","old","new","stack","runCallback","id","payload","isFunction","waitForReady","data","predicate","timeout","Promise","resolve","reject","queue","then","_","abort","reason","processQueue","getPlugins","abortedCalls","pluginMethods","plugins","context","offline","actions","pipeline","item","plugin","loaded","process","processIndex","requeue","requeueIndex","processAction","currentPlugin","currentMethod","method","enrichedPayload","hasOwnProperty","enrich","retVal","isAborted","meta","rid","config","pluginEvent","called","from","reQueueActions","filter","endsWithStartRegex","bootstrapRegex","readyRegex","async","processEvent","allPlugins","allMatches","isStartEvent","abortable","exact","map","x","pluginName","during","makeArgs","abortablePlugins","otherPlugin","event","abortF","caller","pluginsToAbort","isArray","includes","JSON","stringify","abortFunction","notAbortableError","formatPayload","argumentFactory","queueData","thing","methodName","addToQueue","payloads","scoped","curScope","namespaced","scopedPayload","p","count","curScopeData","actionName","text","getNameSpacedAction","sub","join","validateMethod","val","currentAct","pname","otherPlug","getConfig","returnValue","resolvedAction","promise","lastLoop","currentActionValue","payloadValue","shouldAbort","abortDispatch","funcArgs","merged","nameSpaceEvent","updatedPayload","originalAction","endAction","shouldAbortAll","abortEvent","pluginState","pluginData","getPluginFunctions","arr","concat","getEventNames","eventType","namespace","postFix","pluginsCount","isString","Array","split","pluginMiddleware","systemEvents","isReady","updatedAction","enablePlugin","initializeStart","disabled","fromEnable","disablePlugin","initializeEnd","pluginsArray","allRegisteredPlugins","completed","failed","waitForPluginsToLoad","loadedFn","d","events","catch","e","all","calls","ready","test","updated","eventsInfo","pluginObject","originalType","updatedType","activePlugins","settings","fromCallOptions","isBoolean","enabled","fitlerDisabledPlugins","info","initialized","allActivePluginKeys","core","word","nameSpacedEvents","beforeFuncs","duringFuncs","afterFuncs","beforeNS","duringNS","afterNS","before","after","getAllMatchingCalls","actionBefore","actionDuring","afterName","actionAfter","hasCallback","runPlugins","storageMiddleware","DynamicMiddleware","constructor","addMiddleware","middlewares","position","removeMiddleware","middleware","findIndex","dynamicMiddlewares","middlewareAPI","act","createReducer","newState","getNameFromEventType","isEnabled","Boolean","initialize","togglePluginStatus","baseName","substring","status","pluginKey","serialize","obj","parse","err","initialState","last","history","trackReducer","properties","trackEvent","queueReducer","actionChain","hashRegex","urlPath","url","matches","exec","getPageData","pageData","isBrowser","title","referrer","document","location","innerWidth","innerHeight","window","hash","search","canonical","tags","getElementsByTagName","tag","getAttribute","canonicalUrl","href","currentUrl","page","path","width","height","viewData","osName","sessionId","app","version","debug","navigator","onLine","os","userAgent","library","timezone","timeZone","locale","online","excludeItems","Debug","set","origDispatch","globalContext","KEY","composeWithDebug","apply","arguments","ensureArray","singleOrArray","generateMeta","possibleCallbacks","resolver","callback","argArray","prototype","call","cb","getCallback","ts","Date","getTime","analytics","customReducers","reducers","parsedOptions","NAMESPACE","ERROR_URL","definedEvents","k","pluginEnabled","methods","c","fn","newArgs","allEvents","allEventsUnique","Set","get","getUserProp","getUserPropFunc","customPlugins","allPluginEvents","sort","uniqueEvents","allSystemEvents","nonAbortable","paramsParse","visitorInfo","an_aid","enable","disable","readyCalled","opts","resolvedId","identifyStart","previousId","eventName","trackStart","pageStart","dotProp","resetStart","on","startRegex","beforeHandler","afterHandler","handler","once","detachListener","actionData","dispatchData","setItemStart","removeItemStart","setAnonymousId","CONSTANTS","storeAPI","enrichMeta","coreReducers","pluginsMiddleware","composeEnhancers","composeWithGlobalDebug","devTools","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","initialConfig","current","makeContext","initialPluginState","reducerKeys","finalReducers","finalReducerKeys","shapeAssertionError","assertReducerShape","hasChanged","nextState","previousStateForKey","nextStateForKey","errorMessage","combineReducers","chain","applyMiddleware","callbacks","newEvent","pluginKeys","enabledPlugins","disabledPlugins","registerPlugins"],"mappings":"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"}