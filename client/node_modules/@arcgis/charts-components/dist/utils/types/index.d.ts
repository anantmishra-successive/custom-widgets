import { WebBoxPlot, WebChart, WebChartBarChartSeries, WebChartBoxPlotSeries, WebChartGaugeSeries, WebChartHistogramSeries, WebChartLegend, WebChartLineChartSeries, WebChartPieChartLegend, WebChartPieChartSeries, WebChartRadarChartSeries, WebChartScatterplotSeries, WebGaugeChart } from '@arcgis/charts-spec';
import { ModelTypes, ModelTypeToSeriesType } from '../../model/interfaces/common';
/**
 * Interface to hold action bar props
 */
export interface ActionBarHideActionsProps {
    /**
     * determines whether to hide clear selection action or not
     */
    hideClearSelection?: boolean;
    /**
     * determines whether to hide filter by extent action or not
     */
    hideFilterByExtent?: boolean;
    /**
     * determines whether to hide filter by selection action or not
     */
    hideFilterBySelection?: boolean;
    /**
     * determines whether to hide full extent action or not
     */
    hideFullExtent?: boolean;
    /**
     * determines whether to hide legend action or not
     */
    hideLegend?: boolean;
    /**
     * determines whether to hide rotate action or not
     */
    hideRotateChart?: boolean;
    /**
     * determines whether to hide selection action or not
     */
    hideSelection?: boolean;
    /**
     * determines whether to hide switch selection action or not
     */
    hideSwitchSelection?: boolean;
    /**
     * determines whether to hide zoom action or not
     */
    hideZoom?: boolean;
    /**
     * determines whether to hide expand action or not
     */
    hideExpandAction?: boolean;
}
export declare const ChartComponentEvents: {
    readonly DataProcessComplete: "arcgisDataProcessComplete";
    readonly DataFetchComplete: "arcgisDataFetchComplete";
    readonly DataProcessError: "arcgisDataProcessError";
    readonly LegendItemVisibilityChange: "arcgisLegendItemVisibilityChange";
    readonly UpdateComplete: "arcgisUpdateComplete";
    readonly SeriesColorChange: "arcgisSeriesColorChange";
    readonly AxesMinMaxChange: "arcgisAxesMinMaxChange";
    readonly DefaultActionSelect: "arcgisDefaultActionSelect";
    readonly SelectionComplete: "arcgisSelectionComplete";
    readonly ActionBarToggle: "arcgisActionBarToggle";
    readonly NoRenderPropChange: "arcgisNoRenderPropChange";
    readonly BadDataWarningRaise: "arcgisBadDataWarningRaise";
    readonly SeriesOrder: "arcgisSeriesOrder";
    readonly RuntimeError: "arcgisRuntimeError";
    readonly ConfigChange: "arcgisConfigChange";
};
export declare const DefaultChartActions: {
    readonly FilterBySelection: "filterBySelection";
    readonly FilterByExtent: "filterByExtent";
    readonly Legend: "legend";
    readonly RotateChart: "rotateChart";
    readonly Selection: "selection";
    readonly ClearSelection: "clearSelection";
    readonly SwitchSelection: "switchSelection";
    readonly Zoom: "zoom";
    readonly FullExtent: "fullExtent";
    readonly EditChart: "editChart";
    readonly ExportAsImage: "exportAsImage";
    readonly ExportAsCSV: "exportAsCSV";
};
export type DefaultChartActions = (typeof DefaultChartActions)[keyof typeof DefaultChartActions];
/**
 * Type alias for a Histogram config.
 */
export type HistogramConfig = Omit<WebChart, "series"> & {
    series: WebChartHistogramSeries[];
};
/**
 * Type alias for a Scatter Plot config.
 */
export type ScatterplotConfig = Omit<WebChart, "series"> & {
    series: WebChartScatterplotSeries[];
};
/**
 * Type alias for a Gauge Chart config.
 */
export type GaugeChartConfig = WebGaugeChart;
/**
 * Type alias for a Box Plot config.
 */
export type BoxPlotConfig = WebBoxPlot;
/**
 * Type alias for the supported chart series types.
 */
export type SupportedChartSeries = WebChartBarChartSeries | WebChartBoxPlotSeries | WebChartGaugeSeries | WebChartHistogramSeries | WebChartLineChartSeries | WebChartPieChartSeries | WebChartRadarChartSeries | WebChartScatterplotSeries;
/**
 * Type alias for a Chart configuration.
 *
 * This type is generic and supports configuration for different chart types, data source types, and data source requirement policies.
 *
 * It extends and modifies the base `WebChart` while replacing the generic `series` with the specific series type.
 *
 *
 * @template T - The series type. It can be any of the supported chart series types.
 * @template V - The chart type. This acts as the base type for the configuration. Default type is derived from the series type.
 */
export type ChartConfig<T extends ModelTypes = ModelTypes, V extends WebChart = T extends typeof ModelTypes.BoxPlot ? WebBoxPlot : T extends typeof ModelTypes.Gauge ? WebGaugeChart : WebChart> = Omit<V, "legend" | "series"> & {
    series: ModelTypeToSeriesType<T>[];
    legend?: T extends typeof ModelTypes.PieChart ? WebChartPieChartLegend : WebChartLegend;
};
export declare const ActionToggle: {
    readonly Active: "active";
    readonly Inactive: "inactive";
};
export type ActionToggle = (typeof ActionToggle)[keyof typeof ActionToggle];
export declare const ActionState: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
export type ActionState = (typeof ActionState)[keyof typeof ActionState];
export declare const ErrorPolicy: {
    readonly Ignore: "ignore";
    readonly Throw: "throw";
};
export type ErrorPolicy = (typeof ErrorPolicy)[keyof typeof ErrorPolicy];
declare const ChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
type ChangePolicy = (typeof ChangePolicy)[keyof typeof ChangePolicy];
export declare const LayerFilterChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type LayerFilterChangePolicy = ChangePolicy;
export declare const LayerRendererChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type LayerRendererChangePolicy = ChangePolicy;
export declare const LayerFieldsChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type LayerFieldsChangePolicy = ChangePolicy;
export declare const ViewTimeExtentChangePolicy: {
    readonly Ignore: "ignore";
    readonly Refresh: "refresh";
};
export type ViewTimeExtentChangePolicy = ChangePolicy;
export declare const SyncSelectionsBetweenChartAndLayerViewPolicy: {
    /**
     * Enable syncing selections between chart and layer view
     */
    readonly Enabled: "enabled";
    /**
     * Disable syncing selections between chart and layer view
     */
    readonly Disabled: "disabled";
};
export type SyncSelectionsBetweenChartAndLayerViewPolicy = (typeof SyncSelectionsBetweenChartAndLayerViewPolicy)[keyof typeof SyncSelectionsBetweenChartAndLayerViewPolicy];
export {};
