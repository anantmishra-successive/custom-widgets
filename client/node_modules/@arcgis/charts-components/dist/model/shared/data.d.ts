import { ChartConfig } from '../../utils';
import { SupportedLayer, WebChartStatisticType } from '@arcgis/charts-spec';
import { PieChartDataModes, SerialChartDataSortingKinds } from '../interfaces/common';
import { SerialChartConfig } from '../interfaces/chart-interfaces';
import { default as FeatureLayerView } from '@arcgis/core/views/layers/FeatureLayerView.js';
/**
 * Get the sort order kind for the bar and line chart
 * @param {SerialChartConfig} config - the chart configuration
 *
 * @returns {SerialChartDataSortingKinds}
 */
export declare const getSortOrderKindForBarLineChart: (config: SerialChartConfig) => SerialChartDataSortingKinds;
/**
 * Check if custom sort is enabled based on the chart type.
 * @param {SerialChartConfig} config - The chart config.
 * @returns {boolean} - True if custom sort is enabled, otherwise false.
 */
export declare const isCustomSortEnabled: (config: SerialChartConfig) => boolean;
/**
 * Get the order by list from the config.
 * The order by list is only used when the sort order kind is custom sort.
 * @param  {SerialChartConfig} config - The chart config.
 *
 * @returns string[] - The order by list.
 */
export declare const getOrderByList: (config: SerialChartConfig) => string[];
/**
 * Set the sort order kind for the bar and line chart
 * @param {SerialChartDataSortingKinds} newSortOrderKind - the new sort order kind
 * @param {ChartConfig} config - the chart configuration
 * @param {string[] | undefined} orderByList - the list of fields to order by
 */
export declare const setSortOrderKind: (newSortOrderKind: SerialChartDataSortingKinds, config: ChartConfig, orderByList?: string[]) => void;
/**
 * Gets the x-axis field.
 * @param {ChartConfig} config - The chart config.
 * @returns {string}
 */
export declare const getXAxisField: (config: ChartConfig) => string;
/**
 * Get the name and description for the series.y based on the chart type and sub-type.
 * This function is used to determine the name and description for the y-axis in the chart configuration.
 *
 * @param {ChartConfig} props.config - The chart configuration object.
 * @param {string[]} props.numericFields - The list of numeric fields available in the data.
 * @param {WebChartStatisticType} props.aggregationType - The type of aggregation to apply to the numeric fields.
 * @param {PieChartDataModes} [props.mode] - [Optional] The mode for pie chart data, if applicable.
 * @param {FeatureLayerView | SupportedLayer} [props.layer] - [Optional] The layer from which the data is being queried.
 *
 * @returns {Object} An object containing the name and description for the series.y field.
 */
export declare const getYForNewSeries: (props: {
    config: ChartConfig;
    numericFields: string[];
    aggregationType: WebChartStatisticType;
    mode?: PieChartDataModes;
    layer?: FeatureLayerView | SupportedLayer;
    numericFieldIndex?: number;
    seriesIndex?: number;
    splitByField?: string;
}) => {
    name: string;
    description: string;
};
