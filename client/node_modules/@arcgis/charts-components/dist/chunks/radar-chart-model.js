import { WebChartTypes as n } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { aB as h, ap as o, Y as f, P as m } from "./interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { S, s as d, a as c } from "./serial-chart-model.js";
import { f as g, e as a, h as y } from "./data.js";
import "./model-with-y-guides.js";
import { M as u, a as p } from "./model-with-baseline-stacking.js";
import { s as b, a as I, b as C, c as k, d as M } from "./baseline-stacking.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
class L extends S {
  constructor() {
    super(...arguments), this._chartType = n.RadarSeries;
  }
  async setup(i) {
    await this.loadConfigFromLayer(i), this.commonStrings = await g(), i.config !== void 0 && this.updateSeriesFromLayerFilter(), await this.initDefaultSeries(), this.resolveSetup();
  }
  // ---------------------------------------------------------------------------------------------
  // Protected methods
  // ---------------------------------------------------------------------------------------------
  async generateDefaultConfig() {
    const i = await h();
    return i.series = [
      await o({
        objectIDField: this.layerInfo?.objectIdField
      })
    ], i;
  }
  /**
   * Initializes the default series for the radar chart. Used in resetting the series styling.
   * @category Private
   */
  async initDefaultSeries() {
    this.defaultSeries = await o({
      objectIDField: this.layerInfo?.objectIdField
    });
  }
  /**
   * Resets the series styling to the default styling.
   */
  resetSeriesStyling() {
    const i = this.getSeriesLength();
    for (let e = 0; e < i; e += 1) {
      const r = f({
        colorIndex: e,
        opacity: m
      });
      if (d(r, e, this._config), b(r, e, this._config), this.layerInfo !== void 0) {
        const t = this.getSeriesId(e), s = a({
          config: this._config,
          seriesIndex: e,
          layerInfo: this.layerInfo,
          commonStrings: this.commonStrings
        });
        s !== this.layerInfo.objectIdField && c(s ?? t, e, this._config);
      }
      I(this.defaultSeries?.lineSymbol?.style, e, this._config), C(this.defaultSeries?.lineSymbol?.width, e, this._config), k(this.defaultSeries?.markerSymbol?.style, e, this._config), M(this.defaultSeries?.markerSymbol?.size, e, this._config);
    }
    this._config.colorMatch = !0, this.emitConfigUpdate("resetSeriesStyling");
  }
  /**
   * Returns whether the series styling is able to be reset.
   * @returns {boolean}
   */
  resetAvailable() {
    const i = !this.getColorMatch();
    let e = !1;
    if (!i) {
      const r = this.getSeriesLength();
      for (let t = 0; t < r; t += 1) {
        if (this.layerInfo !== void 0) {
          const s = a({
            config: this._config,
            seriesIndex: t,
            layerInfo: this.layerInfo,
            commonStrings: this.commonStrings
          }), l = this.getSeriesName(t);
          s !== void 0 && s !== this.layerInfo.objectIdField && s !== l && (e = !0);
        }
        if (this.defaultSeries?.lineSymbol?.style !== void 0 && this.defaultSeries?.lineSymbol.style !== this.getSeriesLineStyle(t) || this.defaultSeries?.lineSymbol?.width !== void 0 && this.defaultSeries?.lineSymbol.width !== this.getSeriesLineWidth(t) || this.defaultSeries?.markerSymbol?.style !== void 0 && this.defaultSeries?.markerSymbol?.style !== this.getSeriesMarkerStyle(t) || this.defaultSeries?.markerSymbol?.size !== void 0 && this.defaultSeries?.markerSymbol?.size !== this.getSeriesMarkerSize(t)) {
          e = !0;
          break;
        }
      }
    }
    return i || e;
  }
}
y(L, [u, p]);
export {
  L as RadarChartModel
};
