import { c as u } from "../../chunks/runtime.js";
import { RESTSimpleLineSymbolStyle as i } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { P as f } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as C } from "../../chunks/popover-ui-utils.js";
import { U as v, b as y, m, s as b, c as g } from "../../chunks/chart-ui-utils2.js";
import { u as S } from "../../chunks/useT9n.js";
import { nothing as a, html as w } from "lit";
import { createRef as l, ref as r } from "lit-html/directives/ref.js";
import { LitElement as $, createEvent as s, safeClassMap as o } from "@arcgis/lumina";
import { css as x } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const n = {
  jsAppFlyout: "js-app-flyout",
  sizeSection: "size-section",
  dropdownText: "dropdown-text",
  panelChildrenContainer: "panel-children-container"
}, E = x`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host calcite-panel .size-section{padding:0 1rem 1rem;display:flex}:host calcite-panel .size-section calcite-label{flex:1 1 0px;width:0;padding:0}:host calcite-panel .size-section calcite-label .dropdown-text{max-width:75px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}.panel-children-container{display:flex;padding:0 1rem;margin-top:1rem}.panel-children-container calcite-label{flex:1 1 0px;display:flex;width:0px}`;
class I extends $ {
  constructor() {
    super(...arguments), this._messages = S(), this.popoverElement = l(), this.lineWidthInputElement = l(), this.lineStyleDropdownElement = l(), this.arcgisChartsConfigPopoverClose = s(), this.arcgisChartsConfigPopoverOpenChange = s(), this.arcgisChartsConfigSeriesPopoverColorChange = s(), this.arcgisChartsConfigSeriesPopoverLineStyleChange = s(), this.arcgisChartsConfigSeriesPopoverLineWidthChange = s(), this.arcgisChartsConfigSeriesPopoverNameChange = s();
  }
  static {
    this.properties = { messageOverrides: 0, referenceElement: 2, selectedName: 3, selectedColor: 2, selectedLineStyle: 3, selectedLineWidth: 11, placement: 3, open: 7 };
  }
  static {
    this.styles = E;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  willUpdate(e) {
    e.has("open") && (this.hasUpdated || !this.open) && this.openChange();
  }
  updated() {
    C(this.popoverElement.value, this.open), this.hasUpdated || setTimeout(() => {
      this.popoverElement.value?.reposition();
    }, v.PopoverTimer);
  }
  loaded() {
    this.openChange();
  }
  openChange() {
    this.arcgisChartsConfigPopoverOpenChange.emit({ open: this.open });
  }
  seriesNameChange(e) {
    const t = e.target.value;
    this.selectedName !== t && (this.selectedName = t, this.arcgisChartsConfigSeriesPopoverNameChange.emit({ name: t }));
  }
  closePopover() {
    this.open = !1, this.arcgisChartsConfigPopoverClose.emit();
  }
  colorChange(e) {
    const t = e instanceof CustomEvent ? e.detail : e, [c, p, d] = t, h = f * 255;
    this.selectedColor = [c, p, d, h], this.arcgisChartsConfigSeriesPopoverColorChange.emit({ color: [c, p, d, h] });
  }
  lineStyleChange() {
    const e = this.lineStyleDropdownElement.value?.selectedItems[0].accessKey;
    this.selectedLineStyle = e, this.arcgisChartsConfigSeriesPopoverLineStyleChange.emit({ lineStyle: e });
  }
  lineWidthChange() {
    const e = Number.parseInt(this.lineWidthInputElement.value?.value ?? "");
    this.lineWidthInputElement.value?.value !== void 0 && y(e, this.lineWidthInputElement.value.min, this.lineWidthInputElement.value.max) ? (this.selectedLineWidth = e, this.arcgisChartsConfigSeriesPopoverLineWidthChange.emit({ lineWidth: e }), m({
      inputElement: this.lineWidthInputElement.value,
      status: g.IDLE
    })) : this.lineWidthInputElement.value && m({
      inputElement: this.lineWidthInputElement.value,
      status: g.INVALID
    });
  }
  getSelectedLineStyleInfo() {
    let e, t;
    switch (this.selectedLineStyle) {
      case i.Dot:
        e = "line-dotted", t = this._messages.dot ?? "";
        break;
      case i.Dash:
        e = "line-dashed", t = this._messages.dash ?? "";
        break;
      case i.Solid:
      default:
        e = "line-solid", t = this._messages.solid ?? "";
        break;
    }
    return { icon: e, style: t };
  }
  render() {
    const e = this.selectedColor;
    return w`<div class=${o({ [n.jsAppFlyout]: !0 })}><calcite-popover .referenceElement=${this.referenceElement ?? document.body} .placement=${this.placement} @calcitePopoverClose=${this.closePopover} .open=${this.open} label ${r(this.popoverElement)}><calcite-panel .heading=${this._messages.seriesElement} closable .closed=${!this.open} @calcitePanelClose=${this.closePopover}><div class=${o(n.panelChildrenContainer)}><calcite-label>${this._messages.label}<calcite-input type=text .value=${this.selectedName} @calciteInputInput=${this.seriesNameChange}></calcite-input></calcite-label></div><div class=${o(n.sizeSection)}><calcite-label>${this._messages.style}<calcite-dropdown @calciteDropdownSelect=${this.lineStyleChange} ${r(this.lineStyleDropdownElement)}><calcite-button .iconEnd=${this.getSelectedLineStyleInfo().icon} slot=trigger kind=neutral appearance=outline-fill><label class=${o(n.dropdownText)}>${this.getSelectedLineStyleInfo().style}</label></calcite-button><calcite-dropdown-group><calcite-dropdown-item icon-end=line-solid .selected=${this.selectedLineStyle === i.Solid} accesskey=${i.Solid ?? a}>${this._messages.solid}</calcite-dropdown-item><calcite-dropdown-item icon-end=line-dotted .selected=${this.selectedLineStyle === i.Dot} accesskey=${i.Dot ?? a}>${this._messages.dot}</calcite-dropdown-item><calcite-dropdown-item icon-end=line-dashed .selected=${this.selectedLineStyle === i.Dash} accesskey=${i.Dash ?? a}>${this._messages.dash}</calcite-dropdown-item></calcite-dropdown-group></calcite-dropdown></calcite-label><calcite-label>${this._messages.width}<calcite-input type=number min=1 step=any .value=${b(this.selectedLineWidth)} @calciteInputInput=${this.lineWidthChange} ${r(this.lineWidthInputElement)}></calcite-input></calcite-label></div><div class=${o(n.panelChildrenContainer)}><arcgis-charts-config-colors .heading=${this._messages.lineColor} .rgba=${e} @colorSelect=${this.colorChange}></arcgis-charts-config-colors></div></calcite-panel></calcite-popover></div>`;
  }
}
u("arcgis-charts-config-line-chart-series-popover", I);
export {
  I as ArcgisChartsConfigLineChartSeriesPopover
};
