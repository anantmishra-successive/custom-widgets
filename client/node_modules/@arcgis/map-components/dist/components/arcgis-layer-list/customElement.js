import { c as i } from "../../chunks/runtime.js";
import { usePropertyChange as s } from "@arcgis/lumina/controllers";
import { reEmitEvent as o } from "@arcgis/lumina/controllers/accessor";
import a from "@arcgis/core/widgets/LayerList.js";
import { LitElement as r, createEvent as l, noShadowRoot as h } from "@arcgis/lumina";
import { m as d } from "../../chunks/useWidget.js";
import { s as n } from "../../chunks/layer-list.js";
import { c as g } from "../../chunks/createCloseEvent.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const c = d(a);
class m extends r {
  constructor() {
    super(...arguments), this.widget = c(this), this.viewModel = this.widget.viewModel, this.arcgisClose = g(this), this.autoDestroyDisabled = !1, this.catalogOptions = this.widget.catalogOptions, this.closed = !1, this.collapsed = this.widget.collapsed, this.dragEnabled = this.widget.dragEnabled, this.filterPlaceholder = this.widget.filterPlaceholder, this.filterPredicate = this.widget.filterPredicate, this.filterText = this.widget.filterText, this.headingLevel = this.widget.headingLevel, this.hideCatalogLayerList = this.widget.visibleElements.catalogLayerList, this.hideFlow = this.widget.visibleElements.flow, this.hideStatusIndicators = this.widget.visibleElements.statusIndicators, this.icon = this.widget.icon, this.knowledgeGraphOptions = this.widget.knowledgeGraphOptions, this.label = this.widget.label, this.listItemCreatedFunction = this.widget.listItemCreatedFunction, this.minDragEnabledItems = this.widget.minDragEnabledItems, this.minFilterItems = this.widget.minFilterItems, this.openedLayers = this.widget.openedLayers, this.position = "bottom-left", this.selectedItems = this.widget.selectedItems, this.selectionMode = this.widget.selectionMode, this.showCloseButton = this.widget.visibleElements.closeButton, this.showCollapseButton = this.widget.visibleElements.collapseButton, this.showErrors = this.widget.visibleElements.errors, this.showFilter = this.widget.visibleElements.filter, this.showHeading = this.widget.visibleElements.heading, this.showTemporaryLayerIndicators = this.widget.visibleElements.temporaryLayerIndicators, this.state = this.viewModel.state, this.visibilityAppearance = this.widget.visibilityAppearance, this.arcgisPropertyChange = s()("state"), this.arcgisReady = l(), this.arcgisTriggerAction = o(() => this.widget, "trigger-action");
  }
  static {
    this.properties = { autoDestroyDisabled: 5, catalogLayerList: 32, catalogOptions: 0, closed: 5, collapsed: 7, dragEnabled: 5, filterPlaceholder: 1, filterPredicate: 0, filterText: 1, headingLevel: 9, hideCatalogLayerList: 5, hideFlow: 5, hideStatusIndicators: 5, icon: 1, knowledgeGraphOptions: 0, label: 1, listItemCreatedFunction: 0, minDragEnabledItems: 9, minFilterItems: 9, openedLayers: 0, operationalItems: 32, position: 1, referenceElement: 1, selectedItems: 0, selectionMode: 1, showCloseButton: 5, showCollapseButton: 5, showErrors: 5, showFilter: 5, showHeading: 5, showTemporaryLayerIndicators: 5, state: 3, tableList: 32, visibilityAppearance: 1 };
  }
  static {
    this.shadowRootOptions = h;
  }
  static {
    this.styles = n;
  }
  get catalogLayerList() {
    return this.widget.catalogLayerList;
  }
  get operationalItems() {
    return this.widget.operationalItems;
  }
  get tableList() {
    return this.widget.tableList;
  }
  async destroy() {
    await this.manager.destroy();
  }
  async triggerAction(t, e) {
    this.widget?.triggerAction(t, e);
  }
}
i("arcgis-layer-list", m);
export {
  m as ArcgisLayerList
};
