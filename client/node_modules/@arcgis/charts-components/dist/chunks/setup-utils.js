import { M as o } from "./common.js";
import { s as r, t as n, u as c } from "./type-guards.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
async function s(a) {
  const i = "config" in a ? r(a.config) : a.chartType;
  let t;
  if (!("layer" in a) && !("iLayer" in a) && "config" in a && a.config.iLayer === void 0)
    throw new Error(
      "The source is missing. You can provide it to createModel through either `iLayer`, `layer`, or by setting the `config.iLayer` property."
    );
  switch (i) {
    case o.LineChart: {
      const { LineChartModel: e } = await import("./line-chart-model.js");
      t = new e();
      break;
    }
    case o.ComboBarLineChart: {
      const { ComboBarLineChartModel: e } = await import("./combo-bar-line-chart-model.js");
      t = new e();
      break;
    }
    case o.PieChart: {
      const { PieChartModel: e } = await import("./pie-chart-model.js");
      t = new e();
      break;
    }
    case o.Histogram: {
      const { HistogramModel: e } = await import("./histogram-model.js");
      t = new e();
      break;
    }
    case o.Scatterplot: {
      const { ScatterplotModel: e } = await import("./scatterplot-model.js");
      t = new e();
      break;
    }
    case o.BoxPlot: {
      const { BoxPlotModel: e } = await import("./box-plot-model.js");
      t = new e();
      break;
    }
    case o.Gauge: {
      const { GaugeModel: e } = await import("./gauge-model.js");
      t = new e();
      break;
    }
    case o.RadarChart: {
      const { RadarChartModel: e } = await import("./radar-chart-model.js");
      t = new e();
      break;
    }
    case o.BarChart:
    default: {
      const { BarChartModel: e } = await import("./bar-chart-model.js");
      t = new e();
      break;
    }
  }
  if (await t?.setup({
    layer: "layer" in a ? a.layer : void 0,
    iLayer: "iLayer" in a ? a.iLayer : void 0,
    config: "config" in a ? a.config : void 0
  }), i !== void 0 && n(t, i))
    return t;
  {
    const e = c(t.getChartType());
    throw new Error(
      `Please check the arguments provided to \`createModel\`. The generated model's type (\`${e}\`) does not match the type specified by either the \`chartType\` or the \`config\` argument (\`${i}\`).`
    );
  }
}
export {
  s as c
};
