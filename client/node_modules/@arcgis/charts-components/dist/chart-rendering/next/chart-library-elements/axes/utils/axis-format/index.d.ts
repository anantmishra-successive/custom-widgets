import { Axis, AxisRenderer } from '@amcharts/amcharts5/xy.js';
import { ErrorStrings } from '../../../../../../utils';
import { WebChart, WebChartAxis, WebChartDataItem, WebChartDataItemValue, WebChartTypes } from '@arcgis/charts-spec';
import { AxisLabelFormatCallback } from '../../../../../common/interfaces';
/**
 * Checks whether the WebChartAxis valueFormat is in sync with the amCharts Axis' instance type
 *
 * @param props.axis The axis
 * @param props.valueFormat The axis value format
 * @param props.chartType The type of chart
 */
export declare function isValueFormatIncompatibleWithAxisType(props: {
    axis: Axis<AxisRenderer>;
    valueFormat: WebChartAxis["valueFormat"];
    chartType?: WebChartTypes;
}): boolean;
/**
 * Get the label value for a Category axis for formatting
 *
 * @param props.dataContext the context of where the label is from
 * @param props.defaultValue the default value of the label
 * @param props.chartUID chart uid that the axis belongs too
 */
export declare function getLabelFromContext(props: {
    dataContext?: WebChartDataItem;
    defaultValue?: string;
    chartUID: number;
}): {
    labelValue: Date | number | string | null | undefined;
    originalLabelValue: WebChartDataItemValue;
};
/**
 * Updates the axis to order correctly if chart is rotated
 *
 * @param props.axis The axis on which to define the proper label formatting
 * @param props.isRotated The format option if the chart is rotated
 * @param props.chartConfig The chart's config
 */
export declare function updateAxisOrdering(props: {
    axis: Axis<AxisRenderer>;
    isRotated: boolean | undefined;
    chartConfig: WebChart;
}): void;
/**
 * Updates the formatter used by the axis to render the labels.
 *
 * @param props.axis The axis on which to define the proper label formatting
 * @param props.isXAxis Boolean indicating whether the axis is the x-axis
 * @param props.chartType The type of chart
 * @param props.formatOptions The format options for the axis
 * @param props.isNonAggregatedChart Whether the chart is non-aggregated
 * @param props.overridePercentMultiplication Whether to divide the elements' value by 100 (true = divide)
 * @param props.externalAxisLabelFormatter An HTML formatter for the axis labels
 * @param props.errorStrings The error strings
 */
export declare function updateAxisFormat(props: {
    axis: Axis<AxisRenderer>;
    isXAxis: boolean;
    chartType?: WebChartTypes;
    formatOptions: WebChartAxis["valueFormat"];
    isNonAggregatedChart?: boolean;
    overridePercentMultiplication?: boolean;
    externalAxisLabelFormatter?: AxisLabelFormatCallback;
    errorStrings: ErrorStrings;
}): Promise<void>;
