import { WebChart } from '@arcgis/charts-spec';
import { BarChartModel, BoxPlotModel, ChartModel, HistogramModel, LineChartModel, ModelOfType, ModelTypes, PieChartModel, ScatterplotModel, SerialChartModel } from '..';
import { ModelWithBasicXAxis, ModelWithDataLabels, ModelWithGuides, ModelWithLegend, ModelWithRotation, ModelWithTemporalBinning, ModelWithXGuides, ModelWithXYAxes, ModelWithYGuides } from '../mixins/index';
/**
 * Determines if the provided model or config is a `ChartModel`.
 * @param model The model to check.
 */
export declare function isChartModel(model: ChartModel | WebChart | undefined): model is ChartModel;
/**
 * Determines if the provided `model` is of type `BarChartModel`.
 * @param model The model to check.
 */
export declare function isBarChartModel(model: ChartModel | undefined): model is BarChartModel;
/**
 * Determines if the provided `model` is of type `LineChartModel`.
 * @param model The model to check.
 */
export declare function isLineChartModel(model: ChartModel | undefined): model is LineChartModel;
/**
 * Determines if the provided `model` is of type `SerialChartModel`.
 * This includes LineSeries, BarSeries, ComboLineAndBarSeries, and RadarSeries.
 * @param model The model to check.
 */
export declare function isSerialChartModel(model: SerialChartModel | undefined): model is SerialChartModel;
/**
 * Determines if the provided `model` is of type `PieChartModel`.
 * @param model The model to check.
 */
export declare function isPieChartModel(model: ChartModel | undefined): model is PieChartModel;
/**
 * Determines if the provided `model` is of type `BoxPlotModel`.
 * @param model The model to check.
 */
export declare function isBoxPlotModel(model: ChartModel | undefined): model is BoxPlotModel;
/**
 * Determines if the provided `model` is of type `ScatterplotModel`.
 * @param model The model to check.
 *
 */
export declare function isScatterplotModel(model: ChartModel | undefined): model is ScatterplotModel;
/**
 * Determines if the provided `model` is of type `HistogramModel`.
 * @param model The model to check.
 */
export declare function isHistogramModel(model: ChartModel | undefined): model is HistogramModel;
/**
 * Type guard for ModelWithBasicXAxis
 * @param model
 */
export declare function isModelWithBasicXAxis(model: ChartModel | undefined): model is ModelWithBasicXAxis;
/**
 * Type guard for ModelWithXYAxes
 * @param model
 */
export declare function isModelWithXYAxes(model: ChartModel | undefined): model is ModelWithXYAxes;
/**
 * Type guard for ModelWithRotation
 * @param model
 */
export declare function isModelWithRotation(model: ChartModel | undefined): model is ModelWithRotation;
/**
 * Determines if the provided `model` is of type `ModelWithDataLabels`.
 * @param model The model to check.
 */
export declare function isModelWithDataLabels(model: ChartModel | undefined): model is ModelWithDataLabels;
/**
 * Determines if the provided `model` is of type `ModelWithGuides`.
 * @param model The model to check.
 */
export declare function isModelWithGuides(model: ChartModel | undefined): model is ModelWithGuides;
/**
 * Determines if the provided `model` is of type `ModelWithXGuides`.
 * @param model The model to check.
 */
export declare function isModelWithXGuides(model: ChartModel | undefined): model is ModelWithXGuides;
/**
 * Determines if the provided `model` is of type `ModelWithYGuides`.
 * @param model The model to check.
 */
export declare function isModelWithYGuides(model: ChartModel | undefined): model is ModelWithYGuides;
/**
 * Determines if the provided `model` is of type `ModelWithLegend`.
 * @param model The model to check.
 */
export declare function isModelWithLegend(model: ChartModel | undefined): model is ModelWithLegend;
/**
 * Determines if the provided `model` is of type `ModelWithTemporalBinning`.
 * @param model The model to check.
 */
export declare function isModelWithTemporalBinning(model: ChartModel | undefined): model is ModelWithTemporalBinning;
/**
 * Determines if the provided model's type matches the `type` argument.
 * @param model The model to check.
 */
export declare function isModelOfType<T extends ModelTypes | undefined>(model: ChartModel | undefined, type: T): model is ModelOfType<T>;
