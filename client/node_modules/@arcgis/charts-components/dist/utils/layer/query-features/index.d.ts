/// <reference types="@arcgis/core/interfaces.d.ts" />
import { WebChartCalendarBasedBinning, WebChartDataItem, WebChartFixedDateBinning, WebChartQuery } from '@arcgis/charts-spec';
import { default as AttributeBinsFeatureSet } from '@arcgis/core/rest/support/AttributeBinsFeatureSet.js';
import { ErrorStrings } from '../../../assets/t9n/utils/interfaces';
import { ChartSubType } from '../../misc/interfaces';
import { QueryObject } from '../interfaces';
import { AbortControllerKeyType, Features } from './interfaces';
/**
 * Performs a query analytic.
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery
 * @param props.outAnalytics The out analytics
 * @param props.outputFormat The output format
 * @param props.dataFormat The data format
 */
export declare function queryAnalytic(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    outAnalytics: string;
    outputFormat: string;
    dataFormat: string;
}): Promise<WebChartDataItem | undefined>;
/**
 * Generates the aliases to use in the queryAttributeBins query to name the stacks and boundaries for the x field
 * @param x The x field used for the stack alias
 * @param y The y field used by the stacks
 */
export declare function getQueryAttributeBinsForScatterplotFieldsAlias(x: string, y: string): {
    lowerBoundaryAlias: string;
    upperBoundaryAlias: string;
    stackAlias: string;
};
/**
 * Uses query(Attribute)Bins to fetch the aggregated scatterplot data
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The query configuration
 * @param props.xStep The x step
 * @param props.yStep The y step
 * @param props.xMin The x min
 * @param props.xMax The x max
 * @param props.x The x field
 * @param props.y The y field
 * @param props.errorStrings The t9n error strings
 */
export declare function queryAttributeBinsForScatterplot(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    xStep: number;
    yStep: number;
    xMin: number;
    xMax: number;
    x: string;
    y: string;
    errorStrings: ErrorStrings;
}): Promise<AttributeBinsFeatureSet | undefined>;
/**
 * Performs a query feature count based on the provided parameters.
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.chartSubType The chart sub type
 * @param props.x The x field
 * @param props.isGaugeByFeature Indicate whether it's a gauge by feature. Will be defaulted to `false` if not provided.
 */
export declare function queryFeatureCount(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    chartSubType: ChartSubType;
    x: string;
    isGaugeByFeature?: boolean;
}): Promise<number | undefined>;
/**
 * Fetches multiple statistics (min, max, count...).
 * Returns an object mapping the outStatisticFieldName with its value
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.abortKey The key to abort the query
 */
export declare function queryStatistics<T extends Date | number | string>(props: {
    queryObject: QueryObject;
    queryConfig: WebChartQuery;
    abortKey?: AbortControllerKeyType;
}): Promise<Map<string, T>>;
/**
 * Fetches all the features from the input QueryObject, according to the other specified input settings (query, outFields...).
 * Handles the paging.
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.returnUniqueIdsOnly If true, the function will return only the unique IDs of the features
 * @param props.featureCount The number of features to fetch
 * @param props.noBatch If true, the function will not use the batching mechanism
 * @param props.abortKey The key to abort the query
 */
export declare function queryAllFeatures(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    returnUniqueIdsOnly?: boolean;
    featureCount?: number;
    noBatch?: boolean;
    abortKey?: AbortControllerKeyType;
}): Promise<Features>;
/**
 * Fetches the extent of all the features that are represented by their object ids
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.uniqueFeature Whether the query is made to fetch a unique feature
 * @param props.abortKey The key to abort the query
 */
export declare function queryUniqueIDs(props: {
    queryObject?: QueryObject;
    queryConfig: WebChartQuery;
    uniqueFeature?: boolean;
    abortKey?: AbortControllerKeyType;
}): Promise<number[]>;
/**
 * Aborts all existing queries and initializes a controller for new ones. The queries are associated
 * to a unique key to avoid cancelling queries for other charts.
 * @param key The key pointing to the abort controller to execute
 */
export declare function abortPendingQueries(key?: AbortControllerKeyType): void;
export declare function getQueryAttributeBinsForTemporalDataAliases(x: string): {
    lowerBoundaryAlias: string;
    upperBoundaryAlias: string;
};
/**
 * Fetches binned temporal data using queryAttributeBins().
 * TODO: support for offset
 * TODO: support for abortKey input parameter
 * @param props.queryObject The object used to query (FL or FLV)
 * @param props.queryConfig The WebChartQuery containing parameters about the query to execute
 * @param props.temporalBinning The temporal binning configuration
 * @param props.dateField The date field to bin
 * @param props.splitByField The split-by field
 * @param props.abortKey The key to abort the query
 */
export declare function queryAttributeBinsForTemporalData(props: {
    queryObject?: QueryObject;
    queryConfig: WebChartQuery;
    temporalBinning?: WebChartCalendarBasedBinning | WebChartFixedDateBinning;
    dateField: string;
    splitByField?: string;
    abortKey?: AbortControllerKeyType;
}): Promise<__esri.AttributeBinsGraphic[]>;
