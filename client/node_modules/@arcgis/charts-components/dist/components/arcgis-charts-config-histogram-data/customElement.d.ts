/// <reference types="../../index.d.ts" />
import { HistogramModel } from '../../model';
import { IField, ISimpleFillSymbol } from '@arcgis/charts-spec';
import { DataChangeErrorPayload, PopoverChangePayload, PopoverOpenChangePayload } from '../../utils/components/event-payloads';
import { PropertyValues } from 'lit';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';

/** @private */
export declare class ArcgisChartsConfigHistogramData extends LitElement {
    /** Overwrite localized strings for this component */
    messageOverrides?: typeof this._messages._overrides;
    /**
     * Histogram Model.
     *
     * @category Public
     */
    model: HistogramModel;
    /**
     * meanValue represents the mean statistic of the histogram.
     *
     * @category Public
     */
    meanValue?: number;
    /**
     * medianValue represents the median statistic of the histogram.
     *
     * @category Public
     */
    medianValue?: number;
    /**
     * standardDevValue represents the standard deviation statistic of the histogram.
     *
     * @category Public
     */
    standardDevValue?: number;
    /**
     * minValue represents the minimum value statistic of the histogram.
     *
     * @category Public
     */
    minValue?: number;
    /**
     * maxValue represents the maximum value statistic of the histogram.
     *
     * @category Public
     */
    maxValue?: number;
    /**
     * sumValue represents the sum value statistic of the histogram.
     *
     * @category Public
     */
    sumValue?: number;
    /**
     * nullsValue represents the number for null values statistic of the histogram.
     *
     * @category Public
     */
    nullsValue?: number;
    /**
     * countValue represents the number for non-null values used to calculate the histogram.
     *
     * @category Public
     */
    countValue?: number;
    /**
     * Fields Information of the Feature layer
     *
     * @category Public
     */
    layerFieldsInfo: IField[];
    /**
     * When true, the content of the component will be displayed.
     *
     * @default false
     */
    open?: boolean;
    readonly arcgisChartsConfigDataChangeError: TargetedEvent<this, DataChangeErrorPayload>;
    /**
     * Event when there is change in histogram data popover.
     *
     * @category Public
     */
    readonly arcgisChartsConfigHistogramDataPopoverChange: TargetedEvent<this, PopoverChangePayload>;
    /**
     * Event emitted when the popover is closed.
     *
     * @category Public
     */
    readonly arcgisChartsConfigPopoverOpenChange: TargetedEvent<this, PopoverOpenChangePayload>;
    private _messages;
}
