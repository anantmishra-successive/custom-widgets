import { ChartConfig } from '../../utils';
import { Color, RESTSimpleLineSymbolStyle, RESTSimpleMarkerSymbolStyle } from '@arcgis/charts-spec';
import { ChartModel } from '../chart-model/chart-model';
import { ModelTypes } from '../interfaces/common';
export declare abstract class ModelWithLineMarkerStyling extends ChartModel {
    protected _config: ChartConfig<typeof ModelTypes.LineChart> | ChartConfig<typeof ModelTypes.RadarChart>;
    /**
     * Gets the line style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {RESTSimpleLineSymbolStyle | undefined}
     */
    getSeriesLineStyle(seriesIndex: number): RESTSimpleLineSymbolStyle | undefined;
    /**
     * Sets the line style of the series based on the series index.
     * @param {RESTSimpleLineSymbolStyle | undefined} style The new style for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesLineStyle(style: RESTSimpleLineSymbolStyle | undefined, seriesIndex: number): void;
    /**
     * Gets the line width of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {number | undefined}
     */
    getSeriesLineWidth(seriesIndex: number): number | undefined;
    /**
     * Sets the line width of the series based on the series index.
     * @param {number | undefined} width The new width for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesLineWidth(width: number | undefined, seriesIndex: number): void;
    /**
     * Gets the marker color of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {Color | undefined}
     */
    getSeriesMarkerColor(seriesIndex: number): Color | undefined;
    /**
     * Sets the marker color of the series based on the series index.
     * @param {Color | undefined} color The new color for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesMarkerColor(color: Color | undefined, seriesIndex: number): void;
    /**
     * Gets the marker style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {RESTSimpleMarkerSymbolStyle | undefined}
     */
    getSeriesMarkerStyle(seriesIndex: number): RESTSimpleMarkerSymbolStyle | undefined;
    /**
     * Sets the marker style of the series based on the series index.
     * @param {RESTSimpleMarkerSymbolStyle | undefined} style The new style for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesMarkerStyle(style: RESTSimpleMarkerSymbolStyle | undefined, seriesIndex: number): void;
    /**
     * Gets the marker size of the series based on the series index. If the index is out of bounds, it will return `undefined`.
     * @param {number} seriesIndex The index of the series.
     * @returns {number | undefined}
     */
    getSeriesMarkerSize(seriesIndex: number): number | undefined;
    /**
     * Sets the marker size of the series based on the series index.
     * @param {number | undefined} size The new size for the series.
     * @param {number} seriesIndex The index of the series.
     */
    setSeriesMarkerSize(size: number | undefined, seriesIndex: number): void;
    /**
     * Specify whether line segments of the series should be smoothed.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default false
     * @returns {boolean}
     */
    isLineSmoothed(seriesIndex: number): boolean;
    /**
     * Specify whether line segments of the series should be smoothed.
     * @param {boolean} props.smoothed - `true` if line segment of the series should be smoothed, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     */
    setLineSmoothed(smoothed: boolean, seriesIndex: number): void;
    /**
     * Specify the color of the filled area for line chart.
     * @param {number} seriesIndex - The index of the series.
     *
     * @returns {boolean | undefined}
     */
    getConnectLines(seriesIndex: number): boolean | undefined;
    /**
     * Specify the color of the filled area for line chart.
     * @param {boolean | undefined} props.color - The color of the filled area for line chart.
     * @param {number} props.seriesIndex - The index of the series.
     *
     * NOTE: Can be overridden by the temporal data setting `nullPolicy`.
     *
     */
    setConnectLines(connect: boolean | undefined, seriesIndex: number): void;
    /**
     * Specify whether the line series should show area.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default false
     * @returns {boolean}
     */
    isAreaVisible(seriesIndex: number): boolean;
    /**
     * Specify whether the line series should show area.
     * @param {boolean} props.visible - `true` if the line series should show area, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     */
    setAreaVisible(visible: boolean, seriesIndex: number): void;
    /**
     * Indicate whether to show or hide the markers/bullets of the line series.
     * @param {number} seriesIndex - The index of the series.
     *
     * @default true
     * @returns {boolean}
     */
    isMarkerVisible(seriesIndex: number): boolean;
    /**
     * Indicate whether to show or hide the markers/bullets of the line series.
     * @param {boolean} props.visible - `true` if the markers/bullets of the line series should be shown, `false` otherwise.
     * @param {number} props.seriesIndex - The index of the series.
     */
    setMarkerVisible(visible: boolean, seriesIndex: number): void;
    /**
     * Specify the color of the filled area for line chart.
     * @param {number} seriesIndex - The index of the series.
     *
     * NOTE: areaColor will be applied only if `showArea` is true, and is defaulted to the line color if not provided.
     *
     * @returns {Color | undefined}
     */
    getAreaColor(seriesIndex: number): Color | undefined;
    /**
     * Specify the color of the filled area for line chart.
     * @param {Color | undefined} props.color - The color of the filled area for line chart.
     * @param {number} props.seriesIndex - The index of the series.
     */
    setAreaColor(color: Color | undefined, seriesIndex: number): void;
}
