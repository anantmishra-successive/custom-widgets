/// <reference types="@arcgis/core/interfaces.d.ts" />
import { SupportedLayer, WebChartCalendarBasedBinning, WebChartFixedDateBinning, WebChartQuery } from '@arcgis/charts-spec';
import { default as Geometry } from '@arcgis/core/geometry/Geometry';
import { default as AttributeBinsQuery } from '@arcgis/core/rest/support/AttributeBinsQuery.js';
import { default as Query } from '@arcgis/core/rest/support/Query.js';
import { default as TimeExtent } from '@arcgis/core/time/TimeExtent.js';
import { QueryObject } from '../interfaces';
/**
 * Indicates whether a query can be cached. It is not when:
 * - a geometry is set (unless it's an extent)
 * - a date filter is set
 * @param query The query object or query parameters
 */
export declare function isQueryCacheable(query: __esri.QueryProperties | AttributeBinsQuery | Query): boolean;
export declare function getMaxRecords(layer?: SupportedLayer): number;
/**
 * Function building a where clause by concatenating a list of filters by using the AND operator.
 * @param filterList The list of filters to combine
 * @param operand The operand to use to combine the filters (OR, AND...)
 */
export declare function combineFilters(filterList: (string | null | undefined)[], operand?: string): string;
/**
 * Computes the time extent to be used by the query.
 * @param queryObject The layer or feature layer view
 * @param defaultTimeExtent The time extent defined at the series config level or provided at runtime
 */
export declare function getQueryTimeExtent(queryObject: QueryObject, defaultTimeExtent?: WebChartQuery["timeExtent"]): WebChartQuery["timeExtent"] | undefined;
/**
 * Computes the extent to be used by the query. We prioritize the feature layer view extent
 * over the series config extent, unless `ignoreViewExtent` is set to true.
 * @param props.queryObject The layer or feature layer view
 * @param props.defaultGeometry The geometry defined at the series config level or provided at runtime
 * @param props.ignoreViewExtent Whether to ignore the view's extent
 */
export declare function getQueryGeometry(props: {
    queryObject: QueryObject;
    defaultGeometry?: WebChartQuery["geometry"];
    ignoreViewExtent?: boolean;
}): WebChartQuery["geometry"] | undefined;
/**
 * Transforms a [timestamp, timestamp] to a JSAPI TimeExtent object
 * @param timeExtentConfig The time extent filter from the config
 */
export declare function mapQueryTimeExtent(timeExtentConfig?: WebChartQuery["timeExtent"]): TimeExtent | undefined;
/**
 * Transforms a IGeometry to a JSAPI Geometry
 * @param geometryConfig The geometry from the config
 */
export declare function mapQueryGeometry(geometryConfig?: WebChartQuery["geometry"]): Geometry | null | undefined;
/**
 * Maps properties from a WebChartQuery and properties specific to temporal binning into an AttributeBinsQuery object.
 * @param props.queryObject The layer or feature layer view
 * @param props.queryConfig The query configuration
 * @param props.temporalBinning The temporal binning configuration
 * @param props.dateField The date field to bin
 * @param props.splitByField The split-by field
 */
export declare function mapAttributeBinsQueryForTemporalData(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    temporalBinning: WebChartCalendarBasedBinning | WebChartFixedDateBinning;
    dateField: string;
    splitByField?: string;
}): Promise<AttributeBinsQuery>;
/**
 * Maps properties from a WebChartQuery and properties specific to temporal binning into an AttributeBinsQuery object.
 * @param props.queryObject The layer or feature layer view
 * @param props.queryConfig The query configuration
 * @param props.xStep The x step
 * @param props.yStep The y step
 * @param props.xMin The x min
 * @param props.xMax The x max
 * @param props.x The x field
 * @param props.y The y field
 */
export declare function mapAttributeBinsQueryForScatterplot(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    xStep: number;
    yStep: number;
    xMin: number;
    xMax: number;
    x: string;
    y: string;
}): AttributeBinsQuery;
/**
 * Maps properties from a WebChartQuery into a Query object.
 * @param props.queryObject The layer or feature layer view
 * @param props.queryConfig The query configuration
 * @param props.maxRecordCountFactor When set, the maximum number of features returned by the query will equal the `maxRecordCount` of the service multiplied by this factor.
 */
export declare function mapQuery(props: {
    queryObject?: QueryObject;
    queryConfig?: WebChartQuery;
    maxRecordCountFactor?: number;
}): Query;
export declare function getMaxRecordCountFactor(layer?: SupportedLayer): number | undefined;
