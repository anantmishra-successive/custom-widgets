import { WebChartStatisticType as r, RESTSimpleLineSymbolStyle as l, defaultBarLineFromFieldsName as f } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { bS as d, ck as u } from "./interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { F as n } from "./interfaces2.js";
import { F as a } from "./common.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const h = {
  DebounceTimer: 400,
  SliderTimer: 100,
  PopoverTimer: 60,
  customSortLimit: 100
}, x = {
  style: "decimal",
  minimumFractionDigits: 0,
  maximumFractionDigits: 3
}, A = [
  r.Count,
  r.Sum,
  r.Average,
  r.ContinuousPercentile,
  r.Minimum,
  r.Maximum,
  r.NoAggregation
], E = [r.Count, r.Sum];
function V(e) {
  let t;
  switch (e) {
    case a.Title:
    case a.XAxisTitle:
    case a.YAxisTitle:
    case a.LegendTitle: {
      t = n.Title;
      break;
    }
    case a.Description:
    case a.LegendText: {
      t = n.Text;
      break;
    }
    case a.AxisLabels:
    case a.GuideLabels:
    case a.DataLabels: {
      t = n.Label;
      break;
    }
    case a.Background:
    case a.LeaderLines:
    case a.AxisLines:
    case a.GridLines: {
      t = n.Palette;
      break;
    }
  }
  return t;
}
function C(e, t, i) {
  let s = !1;
  const o = typeof e == "string" ? Number.parseFloat(e) : e, m = typeof t == "string" ? Number.parseFloat(t) : t, c = typeof i == "string" ? Number.parseFloat(i) : i;
  return Number.isNaN(o) || (s = (m === void 0 || Number.isNaN(m) || o >= m) && (c === void 0 || Number.isNaN(c) || o <= c)), s;
}
function P(e, t) {
  let i;
  if (e !== null) {
    const s = typeof e == "string" ? Number.parseFloat(e) : e;
    u(s) ? i = s : u(t) && (i = t);
  }
  return i === void 0 ? "" : `${i}`;
}
function z(e) {
  const { inputElement: t, status: i } = e;
  t.status = i;
}
const w = {
  IDLE: "idle",
  INVALID: "invalid"
};
function K(e, t) {
  let i = "";
  if (e !== void 0 && !Number.isNaN(e)) {
    const { formatLocale: s } = d();
    i = Intl.NumberFormat(s, t).format(e);
  }
  return i;
}
function M(e, t) {
  let i = !1;
  if (t !== void 0) {
    const s = typeof t == "string" ? t.trim() : t, o = e.trim();
    typeof t == "string" ? i = s === o || s === f && o === "" : i = s.includes(o);
  }
  return i;
}
function U(e) {
  let t;
  switch (e) {
    case "trailing":
      t = -200;
      break;
    case "leading":
      t = 20;
      break;
    default:
      t = 0;
      break;
  }
  return t;
}
function B(e) {
  return e === void 0 || Number.isNaN(e.r) || Number.isNaN(e.g) || Number.isNaN(e.b) ? null : e;
}
const G = (e) => {
  ["e", "E"].includes(e.key) && e.preventDefault();
}, j = (e) => {
  const t = document.createElement("calcite-tooltip");
  return t.referenceElement = e, t.open = !0, t.placement = "top", t.style.setProperty("opacity", "1"), t.style.zIndex = "var(--calcite-floating-ui-z-index)", t;
}, O = (e) => {
  e !== void 0 && (e.style.removeProperty("opacity"), e.remove());
}, R = (e) => {
  if (e.pickListElement !== void 0) {
    const t = e.pickListElement.selectedItems;
    e.eventEmitter.emit({
      contentKind: e.contentKind,
      value: t.map((i) => i.value)
    });
  }
};
function W(e) {
  let t = "solid";
  switch (e) {
    case l.Dash:
      t = "dashed";
      break;
    case l.Dot:
      t = "dotted";
      break;
    case l.Solid:
    default:
      t = "solid";
      break;
  }
  return t;
}
export {
  x as D,
  h as U,
  U as a,
  C as b,
  w as c,
  j as d,
  O as e,
  K as f,
  W as g,
  R as h,
  M as i,
  A as j,
  G as k,
  B as l,
  z as m,
  V as n,
  E as p,
  P as s
};
