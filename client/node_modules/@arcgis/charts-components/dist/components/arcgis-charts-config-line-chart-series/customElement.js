import { c as f } from "../../chunks/runtime.js";
import { keyed as u } from "lit-html/directives/keyed.js";
import "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { cs as P } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as L, c as I, P as y } from "../../chunks/popover-ui-utils.js";
import { LitElement as x, createEvent as h, safeStyleMap as b } from "@arcgis/lumina";
import { html as o } from "lit";
import { repeat as O } from "lit-html/directives/repeat.js";
import { u as $ } from "../../chunks/useT9n.js";
import { g as M } from "../../chunks/chart-ui-utils2.js";
import { css as k } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const N = k`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}`;
class T extends x {
  constructor() {
    super(...arguments), this._messages = $(), this.seriesPopover = null, this.seriesNameChange = (e) => {
      if (e.detail !== null || e.detail !== void 0) {
        const s = e.detail?.name;
        this.model.setSeriesName(s, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesColorChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { color: s } = e.detail;
        this.model.setColorMatch(!1), s !== void 0 && (this.model.setSeriesColor(s, this.selectedSeriesIndex ?? -1), this.model.setSeriesMarkerColor(s, this.selectedSeriesIndex ?? -1));
      }
    }, this.seriesLineStyleChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { lineStyle: s } = e.detail;
        s !== void 0 && this.model.setSeriesLineStyle(s, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesLineWidthChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { lineWidth: s } = e.detail;
        s !== void 0 && (this.model.setSeriesLineWidth(s, this.selectedSeriesIndex ?? -1), this.model.setSeriesMarkerSize(s * 2, this.selectedSeriesIndex ?? -1));
      }
    }, this.seriesPopoverClose = () => {
      this.selectedSeriesIndex = void 0, this.configSeriesOpen = !1;
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.seriesOrderResetCounter = 0, this.configSeriesOpen = !1, this.activeColorMatch = !1, this.popoverPlacement = "leading", this.arcgisChartsConfigLineChartSeriesPopoverChange = h(), this.arcgisChartsConfigPopoverOpenChange = h();
  }
  static {
    this.properties = { selectedSeriesIndex: 16, seriesOrderResetCounter: 16, messageOverrides: 0, model: 0, configSeriesOpen: 5, activeColorMatch: 5, popoverPlacement: 1 };
  }
  static {
    this.styles = N;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("selectedSeriesIndex") && this.selectedSeriesIndexChange();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeSeriesPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, s) {
    s?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  selectedSeriesIndexChange() {
    this.selectedSeriesIndex !== void 0 && this.configSeriesOpen ? (this.setupSeriesPopover(), this.seriesPopover !== null && (this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex), this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex), this.seriesPopover.selectedLineStyle = this.model.getSeriesLineStyle(this.selectedSeriesIndex), this.seriesPopover.selectedLineWidth = this.model.getSeriesLineWidth(this.selectedSeriesIndex), this.seriesPopover.open || (this.seriesPopover.open = !0)), this.addSeriesPopover()) : this.removeSeriesPopover();
  }
  removeSeriesPopover() {
    this.seriesPopover !== void 0 && this.seriesPopover !== null && (this.seriesPopover.open = !1, this.seriesPopover = L(this.seriesPopover)), this.seriesPopoverChange(!1);
  }
  buildSeriesListItems() {
    const e = this.model.getSeriesLength(), s = Array.from({ length: e }, (i, t) => t);
    return O(s, (i) => this.model.getSeriesId(i), (i) => {
      const t = this.model.getSeriesId(i), n = this.model.getSeriesColor(i), d = this.model.getSeriesName(i), c = this.model.getChartSubType() === P.BarAndLineFromFields ? this._messages.series : t, p = this.model.getSeriesLineStyle(i), m = M(p);
      let l = "#CCCCCC", a = "minus-circle";
      if ((e > 1 || !this.activeColorMatch) && n !== void 0) {
        a = `line-${m}`;
        const [g, C, S, v] = [...n];
        l = `rgba(${g},${C},${S},${v / 255})`;
      }
      return o`<calcite-list-item .label=${d ?? t ?? ""} .description=${c} .value=${t} .selected=${this.selectedSeriesIndex === i} @click=${this.openSeriesPopOver}><calcite-icon slot=content-end .icon=${a} style=${b({ color: l })}></calcite-icon></calcite-list-item>`;
    });
  }
  buildSeriesList() {
    return u(this.seriesOrderResetCounter, o`<calcite-list label drag-enabled selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildSeriesListItems()}</calcite-list>`);
  }
  async resetSeriesOriginal() {
    this.configSeriesOpen = !1, this.selectedSeriesIndex = void 0, this.model.resetSeriesStyling(), this.seriesOrderResetCounter += 1;
  }
  onCalciteListOrderChange(e) {
    if (e.detail !== null && e.detail !== void 0) {
      const { newIndex: s, oldIndex: r } = e.detail;
      this.model.moveSeries(r, s), this.seriesOrderResetCounter += 1;
    }
  }
  seriesPopoverChange(e) {
    this.arcgisChartsConfigLineChartSeriesPopoverChange.emit({
      open: e,
      element: this.seriesPopover
    });
  }
  openSeriesPopOver(e) {
    const s = e.target, r = s.localName === "calcite-list-item" ? s : s.parentNode, i = !this.configSeriesOpen, t = this.model.getSeriesIndex(r.value);
    this.configSeriesOpen = this.selectedSeriesIndex === t ? i : !0, this.configSeriesOpen ? this.selectedSeriesIndex = t : this.selectedSeriesIndex = void 0;
  }
  setupSeriesPopover() {
    if (this.seriesPopover === null && this.el !== void 0) {
      const e = {
        referenceElement: this.el,
        placement: this.popoverPlacement,
        seriesNameChange: this.seriesNameChange,
        seriesColorChange: this.seriesColorChange,
        seriesLineStyleChange: this.seriesLineStyleChange,
        seriesLineWidthChange: this.seriesLineWidthChange,
        openChange: this.openChange,
        popoverClose: this.seriesPopoverClose
      };
      this.seriesPopover = I(y.LineChartSeriesPopover, e);
    }
  }
  addSeriesPopover() {
    this.seriesPopover != null && !document.body.contains(this.seriesPopover) && document.body.appendChild(this.seriesPopover), this.seriesPopoverChange(!0);
  }
  render() {
    return o`<calcite-panel .heading=${this._messages.series}><calcite-button slot=header-actions-end @click=${this.resetSeriesOriginal} .disabled=${!this.model.resetAvailable()} appearance=transparent scale=s icon-end=reset>${this._messages.reset}</calcite-button>${this.buildSeriesList()}</calcite-panel>`;
  }
}
f("arcgis-charts-config-line-chart-series", T);
export {
  T as ArcgisChartsConfigLineChartSeries
};
