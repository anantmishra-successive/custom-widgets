import { WebChartTypes as n } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { cq as u, cb as y, k as A, cs as x, o as p } from "./interfaces.js";
import { g as d } from "./series-types.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { D as e, c as l, b as r, A as b } from "./index2.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const C = [
  e.EditChart,
  e.Legend,
  e.RotateChart,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsCSV,
  e.ExportAsImage
], m = [
  e.EditChart,
  e.Legend,
  e.RotateChart,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], f = [
  e.EditChart,
  e.Legend,
  e.RotateChart,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], h = [
  e.EditChart,
  e.Legend,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Selection,
  e.ClearSelection,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], F = [
  e.EditChart,
  e.Legend,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], B = [
  e.EditChart,
  e.Legend,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], T = [
  e.EditChart,
  e.Legend,
  e.RotateChart,
  e.FilterBySelection,
  e.FilterByExtent,
  e.Zoom,
  e.Selection,
  e.ClearSelection,
  e.FullExtent,
  e.SwitchSelection,
  e.ExportAsImage,
  e.ExportAsCSV
], v = [
  e.EditChart,
  e.FilterByExtent,
  e.ExportAsImage,
  e.ExportAsCSV
];
function N(t) {
  switch (t) {
    case n.BarSeries:
      return C;
    case n.LineSeries:
      return m;
    case n.ComboLineAndBarSeries:
      return f;
    case n.PieSeries:
      return h;
    case n.HistogramSeries:
      return F;
    case n.ScatterSeries:
      return B;
    case n.BoxPlotSeries:
      return T;
    case n.GaugeSeries:
      return v;
    default:
      return [];
  }
}
function O(t, i) {
  const o = document.createElement("calcite-tooltip");
  return o.innerHTML = t, o.style.setProperty("opacity", "1"), i !== void 0 && (o.referenceElement = i), document.body.appendChild(o), o;
}
function W(t) {
  return t?.remove(), null;
}
const j = (t, i, o) => {
  const s = t.target.assignedNodes().find((S) => "legendToggle" in S), a = d(o?.series);
  return s && (s.chartType = a, I(s, i, o)), s;
};
function I(t, i, o) {
  const c = u(i.selectionData), s = o?.legend ? o.legend.visible ?? !0 : !1;
  if (t.chartType = d(o?.series), i.enableConfiguration) {
    const E = t.hiddenActions ?? [];
    t.hiddenActions = E.filter((g) => g !== e.EditChart);
  }
  t.editChartState = i.enableConfiguration ? l.Enabled : l.Disabled;
  const a = o && y(o.series);
  t.legendState = a ? l.Enabled : l.Disabled, t.legendToggle = a && (i.legendVisibility ?? s) ? r.Active : r.Inactive, t.rotateChartToggle = (i.rotation ?? o?.rotated) === !0 ? r.Active : r.Inactive;
  const S = A(o?.series ?? []) === x.PieFromFields;
  t.filterBySelectionState = !S && (i.filterBySelection === !0 || !c && i.filterByExtent !== !0) ? l.Enabled : l.Disabled, t.filterBySelectionToggle = i.filterBySelection === !0 ? r.Active : r.Inactive, t.filterByExtentState = i.filterByExtent === !0 || i.filterBySelection !== !0 ? l.Enabled : l.Disabled, t.filterByExtentToggle = i.filterByExtent === !0 ? r.Active : r.Inactive, t.zoomState = i.filterBySelection ? l.Disabled : l.Enabled, t.zoomToggle = i.actionMode === b.Zoom ? r.Active : r.Inactive, t.selectionState = i.filterBySelection ? l.Disabled : l.Enabled, t.selectionToggle = (i.actionMode ?? t.actionBarSelectionMode) === t.actionBarSelectionMode ? r.Active : r.Inactive, t.clearSelectionState = c ? l.Disabled : l.Enabled, t.fullExtentState = i.filterBySelection ? l.Disabled : l.Enabled, t.switchSelectionState = i.filterBySelection ? l.Disabled : l.Enabled, t.disabledExportAction = p(o);
}
export {
  O as c,
  W as d,
  N as g,
  j as o,
  I as u
};
