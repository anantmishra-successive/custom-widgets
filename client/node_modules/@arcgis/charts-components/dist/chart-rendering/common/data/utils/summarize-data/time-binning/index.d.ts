/// <reference types="@arcgis/core/interfaces.d.ts" />
import { TimeIntervalInfo, WebChart, WebChartDataItem, WebChartQuery, WebChartSeriesType, WebChartNullPolicyTypes, WebChartTemporalBinningUnits } from '@arcgis/charts-spec';
import { DateRange, QueryObject, TimeBinningStatistics, WebChartSeriesSupportingTemporalBinning } from '../../../../../../utils';
/**
 * Given `getNumberOfBinsWithinDataRange()` returns a diff in days for weeks, months and years, we need
 * to divide the result to get a better approximation of the element count.
 * TODO: we need to find a better way to do that by using the `luxon` diff function
 *
 * @param initialDayCount The initial number of elements in days
 * @param unit The unit used to bin the temporal data
 */
export declare function adjustElementCount(initialDayCount: number, unit?: WebChartTemporalBinningUnits): number;
export declare function getNumberOfBinsWithinDataRange(props: {
    dateMinTimestamp: number;
    dateMaxTimestamp: number;
    timeIntervalInfo: TimeIntervalInfo;
}): {
    numberOfFinalBinsWithinDataRange: number;
    numberOfSingleBinsWithinDataRange: number;
};
export declare function getTimeBinningStatistics(props: {
    queryObject: QueryObject;
    x: string;
    queryConfig: WebChartQuery;
}): Promise<TimeBinningStatistics>;
/**
 * Maps query results into a WebChartDataItem[] for a chart using the charts solution for temporal binning.
 * @param props.queryResults The query results
 * @param props.mapToStatField The map of unique values to stat fields
 * @param props.splitByField The split-by field
 * @param props.nullPolicy The null policy
 * @param props.x The series x field
 * @param props.y The series y field
 * @param props.queryObject The query object used to fetch the data
 */
export declare function mapTemporalBinningQueryAttributeBinsResults(props: {
    queryResults: __esri.AttributeBinsGraphic[];
    mapToStatField: Map<number | string | null, string>;
    splitByField?: string;
    nullPolicy?: WebChartNullPolicyTypes;
    x: string;
    y?: string;
    queryObject?: QueryObject;
}): Promise<WebChartDataItem[]>;
/**
 * Maps query results into a WebChartDataItem[] for a chart using the charts solution for temporal binning.
 * @param props.queryObject The object to query (layer or feature layer view)
 * @param props.data The query results
 * @param props.queryConfig The query configuration
 * @param props.x The series x field
 * @param props.seriesConfig The series configuration
 * @param props.dateRange The date range
 * @param props.timeIntervalInfo The time interval info
 */
export declare function mapTemporalBinningQueryResults(props: {
    queryObject: QueryObject;
    queryResults: WebChartDataItem[];
    queryConfig: WebChartQuery;
    x: string;
    seriesConfig: WebChartSeriesSupportingTemporalBinning[];
    dateRange: DateRange;
    timeIntervalInfo: TimeIntervalInfo;
    chartRenderer?: WebChart["chartRenderer"];
}): Promise<WebChartDataItem[]>;
/**
 * Calculates the best interval (unit and size) based on the provided data range.
 * This algorithm comes from ArcGIS Pro and was adapter from C++ to ts. See function `GetDefaultTimeInterval`
 * in Pro (actually here: https://devtopia.esri.com/ArcGISPro/ArcGISPro/blob/ddf7cbe19ec80228179e905c9f85e84710f54ab7/MapX/CartoX/MappingCore/ChartUtils.cpp#L1621)
 *
 * @param props
 */
export declare function getBestInterval(timeBinningStats: TimeBinningStatistics): TimeIntervalInfo;
/**
 * Indicates if calculating the time interval unit and size is necessary for the series.
 * It is necessary if the series is a line series, doesn't provide the interval unit and size
 * while the boolean `setTimeBinningInfoWhenNotProvided` is true.
 *
 * @param props.series The series config
 * @param props.isTimeBinningSeries Indicates whether the series is using the time binning feature
 * @param props.setTimeBinningInfoWhenNotProvided Indicates whether the time interval needs to be recalculated if the one provided is incomplete
 */
export declare function needsToCalculateTimeIntervalInfo(props: {
    series: WebChartSeriesType;
    isTimeBinningSeries: boolean;
    setTimeBinningInfoWhenNotProvided?: boolean;
}): boolean;
/**
 * Converts a date from the SQL SQL-92 format 'YYYY-MM-DD HH:mm:ss' to a
 * JS Date
 *
 * @param sqlDate
 * @returns
 */
export declare function createDatefromAttributes(attributes: WebChartDataItem): number;
