import { ChartConfig } from '../../../utils';
import { ISimpleFillSymbol, WebChartTextSymbol } from '@arcgis/charts-spec';
import { ModelTypes } from '../../interfaces/common';
/**
 * Gets the visibility of the needle.
 * @param config The chart configuration object
 * @returns {boolean}
 * @remarks If the needle or its visibility is not set, the default value of `true` will be returned.
 */
export declare const getNeedleVisibility: (config: ChartConfig<typeof ModelTypes.Gauge>) => boolean;
/**
 * Sets the visibility of the needle.
 * @param visible The visibility to set for the needle
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleVisibility: (visible: boolean, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the symbol of the needle.
 * @param config The chart configuration object
 * @returns {ISimpleFillSymbol | undefined}
 */
export declare const getNeedleSymbol: (config: ChartConfig<typeof ModelTypes.Gauge>) => ISimpleFillSymbol | undefined;
/**
 * Sets the symbol of the needle.
 * @param symbol The symbol to set for the needle
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleSymbol: (symbol: ISimpleFillSymbol | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the start width of the needle.
 * @param config The chart configuration object
 * @returns {number | null | undefined}
 */
export declare const getNeedleStartWidth: (config: ChartConfig<typeof ModelTypes.Gauge>) => number | null | undefined;
/**
 * Sets the start width of the needle.
 * @param startWidth The start width to set for the needle
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleStartWidth: (width: number | null | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the end width of the needle.
 * @param config The chart configuration object
 * @returns {number | null | undefined}
 */
export declare const getNeedleEndWidth: (config: ChartConfig<typeof ModelTypes.Gauge>) => number | null | undefined;
/**
 * Sets the end width of the needle.
 * @param width The end width to set for the needle
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleEndWidth: (width: number | null | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the inner radius of the needle.
 * @param config The chart configuration object
 * @returns {number | null | undefined}
 */
export declare const getNeedleInnerRadius: (config: ChartConfig<typeof ModelTypes.Gauge>) => number | null | undefined;
/**
 * Sets the inner radius of the needle.
 * @param innerRadius The inner radius to set for the needle
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleInnerRadius: (innerRadius: number | null | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets whether to display the pin for the needle.
 * @param config The chart configuration object
 * @returns {boolean}
 */
export declare const getNeedleDisplayPin: (config: ChartConfig<typeof ModelTypes.Gauge>) => boolean;
/**
 * Sets whether to display the pin for the needle.
 * @param displayPin The visibility to set for the needle pin
 * @param config The chart configuration object
 * @remarks If the needle is not set, it will be created with the default values.
 */
export declare const setNeedleDisplayPin: (displayPin: boolean, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets whether the gauge inner label is visible.
 * @param config The chart configuration object
 * @returns {boolean}
 */
export declare const getInnerLabelVisible: (config: ChartConfig<typeof ModelTypes.Gauge>) => boolean;
/**
 * Sets whether the gauge inner label is visible.
 * @param visible The visibility to set for the gauge inner label
 * @param config The chart configuration object
 * @remarks If the inner label is not set, it will be created with the default values.
 */
export declare const setInnerLabelVisibility: (visible: boolean, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the content of the gauge inner label.
 * @param config The chart configuration object
 * @returns {WebChartTextSymbol | undefined}
 */
export declare const getInnerLabelContent: (config: ChartConfig<typeof ModelTypes.Gauge>) => WebChartTextSymbol | undefined;
/**
 * Sets the content of the gauge inner label.
 * @param content The content to set for the gauge inner label
 * @param config The chart configuration object
 * @remarks If the inner label is not set, it will be created with the default values.
 */
export declare const setInnerLabelContent: (content: WebChartTextSymbol | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the visibility of the gauge axis ticks.
 * @param config The chart configuration object
 * @returns {boolean}
 */
export declare const getAxisTickVisibility: (config: ChartConfig<typeof ModelTypes.Gauge>) => boolean;
/**
 * Sets the visibility of the gauge axis ticks.
 * @param visible The visibility to set for the gauge axis ticks
 * @param config The chart configuration object
 * @remarks If the ticks are not set, it will be created with the default values.
 */
export declare const setAxisTickVisibility: (visible: boolean, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the increment between axis labels.
 * @param config The chart configuration object
 * @returns {number | undefined}
 */
export declare const getLabelsIncrement: (config: ChartConfig<typeof ModelTypes.Gauge>) => number | undefined;
/**
 * Sets the increment between axis labels.
 * @param increment The increment to set for the axis labels
 * @param config The chart configuration object
 */
export declare const setLabelsIncrement: (increment: number | undefined, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets whether to only show the first and last axis labels.
 * @param config The chart configuration object
 * @returns {boolean}
 * @remarks If the onlyShowFirstAndLastLabels is not set, the default value of `false` will be returned.
 */
export declare const getShowOnlyMinMaxLabels: (config: ChartConfig<typeof ModelTypes.Gauge>) => boolean;
/**
 * Sets whether to only show the first and last axis labels.
 * @param showOnlyFirstAndLastLabels Indicator of whether to only show the first and last axis labels
 * @param config The chart configuration object
 */
export declare const setShowOnlyMinMaxLabels: (showOnlyFirstAndLastLabels: boolean, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
