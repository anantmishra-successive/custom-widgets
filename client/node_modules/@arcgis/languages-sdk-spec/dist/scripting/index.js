import b from "node:path";
import h from "node:fs/promises";
function V(e) {
  return Array.isArray(e?.properties);
}
async function j(e) {
  try {
    return (await h.readdir(e, { withFileTypes: !0 })).filter((r) => r.isDirectory()).map((r) => r.name);
  } catch {
    return [];
  }
}
async function P(e) {
  try {
    return (await h.readdir(e, { withFileTypes: !0 })).filter((r) => r.isFile() && r.name !== ".DS_Store").map((r) => r.name);
  } catch {
    return [];
  }
}
const R = {
  parameter: "Parameter",
  parameters: "Parameters",
  sinceversion: "Since version",
  returnvalue: "Return value",
  example: "Example",
  examples: "Examples",
  additionalResources: "Additional resources"
};
function x(e) {
  return !Array.isArray(e) && !e.isConstant;
}
function E(e) {
  return !Array.isArray(e) && !!e.isConstant;
}
function N(e) {
  return !Array.isArray(e) && typeof e == "object";
}
const m = "./src/api/libraries", k = "./src/t9n/libraries";
async function C() {
  const e = {}, t = await j(m);
  return await Promise.all(
    t.map(async (r) => {
      const n = `${m}/${r}`, s = `${n}/definition.json`, i = JSON.parse(await h.readFile(s, "utf-8")), a = /* @__PURE__ */ new Map(), o = `${n}/properties`, c = await P(o);
      await Promise.all(
        c.map(async (u) => {
          const p = b.parse(u).name, l = `${o}/${u}`, d = JSON.parse(await h.readFile(l, "utf-8"));
          a.set(p, d);
        })
      ), e[r] = { definition: i, items: a };
    })
  ), { categories: e, resources: { ...R } };
}
function L(e) {
  return typeof e != "object" || e === null || Array.isArray(e) ? !1 : "description" in e || "examples" in e || "returnValue" in e || "parameters" in e;
}
async function B(e) {
  const t = await C();
  if (b.parse(e).name === "en")
    return t;
  const r = `${k}/${e}`, n = JSON.parse(await h.readFile(r, "utf-8"));
  for (const s in t.categories) {
    const i = n.categories[s];
    if (!i)
      continue;
    const a = t.categories[s];
    a.definition.title = i.title ?? a.definition.title, a.definition.description = f(i.description) ?? a.definition.description, a.items.forEach((o, c) => {
      const u = i.items[c];
      if (u) {
        if (L(u))
          E(o) ? F(o, u) : x(o) && S(o, u);
        else if (Array.isArray(o)) {
          const p = f(u);
          o.length === p?.length && o.forEach((l, d) => {
            S(l, p[d]);
          });
        }
      }
    });
  }
  for (const s in t.resources)
    t.resources[s] = n.resources[s] ?? t.resources[s];
  return t;
}
function S(e, t) {
  F(e, t), g(e.parameters, t.parameters), O(e.returnValue, t.returnValue);
}
function F(e, t) {
  if (!t)
    return;
  e.description = f(t.description) ?? e.description;
  const r = f(t.examples);
  r && e.examples && e.examples.forEach((n, s) => {
    n.description = f(r[s]) ?? n.description;
  });
}
function O(e, t) {
  !e || !t || !N(e) || (e.description = f(t.description) ?? e.description, g(e.properties, t.properties));
}
function g(e, t) {
  !e || !t || e.forEach((r) => {
    r.description = f(t[r.name]?.description) ?? "", g(r.properties, t[r.name]?.properties);
  });
}
const T = {
  minimumIntegerDigits: 2,
  useGrouping: !1
};
function U(e) {
  return (Array.isArray(e) ? e : [e]).reduce((r, n, s) => {
    const i = `line${s.toLocaleString("en-US", T)}`;
    return r[i] = n, r;
  }, {});
}
function f(e) {
  if (!e)
    return;
  const t = [], r = Object.keys(e).sort((n, s) => n.localeCompare(s));
  for (const n of r)
    t.push(e[n]);
  return t;
}
function q(e) {
  switch (e) {
    case 3:
    case 4:
      return new Array(e + 2).join("#");
    default:
      return new Array(e + 1).join("#");
  }
}
function W(e) {
  return !e.isConstant;
}
function A(e) {
  return e ? typeof e == "string" ? e : e.reduce((t, r) => {
    if (r === "")
      return `${t}

`;
    let n = t;
    return t && !t.endsWith(`
`) && !r.startsWith("|") && (n += " "), n += r, (r.endsWith("  ") || r.endsWith("\\") || r.endsWith("|")) && (n += `
`), n;
  }, "") : "";
}
function G(e) {
  return Array.isArray(e) ? e[0].name : e.name;
}
function z(e, t, r, n = !0) {
  const s = [];
  if (!t.sinceVersion)
    return [];
  const i = n ? r.relativePath : r.absolutePath;
  return s.push(`**[${e.sinceversion} ${t.sinceVersion}](${i}guide/version-matrix)**`), s.push(""), s;
}
function K(e, t, { relative: r = !0, typeLink: n = !0, needsHtmlEntity: s = !1 } = {}) {
  const { name: i } = e;
  if (!W(e))
    return i;
  const a = Array.isArray(e.parameters) ? e.parameters : [], o = _(e.returnValue ?? "Null");
  if ("isSpecialRegister" in e && e.isSpecialRegister)
    return `${i} -> ${w(o, s).join(",")}`;
  let c = `${i}(`;
  return c += a.map((u) => `${u.name}${u.optional ? "?" : ""}`).join(", "), c += ") -> ", c += n ? y(o, t, r) : w(o, s).join(","), c;
}
function _(e) {
  return Array.isArray(e) ? e.map((t) => t) : typeof e == "object" ? [e.type ?? "Null"] : e ? [e] : [];
}
function w(e, t) {
  return e.map((r) => {
    const n = r.match(/Array<(.*?)>/u);
    return n && t ? `Array&lt;${n[1]}&gt;` : n ? `Array<${n[1]}>` : r;
  });
}
function y(e, t, r = !0) {
  if (!e)
    return "";
  typeof e == "string" && (e = e.split("|").map((i) => i.trim()));
  const n = r ? t.relativePath : t.absolutePath;
  return e.map((i) => {
    const a = i.trim(), o = a.toLowerCase().replace("[]", "");
    switch (o) {
      case "function":
        return `[${a}](${n}guide/logic/#user-defined-functions)`;
      case "any":
      case "attachment":
      case "boolean":
      case "date":
      case "dateonly":
      case "dictionary":
      case "feature":
      case "featureset":
      case "featuresetcollection":
      case "geometry":
      case "knowledgegraph":
      case "point":
      case "multipoint":
      case "polyline":
      case "polygon":
      case "extent":
      case "number":
      case "portal":
      case "text":
      case "time":
      case "voxel":
        return `[${a}](${n}guide/types/#${o})`;
      default: {
        const c = i.match(/Array<(.*?)>/u);
        return c ? `[Array](${n}guide/types/#array)&lt;${y(c[1], t, r)}&gt;` : i;
      }
    }
  }).join(" \\| ");
}
function Q(e, t, r, n = !0, s = !0) {
  const i = [];
  return !Array.isArray(t) || !t.length || (i.push(""), i.push(`**${t.length > 1 ? e.parameters : e.parameter}**`), i.push(...$(t, r, { relative: n, useTypeLinks: s }))), i;
}
function D(e = 0) {
  let t = "";
  for (let r = 0; r < e; r++)
    t += "  ";
  return t;
}
function $(e, t, {
  relative: r = !0,
  indentCount: n = 0,
  useTypeLinks: s
} = { useTypeLinks: !0 }) {
  const i = [];
  if (!Array.isArray(e) || !e.length)
    return i;
  const a = D(n);
  return i.push(""), e.forEach((o) => {
    const { name: c, optional: u, type: p } = o, l = u ? " (_Optional_)" : "";
    i.push(
      `${a}- **${c ?? ""}**${l}: ${s ? `${y(p, t, r)} - ` : ""}${A(o.description)}`
    ), i.push(
      ...$(o.properties, t, {
        relative: r,
        indentCount: n + 1,
        useTypeLinks: s
      })
    );
  }), i;
}
function X(e, t, r, n = !0, s = !0) {
  const i = [];
  if (t == null)
    return i;
  i.push("");
  const a = `**${e.returnvalue}**:`;
  if (Array.isArray(t) || typeof t == "string")
    s ? i.push(`${a} ${y(t, r, n)}`) : i.push(`${a} ${Array.isArray(t) ? t.join(",") : t}`);
  else {
    const { description: o, type: c } = t;
    i.push(`${a}${s ? ` ${y(c, r, n)}` : ""}  `), i.push(A(o)), i.push(...$(t.properties, r, { relative: n, useTypeLinks: s }));
  }
  return i;
}
function Y(e, t, r, n) {
  const s = [];
  return !t || !Array.isArray(t) || (s.push(""), r === "**" ? s.push(`${r}${t.length > 1 ? e.examples : e.example}${r}`) : s.push(`${r} ${t.length > 1 ? e.examples : e.example}`), s.push(""), t.forEach((i) => {
    i.description && (s.push(A(i.description)), s.push("")), s.push(`\`\`\`${n}`), Array.isArray(i.code) ? s.push(...i.code) : typeof i.code == "string" && s.push(i.code), s.push("```"), s.push("");
  }), s.push("")), s;
}
function Z(e, t, r) {
  const n = [];
  return !t || !Array.isArray(t) || (n.push(""), r === "**" ? n.push(`${r}${e.additionalResources}${r}`) : n.push(`${r} ${e.additionalResources}`), n.push(""), t.forEach(({ linkText: s, url: i }) => {
    n.push(`* [${s}](${i})`);
  }), n.push("")), n;
}
function H(e, t, r = !0) {
  return e ? r ? e.replace(t.absolutePath, "/") : e.replace(t.relativePath, t.absolutePath) : "";
}
function v(e, t, r) {
  const n = [];
  let s = 0, i = 0, a = 0;
  if (r)
    for (; s < e.length || i < t.length; )
      r[a] === n.length ? (i < t.length && n.push(t[i++]), a++) : s < e.length && n.push(e[s++]);
  else
    for (; s < e.length || i < t.length; )
      s < e.length && n.push(e[s++]), i < t.length && n.push(t[i++]);
  return n.filter(Boolean).join(" ");
}
function I(e) {
  return "isSpecialRegister" in e;
}
export {
  R as DefaultApiResources,
  G as apiItemName,
  A as assembleMarkdownString,
  f as convertObjectToArray,
  U as convertStringArrayToObject,
  H as fixUrl,
  Z as generateAdditionalResourcesSection,
  Y as generateExamplesSection,
  Q as generateParametersSection,
  X as generateReturnSection,
  K as generateSignature,
  z as generateSinceVersionSection,
  y as generateTypeLink,
  j as getDirectoryNames,
  P as getFileNames,
  q as headingPattern,
  v as interlaceArrays,
  W as isFunction,
  E as isSchemaConstant,
  V as isSchemaDictionaryVariable,
  x as isSchemaFunction,
  N as isSchemaReturnDefinition,
  I as isSqlApiFunction,
  B as loadApiDatabase,
  T as toLocalConfig
};
