/// <reference types="../../index.d.ts" />
import { SupportedLayer, WebChart, WebChartDataFilters, WebChartDataTypes, WebChartLegendPositions } from '@arcgis/charts-spec';
import { default as MapView } from '@arcgis/core/views/MapView';
import { default as SceneView } from '@arcgis/core/views/SceneView';
import { default as FeatureLayerView } from '@arcgis/core/views/layers/FeatureLayerView';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { PropertyValues } from 'lit';
import { AxisLabelFormatCallback, ChartOptions, GaugeInnerLabelFormatCallback, GuideTooltipFormatCallback, MessageOptions, NotifyOptions, PieChartLegendValueLabelFormatCallback, PreRenderCallback } from '../../chart-rendering/common/interfaces';
import { CSVOptions } from '../../interfaces';
import { ChartModel } from '../../model';
import { ActionModes, ChartElementLimit, CursorRange, DataWarningObject, LoaderColors, SelectionData, SelectionTheme, ValidationStatus, ErrorPolicy, LayerFieldsChangePolicy, LayerFilterChangePolicy, LayerRendererChangePolicy, SyncSelectionsBetweenChartAndLayerViewPolicy, ViewTimeExtentChangePolicy } from '../../utils';
import { AxesMinMaxChangePayload, DataProcessCompletePayload, LegendItemVisibilityChangePayload, NoRenderPropChangePayload, SelectionCompletePayload, SeriesColorChangePayload } from '../../utils/components/event-payloads';
import { MissingSplitBySeriesProps, WebChartComponentVersion, DownloadableChartImagesTypes } from '../../utils/components/interfaces';

/**
 * The ArcGIS Chart component renders various chart types based on the provided model.
 *
 * Supported chart types include bar charts, line charts, pie charts, box plots, combo bar-line charts, gauges, scatterplots, histograms and radar charts.
 *
 * The Chart component can be rendered using an [existing model](https://developers.arcgis.com/javascript/latest/charts-components-intro/#use-an-existing-model-from-a-webmap-or-feature-layer) from a web map or feature layer,
 * or by [creating a new model](https://developers.arcgis.com/javascript/latest/charts-components-intro/#create-a-new-model).
 *
 * See also:
 * - [Introduction to Charts components](https://developers.arcgis.com/javascript/latest/charts-components-intro/)
 * - [Tutorial: Display and create charts components](https://developers.arcgis.com/javascript/latest/tutorials/display-and-create-charts-components/)
 *
 * [Read more...](https://developers.arcgis.com/javascript/latest/references/charts-components/arcgis-chart/)
 *
 * @slot [action-bar] - Slot for adding a `charts-action-bar` component or `calcite-action-bar`.
 */
export declare class ArcgisChart extends LitElement {
    /**
     * Whether to use the stable version of the component or the beta version.
     *
     * @type {WebChartComponentVersion}
     * @category Public
     * @default "stable"
     */
    componentVersion: WebChartComponentVersion;
    /**
     * Instance of an ArcGIS Chart Model. Provides an API to interact with the chart's configuration.
     *
     * **Note:** This property has a union type of `ChartModel | WebChart` meaning a raw chart config object can be passed to it instead, however it is recommended to use a `ChartModel` instance whenever possible.
     *
     * @type {ChartModel | WebChart | undefined}
     * @default undefined
     */
    model: ChartModel | WebChart | undefined;
    /**
     * Whether to use features uniquely designed for a chart currently being configured by a user via the UI.
     *
     * @type {boolean}
     * @category Public
     * @default false
     */
    enableConfiguration: boolean;
    /**
     * Whether to synchronize the selection between chart components from the same layer.
     *
     * @type {boolean}
     * @category Public
     * @default false
     */
    syncSelection: boolean;
    /**
     * Applicable to bar chart, line chart, combo bar-line and box plot.
     * When `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    get rotation(): boolean | undefined;
    set rotation(value: boolean | undefined);
    /**
     * Not applicable to gauge.
     * Defines the cursor behavior on the chart (zoom, selection...).
     *
     * @type {ActionModes | undefined}
     * @category Public
     * @default undefined
     */
    actionMode?: ActionModes;
    /**
     * Sets the cursor range:
     * - CursorRange.MultiAxes: allows to draw a free rectangle
     * - CursorRange.XAxis: allows to draw a rectangle bound to the x-axis
     * - CursorRange.YAxis: allows to draw a rectangle bound to the y-axis
     * - undefined: defaults to a preset behavior according to the chart type and action mode
     *
     * @remarks
     * Not applicable to gauge.
     * Applies only when the action mode is set to zoom or multi-selection.
     * @type {CursorRange | undefined}
     * @category Public
     * @default undefined
     */
    cursorRange?: CursorRange;
    /**
     * Used to set the legend's position on the chart.
     *
     * @remarks Not applicable to gauge.
     * @type {WebChartLegendPositions | undefined}
     * @category Public
     * @default undefined
     */
    get legendPosition(): WebChartLegendPositions | undefined;
    set legendPosition(value: WebChartLegendPositions | undefined);
    /**
     * When `true`, the legend is visible on the chart.
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    get legendVisibility(): boolean | undefined;
    set legendVisibility(value: boolean | undefined);
    /**
     * When `true`, the empty series are completely hidden from the chart and the legend.
     * For example a series can be empty after applying a data filter, filter by attribute or geometry (as when using the filter by extent).
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    hideEmptySeries?: boolean;
    /**
     * When `true`, the chart's dataItems associated with empty (no value) categories (from only a `Count` aggregation)
     * will be populated with 0s, via the `completeDataForEmptyCategoriesWithZeros` method.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    replaceNoValueCategoryWithZero?: boolean;
    /**
     * When `true`, disables the default setting that uses debounce functions to handle the visibility of markers
     * that are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed
     * (via chart cursor or scrollbar), to increase performance.
     * This property will be set when the chart is created and cannot be updated after that.
     * It's recommended that this property should only be set to true for small datasets.
     * When left `undefined`, will be treated as `false`.
     *
     * @remarks Applicable to line chart only.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    ignoreSmoothRenderingLimit?: boolean;
    /**
     * Lifecycle function executed after the data has been processed and before the chart renders.
     * Can be used to alter the config from information extracted from the data for instance.
     *
     * @remarks Applicable to gauge and pie chart only.
     * @type {PreRenderCallback | undefined}
     * @category Public
     * @default undefined
     */
    chartWillRender?: PreRenderCallback;
    /**
     * A callback function used to format the legend value labels. If the returned string contains HTML tags they will be
     * interpreted as such.
     * If provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.
     *
     * @remarks Applicable to pie chart only.
     * @type {PieChartLegendValueLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    legendValueLabelFormatter?: PieChartLegendValueLabelFormatCallback;
    /**
     * Used to set a custom time zone for the chart.
     *
     * @type {MapView["timeZone"] | undefined}
     * @category Public
     * @default undefined
     */
    timeZone?: MapView["timeZone"];
    /**
     * Used to access the LayerView instance in order to perform client-side queries.
     *
     * @type {MapView | SceneView | undefined}
     * @category Public
     * @default undefined
     */
    get view(): MapView | SceneView | undefined;
    set view(value: MapView | SceneView | undefined);
    /**
     * Used to perform queries.
     * If the layer is a FeatureLayerView or if the layer and the `view` property are both provided, the queries will be executed client-side.
     *
     * @type {SupportedLayer | FeatureLayerView | undefined}
     * @category Public
     * @default undefined
     */
    layer?: FeatureLayerView | SupportedLayer;
    /**
     * When this property is set, it will apply a selection on the chart matching the provided selection.
     *
     * @remarks Not applicable to gauge.
     * @type {SelectionData | undefined}
     * @category Public
     * @default undefined
     */
    selectionData?: SelectionData;
    /**
     * When `true`, the object ids will be computed whenever a selection is made on or passed to the chart.
     * Only considered for a data source using a feature layer.
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    returnSelectionOIDs?: boolean;
    /**
     * When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    returnSelectionIndexes?: boolean;
    /**
     * When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload.
     * Applies only to:
     * - charts using an aggregation
     * - data source using a feature layer compatible with envelope aggregation
     * The extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    returnFeaturesExtent?: boolean;
    /**
     * When `true`, all chart elements are filtered based on selection.
     *
     * @remarks Not applicable to gauge.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    filterBySelection?: boolean;
    /**
     * When `true`, all chart elements are filtered based on view extent.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    get filterByExtent(): boolean | undefined;
    set filterByExtent(value: boolean | undefined);
    /**
     * Disables all interactions on the chart.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default false
     */
    get disableInteractions(): boolean;
    set disableInteractions(value: boolean | undefined);
    /**
     * Builds the charts one by one rather than all at the same time.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    queueChartCreation?: boolean;
    /**
     * Enables the animations on the chart.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    useAnimatedCharts?: boolean;
    /**
     * Hides the license watermark.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    hideLicenseWatermark?: boolean;
    /**
     * Enables the responsive features.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    enableResponsiveFeatures?: boolean;
    /**
     * Auto-disposes the chart when a new one is created in the same container.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    autoDisposeChart?: boolean;
    /**
     * The index of the feature to be rendered.
     * Only used when the gauge is a feature-based gauge.
     *
     * @remarks Applicable to gauge only.
     * @type {number | undefined}
     * @category Public
     * @default undefined
     */
    get featureIndex(): number | undefined;
    set featureIndex(value: number | undefined);
    /**
     * A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.
     *
     * @type {string | undefined}
     * @category Public
     * @default undefined
     */
    placeholder?: string;
    /**
     * Used to provide a customized theme for the selected and non selected elements.
     * If no style is provided for the selected elements, a default selection is applied.
     * If no style is provided for the non selected elements, the chart's style is applied.
     *
     * @remarks Not applicable to gauge.
     * @type {SelectionTheme | undefined}
     * @category Public
     * @default undefined
     */
    selectionTheme?: SelectionTheme;
    /**
     * When `true`, the series properties `unit` and `size` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.
     *
     * @remarks Only applicable to charts using the temporal binning feature (bar and line chart).
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    setTimeBinningInfoWhenNotProvided?: boolean;
    /**
     * Used to customize the number maximum of bars allowed on the chart.
     * The chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation
     * or update of the chart, or render the elements up to the given limits.
     *
     * @remarks Not applicable to gauge.
     * @type {ChartElementLimit | undefined}
     * @category Public
     * @default undefined
     */
    chartLimits?: ChartElementLimit;
    /**
     * A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.
     *
     * @remarks Not applicable to gauge.
     * @type {BarAndLineTooltipFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    tooltipFormatter?: ChartOptions["tooltipFormatter"];
    /**
     * A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.
     *
     * @remarks Not applicable to gauge.
     * @type {BarAndLineDataLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    dataLabelFormatter?: ChartOptions["dataLabelFormatter"];
    /**
     * A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.
     *
     * @remarks Not applicable to pie chart.
     * @type {GuideTooltipFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    guideTooltipFormatter?: GuideTooltipFormatCallback;
    /**
     * Indicates whether to show the ArcGIS charts notify panel. False by default
     * A callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.
     *
     * @remarks Not applicable to pie chart.
     * @type {AxisLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    xAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
     *
     * @remarks Not applicable to pie chart nor gauge.
     * @type {AxisLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    yAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * A callback function used to format the secondary y-axis labels. If the returned string contains HTML tags they will be interpreted as such.
     * The property will be effective only if 3 axes are defined (dual axis chart).
     *
     * @remarks Not applicable to pie chart nor gauge.
     * @type {AxisLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    secondaryYAxisLabelFormatter?: AxisLabelFormatCallback;
    /**
     * A callback function used to format the gauge inner label. If the returned string contains HTML tags they will be
     * interpreted as such.
     *
     * @remarks Applicable to gauge only.
     * @type {GaugeInnerLabelFormatCallback | undefined}
     * @category Public
     * @default undefined
     */
    gaugeInnerLabelFormatter?: GaugeInnerLabelFormatCallback;
    /**
     * Used to set the options available to handle specific messages displayed by the chart.
     *
     * @type {MessageOptions | undefined}
     * @category Public
     * @default undefined
     */
    messageOptions?: MessageOptions;
    /**
     * Whether to display an error alert and hide the chart when it can't be created or updated.
     *
     * @type {ErrorPolicy}
     * @default "throw"
     */
    errorPolicy: ErrorPolicy;
    /**
     * Disables the toggling of series via the legend items.
     *
     * @remarks Only applicable to multi-series charts.
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    disableTogglingLegendItems?: boolean;
    /**
     * Hides the loader animation (curtain and spinner), showed by default at every update.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    hideLoaderAnimation?: boolean;
    /**
     * Defines the colors for the loader animation.
     *
     * @type { LoaderColors  | undefined}
     * @category Public
     * @default undefined
     */
    loaderColors?: LoaderColors;
    /**
     * Applies runtime data filters to the chart's.
     *
     * @type {WebChartDataFilters | undefined}
     * @category Public
     * @default undefined
     */
    runtimeDataFilters?: WebChartDataFilters;
    /**
     * Allows the use of the fields alias from the layer.popupTemplate when rendering the field names on the chart (e.g. tooltips, axes, legend).
     *
     * @type {boolean | undefined}
     * @category Public
     * @default undefined
     */
    usePopupTemplateFieldsInfo?: boolean;
    /**
     * Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.
     *
     * @type {LayerFilterChangePolicy}
     * @category Public
     * @default "refresh"
     */
    layerFilterChangePolicy: LayerFilterChangePolicy;
    /**
     * Whether the chart should be refreshed when the view's time extent changes.
     * This is not currently supported on histogram. Setting the property to "refresh" won't have any effect on that chart.
     *
     * @type {ViewTimeExtentChangePolicy}
     * @category Public
     * @default "ignore"
     */
    viewTimeExtentChangePolicy: ViewTimeExtentChangePolicy;
    /**
     * Allows the chart to update automatically when the layer's renderer changes.
     * Applies when the color match feature is enabled.
     *
     * @remarks Even though that property is set to Ignore the chart will use the layer's renderer information when the data is updated.
     * @type {LayerRendererChangePolicy}
     * @category Public
     * @default "refresh"
     */
    layerRendererChangePolicy: LayerRendererChangePolicy;
    /**
     * Allows the chart to update automatically when the layer's fields change.
     * Applies when the field list (`fields`) in the feature layer is updated.
     *
     * @type {LayerFieldsChangePolicy}
     * @category Public
     * @default "refresh"
     */
    layerFieldsChangePolicy: LayerFieldsChangePolicy;
    /**
     * Determines whether the selections from the chart should be synchronized with the layer view and vice versa.
     *
     * @type {SyncSelectionsBetweenChartAndLayerViewPolicy}
     * @category Public
     * @default "disabled
     */
    syncSelectionsBetweenChartAndLayerViewPolicy: SyncSelectionsBetweenChartAndLayerViewPolicy;
    /**
     * This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView.
     * By default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any
     * geometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters).
     * Setting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.
     *
     * @type {boolean | undefined}
     * @category Public
     * @default false
     */
    ignoreViewExtent?: boolean;
    /**
     * Whether to update the series when the data updates while the chart uses a split-by field configuration.
     * If `addMissingSeries` is set to `true` the missing series will be added to cover the split-by values not referenced
     * by the config.
     * The default information from the property `updateSplitBySeries.seriesTemplate` will be applied to the new series.
     *
     * @remarks Only applicable to bar chart, line chart and box plot, when they use a split-by field.
     * @type {MissingSplitBySeriesProps | undefined}
     * @category Public
     * @default undefined
     */
    updateSplitBySeries?: MissingSplitBySeriesProps;
    /**
     * Clears all selection on the chart.
     *
     * @remarks Not applicable to gauge.
     * @category Public
     */
    clearSelection(): Promise<void>;
    /**
     * Triggers an alert to display an error message.
     *
     * @category Public
     * @param errorMessage
     */
    errorAlert(errorMessage?: string): Promise<void>;
    /**
     * Export the current chart as an image.
     *
     * @param format The format of the image to download.
     * @category Public
     * @default DownloadableChartImagesTypes.PNG
     */
    exportAsImage(format?: DownloadableChartImagesTypes): Promise<void>;
    /**
     * Export the current chart's data as a CSV file.
     *
     * @param
     * options The options to use when exporting the data.
     *
     * NOTE: This method won't work for scatter plot series. The support charts for this method are:
     * - Bar chart
     * - Line chart
     * - Combo bar-line chart
     * - Box plot
     * - Histogram
     * - Pie chart
     *
     * The `Options` object can contain the following properties:
     * - `columns` - An array of column to include in the CSV file.
     * - `delimiter` - The delimiter to use in the CSV file. Default is `,`.
     * - `includeHeader` - Whether to include the header row in the CSV file. Default is `true`.
     * - `quoteAll` - Whether to quote all values in the CSV file. Default is `false`.
     * @category Public
     */
    exportAsCSV(options?: CSVOptions): Promise<void>;
    /**
     * Notify method allows passing external messages to the chart component.
     * It can be used to pass validation or information messages.
     * In a situation where a config update is overriding your notification modal,
     * consider waiting for the `arcgisUpdateComplete` event.
     *
     * @category Public
     * @param message The message to display in the notification panel.
     * @param heading The heading to display in the notification panel.
     * @param options The options to apply to the notification panel.
     */
    notify(message?: string, heading?: string, options?: NotifyOptions): Promise<void>;
    /**
     * Re-render the chart.
     *
     * @param props.updateData Indicates whether to fetch new data. Default: true.
     * @param props.updateExtent Indicates whether the view's extent is to update. Default: false.
     * @param props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;
     * @category Public
     */
    refresh(props?: {
        updateData?: boolean;
        resetAxesBounds?: boolean;
        updateExtent?: boolean;
    }): Promise<void>;
    /**
     * Resets the chart zoom to bring it back to full extent
     *
     * @remarks Applicable to XY charts only.
     * @category Public
     */
    resetZoom(): Promise<void>;
    /**
     * Switches the selection on the chart.
     *
     * @remarks Not applicable to gauge.
     * @category Public
     */
    switchSelection(): Promise<void>;
    /**
     * Event triggered once the chart axes min/max values are computed
     *
     * @type {EventEmitter<AxesMinMaxChangePayload>}
     * @event
     */
    readonly arcgisAxesMinMaxChange: TargetedEvent<this, AxesMinMaxChangePayload>;
    /**
     * Event triggered when an error is detected with the data set
     *
     * @type {EventEmitter<DataWarningObject>}
     * @event
     */
    readonly arcgisBadDataWarningRaise: TargetedEvent<this, DataWarningObject>;
    /**
     * Event triggered when the chart config is changed
     *
     * @event
     */
    readonly arcgisConfigChange: TargetedEvent<this, {
        newConfig: WebChart | undefined;
        oldConfig: WebChart | undefined;
        functionCalled: string | undefined;
    }>;
    /**
     * Event triggered once the chart data has been fetched but not yet fully processed.
     * For instance it can be useful for a pie chart to see all the slices before they get grouped into an 'other' slice during the post-processing step.
     *
     * @type {EventEmitter<WebChartDataTypes>}
     * @event
     */
    readonly arcgisDataFetchComplete: TargetedEvent<this, WebChartDataTypes>;
    /**
     * Event triggered once the chart data has been processed
     *
     * @type {EventEmitter<DataProcessCompletePayload>}
     * @event
     */
    readonly arcgisDataProcessComplete: TargetedEvent<this, DataProcessCompletePayload>;
    /**
     * Event triggered when an error occurred while fetching of processing the data for the chart
     *
     * @event
     */
    readonly arcgisDataProcessError: TargetedEvent<this, void>;
    /**
     * Event triggered once a legend item visibility has been changed
     *
     * @type {EventEmitter<LegendItemVisibilityChangePayload>}
     * @event
     */
    readonly arcgisLegendItemVisibilityChange: TargetedEvent<this, LegendItemVisibilityChangePayload>;
    /**
     * Event triggered when a no-render prop is changed
     *
     * @type {EventEmitter<NoRenderPropChangePayload>}
     * @event
     */
    readonly arcgisNoRenderPropChange: TargetedEvent<this, NoRenderPropChangePayload>;
    /**
     * Event triggered when an error occurred that prevents the chart from being created or updated
     *
     * @type {EventEmitter}
     * @event
     */
    readonly arcgisRuntimeError: TargetedEvent<this, void>;
    /**
     * Event triggered when a selection is applied to the chart
     *
     * @type {EventEmitter<SelectionCompletePayload>}
     * @event
     */
    readonly arcgisSelectionComplete: TargetedEvent<this, SelectionCompletePayload>;
    /**
     * Event triggered once the chart series color have been assigned
     *
     * @type {EventEmitter<SeriesColorChangePayload>}
     * @event
     */
    readonly arcgisSeriesColorChange: TargetedEvent<this, SeriesColorChangePayload>;
    /**
     * Event carrying the series id as they have been sorted following the `orderOptions` instructions
     *
     * @event
     */
    readonly arcgisSeriesOrder: TargetedEvent<this, string[]>;
    /**
     * Event triggered once the chart is updated
     *
     * @type {EventEmitter<ValidationStatus>}
     * @event
     */
    readonly arcgisUpdateComplete: TargetedEvent<this, ValidationStatus>;
    readonly _setterTypes: {
        disableInteractions?: boolean | undefined;
    };
}
