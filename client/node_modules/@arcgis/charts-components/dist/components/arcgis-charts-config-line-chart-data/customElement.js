import { c as y } from "../../chunks/runtime.js";
import { keyed as F } from "lit-html/directives/keyed.js";
import { WebChartStatisticType as o, defaultBarLineFromFieldsName as $, RESTFieldType as m, WebChartTemporalBinningUnits as v, WebChartNullPolicyTypes as c } from "@arcgis/charts-spec";
import { LitElement as A, createEvent as g, safeClassMap as a } from "@arcgis/lumina";
import { html as r } from "lit";
import { createRef as h, ref as d } from "lit-html/directives/ref.js";
import { u as x } from "../../chunks/useT9n.js";
import { L as l } from "../../chunks/interfaces2.js";
import { d as T, s as P } from "../../chunks/store.js";
import "lodash-es";
import "d3-array";
import { b0 as u, aL as I, aM as w, c9 as p, cg as B } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { c as k, r as S, P as E } from "../../chunks/popover-ui-utils.js";
import { css as L } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const N = L`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:.5rem;margin-right:.5rem;margin-bottom:.5rem;justify-content:space-between}.time-binning-header{display:flex;font-weight:700;margin-left:.5rem;margin-right:.5rem;justify-content:space-between}.text{display:flex;margin-left:.5rem;width:calc(100% - 1.5rem);height:2rem;margin-bottom:.5rem;justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:.5rem;margin-right:.5rem;margin-bottom:1.5rem;justify-content:center}.link-container{display:flex;justify-content:flex-end}`, s = {
  label: "label",
  fieldList: "field-list",
  fab: "fab",
  timeBinningHeader: "time-binning-header",
  linkContainer: "link-container",
  dimText: "dim-text"
};
class _ extends A {
  constructor() {
    super(...arguments), this._messages = x(), this.lineChartPopover = null, this.aggregationElement = h(), this.xAxisFieldElement = h(), this.numericFieldsElement = h(), this.splitByFieldElement = h(), this.intervalAlignmentElement = h(), this.intervalElement = h(), this.onLineChartDataChange = async (e) => {
      try {
        if (e.detail !== null && e.detail?.value !== void 0) {
          const { contentKind: t } = e.detail, i = [...e.detail.value];
          switch (T(P), t) {
            case l.aggregation:
              await this.model.setAggregationType(i[0] !== o.NoAggregation ? i[0] : o.NoAggregation);
              break;
            case l.xAxisField: {
              const n = i[0]?.trim() || "";
              await this.model.setXAxisField(n), this.arcgisChartsConfigResetTimeInterval.emit();
              break;
            }
            case l.numericFields:
              await this.model.setNumericFields(i), this.model.getNumericFields().length > 0 && this.model.getAggregationType() === o.Count && this.model.getNumericFields()[0] !== u(this.layerFieldsInfo) && await this.model.setAggregationType(o.Sum);
              break;
            case l.splitByField: {
              const n = i[0]?.trim() || "";
              await this.model.setSplitByField(n), this.model.setColorMatch(!0);
              break;
            }
            case l.interval:
              this.model.setTemporalBinningSize(i[0]?.intervalSize), this.model.setTemporalBinningUnit(i[0]?.intervalUnits), this.arcgisChartsConfigCustomizedTimeInterval.emit();
              break;
            case l.intervalAlignment:
              this.model.setTimeAggregationType(i[0] ?? "");
              break;
            default:
              break;
          }
        }
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
      this.removeLineChartDataPopover(), this.requestUpdate();
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.popoverClose = (e) => {
      this.lineChartPopover === e?.target && this.removeLineChartDataPopover();
    }, this.layerFieldsInfo = [], this.arcgisChartsConfigCustomizedTimeInterval = g(), this.arcgisChartsConfigDataChangeError = g(), this.arcgisChartsConfigLineChartDataNumericFieldValidate = g(), this.arcgisChartsConfigResetTimeInterval = g();
  }
  static {
    this.properties = { aggregationLabel: 16, timeAggregationLabel: 16, disableSplitBy: 16, messageOverrides: 0, model: 0, resetTimeInterval: 0, layerFieldsInfo: 0, open: 7 };
  }
  static {
    this.styles = N;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  async willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), this.aggregationLabel = await I(this.model.getAggregationType());
    const t = this.model.getTimeAggregationType();
    t !== void 0 && (this.timeAggregationLabel = await w(t)), this.disableSplitBy = this.model.getNumericFields().length > 1;
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeLineChartDataPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  buildNumericFieldItem(e) {
    return F(e, r`<calcite-list-item .label=${p(this.layerFieldsInfo, e)} .value=${e} closable @calciteListItemClose=${this.onRemoveNumericField}></calcite-list-item>`);
  }
  resetTimeIntervalOriginal(e) {
    this.popoverClose(e), this.model.resetTimeInterval !== void 0 && (this.model.resetTimeInterval(), this.arcgisChartsConfigResetTimeInterval.emit());
  }
  onAggregationSelect() {
    this.contentKind = l.aggregation, this.setupPopover();
  }
  onXAxisFieldSelect() {
    this.contentKind = l.xAxisField, this.setupPopover();
  }
  onSplitBySelect() {
    this.splitByFieldElement.value && !this.splitByFieldElement.value.disabled && (this.contentKind = l.splitByField, this.setupPopover());
  }
  onAddNumericFields() {
    this.contentKind = l.numericFields, this.setupPopover();
  }
  async onRemoveNumericField(e) {
    const t = e.target.value;
    await this.model.setNumericFields(this.model.getNumericFields().filter((i) => i !== t));
  }
  onIntervalAlignmentSelect() {
    this.intervalAlignmentElement.value && !this.intervalAlignmentElement.value.disabled && (this.contentKind = l.intervalAlignment, this.setupPopover());
  }
  onIntervalSelect() {
    this.intervalElement.value && !this.intervalElement.value.disabled && (this.contentKind = l.interval, this.setupPopover());
  }
  getCorrectedSplitByValue() {
    return this.model.getSplitByField() === "" || this.model.getNumericFields().length > 1 ? "" : p(this.layerFieldsInfo, this.model.getSplitByField());
  }
  getCorrectedXAxisValue() {
    return this.model.getXAxisField() === $ || this.model.getXAxisField().trim() === "" ? "" : p(this.layerFieldsInfo, this.model.getXAxisField());
  }
  onShowDataLabelsChange(e) {
    this.model.setDataLabelsVisibility(e.target.checked);
  }
  onTrimIncompleteIntervalChange(e) {
    this.model.setTrimIncompleteTimeInterval(e.target.checked);
  }
  onNullPolicyChange(e) {
    this.model.setNullPolicy(e.target.selectedItem.value);
  }
  shouldShowTimeBinning() {
    const e = this.layerFieldsInfo.find((n) => n.name === this.model.getXAxisField()), t = e?.type === m.Date || e?.type === m.DateOnly || e?.type === m.TimestampOffset, i = this.model.getAggregationType() !== o.NoAggregation;
    return t && i;
  }
  setupPopover() {
    this.removeLineChartDataPopover();
    const e = {
      layerFieldsInfo: this.layerFieldsInfo,
      onLineChartDataChange: this.onLineChartDataChange,
      popoverClose: this.popoverClose
    };
    if (this.lineChartPopover = k(E.LineChartDataPopover, e), this.lineChartPopover !== null) {
      const t = {
        size: this.model.getTemporalBinningSize() ?? 1,
        unit: this.model.getTemporalBinningUnit() ?? v.Second
      };
      switch (this.contentKind) {
        case l.aggregation:
          this.lineChartPopover.referenceElement = this.aggregationElement.value, this.lineChartPopover.headingTitle = this._messages.aggregationHeader, this.lineChartPopover.selectedContent = this.model.getAggregationType();
          break;
        case l.xAxisField:
          this.lineChartPopover.referenceElement = this.xAxisFieldElement.value, this.lineChartPopover.headingTitle = this._messages.xAxisFieldHeader, this.lineChartPopover.selectedContent = this.model.getXAxisField();
          break;
        case l.numericFields:
          this.lineChartPopover.referenceElement = this.numericFieldsElement.value, this.lineChartPopover.headingTitle = this._messages.numericFieldsHeader, this.lineChartPopover.selectedContent = this.model.getNumericFields();
          break;
        case l.splitByField:
          this.lineChartPopover.referenceElement = this.splitByFieldElement.value, this.lineChartPopover.headingTitle = this._messages.splitByFieldHeader, this.lineChartPopover.selectedContent = this.model.getSplitByField();
          break;
        case l.interval:
          this.lineChartPopover.referenceElement = this.intervalElement.value, this.lineChartPopover.headingTitle = this._messages.editInterval, this.lineChartPopover.selectedContent = t;
          break;
        case l.intervalAlignment:
          this.lineChartPopover.referenceElement = this.intervalAlignmentElement.value, this.lineChartPopover.headingTitle = this._messages.intervalAlignment, this.lineChartPopover.selectedContent = this.model.getTimeAggregationType() ?? "";
          break;
      }
      this.lineChartPopover.contentKind = this.contentKind, this.lineChartPopover.open = !0, this.addPopover();
    }
  }
  addPopover() {
    !document.body.contains(this.lineChartPopover) && this.lineChartPopover !== null && document.body.appendChild(this.lineChartPopover);
  }
  removeLineChartDataPopover() {
    this.lineChartPopover !== null && (this.lineChartPopover.open = !1, this.lineChartPopover = S(this.lineChartPopover));
  }
  renderAggregation() {
    return r`<arcgis-charts-config-field-select .label=${this.model.getAggregationType() === o.NoAggregation ? this._messages.noAggregation : this.aggregationLabel} @click=${this.onAggregationSelect} ${d(this.aggregationElement)}></arcgis-charts-config-field-select>`;
  }
  renderXAxisField() {
    const e = this.getCorrectedXAxisValue();
    return r`<arcgis-charts-config-field-select .label=${e} @click=${this.onXAxisFieldSelect} ${d(this.xAxisFieldElement)}></arcgis-charts-config-field-select>`;
  }
  renderSplitBy() {
    const e = this.getCorrectedSplitByValue();
    return r`<arcgis-charts-config-field-select .label=${e} .disabled=${this.disableSplitBy} @click=${this.onSplitBySelect} ${d(this.splitByFieldElement)}></arcgis-charts-config-field-select>`;
  }
  renderNumericFields(e) {
    const t = u(this.layerFieldsInfo), i = [];
    for (const n of e)
      n !== t && i.push(this.buildNumericFieldItem(n));
    return r`<calcite-list label class=${a(s.fieldList)} ${d(this.numericFieldsElement)}>${i}</calcite-list>`;
  }
  renderInterval() {
    const e = (this.model.getTemporalBinningSize() ?? 0) <= 0, t = this.model.getTemporalBinningSize() ?? "", i = B(this.model.getTemporalBinningUnit() ?? v.Second, this._messages) ?? "";
    return [
      r`<calcite-list label selection-appearance=border><calcite-list-item .value=${e ? "" : `${t} ${i}`} .label=${e ? "" : `${t} ${i}`} @click=${e ? () => {
      } : this.onIntervalSelect} ${d(this.intervalElement)}><calcite-icon slot=content-end icon=pencil></calcite-icon></calcite-list-item></calcite-list>`,
      r`<div class=${a(s.linkContainer)}><calcite-button appearance=transparent scale=s icon-end=reset @click=${this.resetTimeIntervalOriginal}>${this._messages.reset}</calcite-button></div>`
    ];
  }
  renderIntervalAlignment() {
    return r`<arcgis-charts-config-field-select .label=${this.timeAggregationLabel} @click=${this.onIntervalAlignmentSelect} ${d(this.intervalAlignmentElement)}></arcgis-charts-config-field-select>`;
  }
  renderEmptyBins() {
    return r`<calcite-radio-button-group name=empty-bins layout=vertical @calciteRadioButtonGroupChange=${this.onNullPolicyChange}><calcite-label layout=inline><calcite-radio-button .value=${c.Zero} .checked=${this.model.getNullPolicy() === c.Zero}></calcite-radio-button>${this._messages.treatAsZero}</calcite-label><calcite-label layout=inline><calcite-radio-button .value=${c.Interpolate} .checked=${this.model.getNullPolicy() === c.Interpolate}></calcite-radio-button>${this._messages.connectLine}</calcite-label><calcite-label layout=inline><calcite-radio-button .value=${c.Null} .checked=${this.model.getNullPolicy() === c.Null}></calcite-radio-button>${this._messages.breakLine}</calcite-label></calcite-radio-button-group>`;
  }
  render() {
    const e = this.renderAggregation(), t = this.renderXAxisField(), i = this.renderSplitBy(), n = this.renderNumericFields([...this.model.getNumericFields()]), b = this.renderInterval(), f = this.renderIntervalAlignment(), C = this.renderEmptyBins();
    return r`<div><calcite-label class=${a(s.label)}>${this._messages.xAxisField}${t}</calcite-label><calcite-label class=${a(s.label)}>${this._messages.aggregation}${e}</calcite-label><calcite-label class=${a(s.label)}>${this._messages.numericFields}${n}</calcite-label><div class=${a(s.fab)}><calcite-fab appearance=outline-fill kind=neutral scale=m .label=${this._messages.selectNumericFields} text-enabled .text=${this._messages.selectNumericFields} icon=plus @click=${this.onAddNumericFields}></calcite-fab></div><calcite-label class=${a(s.label)}><span class=${a(this.disableSplitBy ? s.dimText : "")}>${this._messages.splitBy}</span>${i}</calcite-label><div .hidden=${!this.shouldShowTimeBinning()}><h3 class=${a(s.timeBinningHeader)}>${this._messages.timeBinningOptions}</h3><calcite-label class=${a(s.label)}>${this._messages.interval}${b}</calcite-label><calcite-label class=${a(s.label)}>${this._messages.intervalAlignment}${f}</calcite-label><calcite-label class=${a(s.label)} layout=inline-space-between>${this._messages.trimIncompleteInterval}<calcite-switch .checked=${this.model.getTrimIncompleteTimeInterval()} @calciteSwitchChange=${this.onTrimIncompleteIntervalChange}></calcite-switch></calcite-label><calcite-label class=${a(s.label)}>${this._messages.emptyBins}${C}</calcite-label></div><calcite-label class=${a(s.label)} layout=inline-space-between>${this._messages.showDataLabels}<calcite-switch .checked=${this.model.getDataLabelsVisibility()} @calciteSwitchChange=${this.onShowDataLabelsChange}></calcite-switch></calcite-label></div>`;
  }
}
y("arcgis-charts-config-line-chart-data", _);
export {
  _ as ArcgisChartsConfigLineChartData
};
