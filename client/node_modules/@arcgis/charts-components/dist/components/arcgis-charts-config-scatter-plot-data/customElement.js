import { c as E } from "../../chunks/runtime.js";
import { WebChartTypes as b, RESTSymbolType as z } from "@arcgis/charts-spec";
import { cloneDeep as I, isEmpty as T, toNumber as $ } from "lodash-es";
import "d3-array";
import { aO as F, c9 as y, Z as C, P as w } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as x, c as L, P as k } from "../../chunks/popover-ui-utils.js";
import { S as l, b as h } from "../../chunks/interfaces2.js";
import { d as A, s as m } from "../../chunks/store.js";
import { b as f, m as p, f as M, s as u, D as V, c as g } from "../../chunks/chart-ui-utils2.js";
import { u as _ } from "../../chunks/useT9n.js";
import { html as r } from "lit";
import { createRef as d, ref as a } from "lit-html/directives/ref.js";
import { LitElement as D, createEvent as v, safeClassMap as i, safeStyleMap as P } from "@arcgis/lumina";
import { css as N } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const s = {
  label: "label",
  r2: "r2",
  numberInput: "number-input",
  iconSelect: "icon-select",
  sectionLabel: "section-label",
  switchElement: "switch-element",
  sectionContainer: "section-container",
  multiInputSection: "multi-input-section"
}, R = N`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}:host .number-input{margin-bottom:.5rem;display:flex}:host .number-input>div{width:100%}calcite-list-item{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor)}calcite-slider{margin-top:-1.5rem}.r2{margin:var(--arcgis-charts-config-margin-major) var(--arcgis-charts-config-margin-minor)}.label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.section-container{display:flex;flex-direction:column}.icon-select{cursor:pointer}.section-label{display:flex;margin:var(--arcgis-charts-config-margin-major) var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.switch-element{margin-right:var(--arcgis-charts-config-margin-minor)}.multi-input-section{display:flex;justify-content:space-between;align-items:center}`;
class K extends D {
  constructor() {
    super(...arguments), this._messages = _(), this.scatterplotPopover = null, this.selectColorElement = d(), this.selectTrendLineElement = d(), this.xAxisElement = d(), this.yAxisElement = d(), this.sizeVariableElement = d(), this.colorModeElement = d(), this.symbolSizeModeElement = d(), this.minSizeInputElement = d(), this.maxSizeInputElement = d(), this.items = [], this.setTrendLineSymbol = (e) => {
      const t = e.detail;
      this.model.setLinearTrendSymbol(I(t));
    }, this.setFixedSymbolRGBAColor = (e) => {
      const t = e.detail, [o, n, c] = t, S = w * 255;
      this.model.setFixedMarkerSymbol({
        ...this.model.getFixedMarkerSymbol(),
        color: [o, n, c, S]
      });
    }, this.setXYField = async (e) => {
      try {
        const t = e.detail;
        A(m), this.contentKind === l.xAxisField ? await this.model.setXAxisField(t) : await this.model.setYAxisField(t), this.removeScatterplotPopover();
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
    }, this.setSizeVariableField = (e) => {
      try {
        const t = e.detail;
        t ? this.model.setSizePolicy({
          ...this.model.getSizePolicy(),
          type: b.SizePolicy,
          field: t
        }) : this.model.setSizePolicy(void 0), m.scatterplotData[m.selectedChartId] = {
          ...m.scatterplotData[m.selectedChartId],
          sizePolicyField: this.model.getSizePolicy()?.field ?? void 0
        }, this.removeScatterplotPopover();
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
    }, this.closeScatterplotPopover = (e) => {
      this.scatterplotPopover === e?.target && (this.contentKind = l.none, this.removeScatterplotPopover());
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
      const { minSize: e, maxSize: t } = this.model.getSizePolicy() ?? {};
      this.minSizeInputElement.value !== void 0 && e !== void 0 && (this.minSizeInputElement.value.value = `${e}`, f(this.minSizeInputElement.value.value, this.minSizeInputElement.value.min, this.minSizeInputElement.value.max) ? p({
        inputElement: this.minSizeInputElement.value,
        status: g.IDLE
      }) : p({
        inputElement: this.minSizeInputElement.value,
        status: g.INVALID
      })), this.maxSizeInputElement.value !== void 0 && t !== void 0 && (this.maxSizeInputElement.value.value = `${t}`, f(this.maxSizeInputElement.value.value, this.maxSizeInputElement.value.min, this.maxSizeInputElement.value.max) ? p({
        inputElement: this.maxSizeInputElement.value,
        status: g.IDLE
      }) : p({
        inputElement: this.maxSizeInputElement.value,
        status: g.INVALID
      }));
    }, this.segmentedControlRef = (e) => {
      e && (e.focus = () => {
      }, this.items.push(e));
    }, this.layerFieldsInfo = [], this.arcgisChartsConfigDataChangeError = v(), this.arcgisChartsConfigPopoverOpenChange = v(), this.arcgisChartsConfigScatterplotPopoverChange = v();
  }
  static {
    this.properties = { selectedElement: 16, selectedSizeType: 16, messageOverrides: 0, model: 0, r2: 11, layerFieldsInfo: 0, isTableLayer: 5, open: 7 };
  }
  static {
    this.styles = R;
  }
  async load() {
    this.modelChange(this.model), this.onModelConfigChange(), this.defaultR2Label = await F(), this.selectedSizeType = this.getCurrentSymbolSizeType(), this.selectedSizeType === h.Proportional && (m.scatterplotData[m.selectedChartId] = {
      ...m.scatterplotData[m.selectedChartId],
      sizePolicyField: this.model.getSizePolicy()?.field
    });
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("selectedElement") && this.openPopover();
  }
  async loaded() {
    await (async (t) => await new Promise((o) => setTimeout(() => o(), t)))(250), this.items.forEach((t) => {
      delete t.focus;
    });
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeScatterplotPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  openPopover() {
    (typeof this.selectedElement == "string" || !T(this.selectedElement)) && this.setupScatterplotPopover();
  }
  setShowTrendLine(e) {
    const t = e.target.checked;
    this.model.setShowLinearTrend(t), !t && this.contentKind === l.trendLine && this.closeScatterplotPopover(e);
  }
  symbolSizeChange(e) {
    const t = e.target, { value: o } = t;
    if (o !== void 0 && f(o, t.min, t.max)) {
      const n = Number.parseInt(o), c = this.model.getSizePolicy(), S = this.model.getFixedMarkerSymbol();
      switch (t.name) {
        case "fixed-symbol-size":
          S !== void 0 && this.model.setFixedMarkerSymbol({
            ...S,
            size: n
          });
          break;
        case "proportional-symbol-min-size":
          c !== void 0 && this.model.setSizePolicy({
            ...c,
            minSize: n
          });
          break;
        case "proportional-symbol-max-size":
          c !== void 0 && this.model.setSizePolicy({
            ...c,
            maxSize: n
          });
          break;
      }
      p({
        inputElement: t,
        status: g.IDLE
      });
    } else
      p({
        inputElement: t,
        status: g.INVALID
      });
  }
  symbolSizeRangeSliderInput(e) {
    const t = e.target, { minValue: o, maxValue: n } = t, c = this.model.getSizePolicy();
    c !== void 0 && (this.model.setSizePolicy({
      ...c,
      minSize: o,
      maxSize: n
    }), this.minSizeInputElement.value !== void 0 && (this.minSizeInputElement.value.value = `${o}`), this.maxSizeInputElement.value !== void 0 && (this.maxSizeInputElement.value.value = `${n}`));
  }
  changeColorTypeToggle() {
    const e = this.colorModeElement.value?.selectedItem?.value;
    this.model.setColorMatch(e === this._messages.useLayerColors);
  }
  changeSymbolSizeTypeToggle() {
    const e = this.symbolSizeModeElement.value?.value;
    this.selectedSizeType = e;
    const t = m.scatterplotData[m.selectedChartId]?.sizePolicyField;
    e === h.Proportional && t !== void 0 ? this.model.setSizePolicy({
      ...this.model.getSizePolicy(),
      type: b.SizePolicy,
      field: t
    }) : e === h.Fixed && this.model.setSizePolicy({
      ...this.model.getSizePolicy(),
      type: b.SizePolicy,
      field: ""
    });
  }
  changeElementStyle(e) {
    let t = e.target;
    t.localName === "calcite-icon" && (t = t.parentElement), t.value === "selectColor" ? (this.contentKind = l.symbol, this.selectedElement = this.model.getFixedMarkerSymbol()?.color) : t.value === "selectTrendLine" && (this.contentKind = l.trendLine, this.selectedElement = this.model.getLinearTrendSymbol());
  }
  onXVariableSelectChange() {
    this.contentKind = l.xAxisField, this.selectedElement = this.model.getXAxisField();
  }
  onYVariableSelectChange() {
    this.contentKind = l.yAxisField, this.selectedElement = this.model.getYAxisField();
  }
  onSizeVariableSelectChange() {
    this.contentKind = l.sizeVariable, this.selectedElement = this.model.getSizePolicy()?.field ?? "";
  }
  setupScatterplotPopover() {
    this.scatterplotPopover = x(this.scatterplotPopover);
    const e = {
      setTrendLineSymbol: this.setTrendLineSymbol,
      setFixedSymbolRGBAColor: this.setFixedSymbolRGBAColor,
      setXYField: this.setXYField,
      setSizeVariableField: this.setSizeVariableField,
      openChange: this.openChange,
      popoverClose: this.closeScatterplotPopover
    };
    switch (this.scatterplotPopover = L(k.ScatterplotDataPopover, e), this.scatterplotPopover.layerFieldsInfo = [...this.layerFieldsInfo], this.scatterplotPopover.contentKind = this.contentKind, this.contentKind) {
      case l.xAxisField:
        this.scatterplotPopover.referenceElement = this.xAxisElement.value, this.scatterplotPopover.placement = "trailing", this.scatterplotPopover.selectedContent = this.model.getXAxisField(), this.scatterplotPopover.headingTitle = this._messages.selectAField;
        break;
      case l.yAxisField:
        this.scatterplotPopover.referenceElement = this.yAxisElement.value, this.scatterplotPopover.placement = "trailing", this.scatterplotPopover.selectedContent = this.model.getYAxisField(), this.scatterplotPopover.headingTitle = this._messages.selectAField;
        break;
      case l.sizeVariable:
        this.scatterplotPopover.referenceElement = this.sizeVariableElement.value, this.scatterplotPopover.placement = "trailing", this.scatterplotPopover.selectedContent = this.model.getSizePolicy()?.field ?? "", this.scatterplotPopover.headingTitle = this._messages.selectAField;
        break;
      case l.symbol:
      case l.trendLine: {
        const t = this.selectedElement;
        this.scatterplotPopover.selectedContent = this.selectedElement, this.scatterplotPopover.placement = "leading", Array.isArray(this.selectedElement) ? this.scatterplotPopover.referenceElement = this.selectColorElement.value : t?.type === z.SLS && (this.scatterplotPopover.referenceElement = this.selectTrendLineElement.value);
        break;
      }
      default:
        this.contentKind = l.none, this.removeScatterplotPopover();
        break;
    }
    this.contentKind !== l.none && (this.scatterplotPopover.open = !0, this.addScatterplotPopover());
  }
  removeScatterplotPopover() {
    this.scatterplotPopover !== null && (this.scatterplotPopover = x(this.scatterplotPopover)), this.selectedElement = {};
  }
  addScatterplotPopover() {
    !document.body.contains(this.scatterplotPopover) && this.scatterplotPopover !== void 0 && this.scatterplotPopover !== null && document.body.appendChild(this.scatterplotPopover);
  }
  getCurrentSymbolSizeType() {
    const e = this.model.getSizePolicy();
    return e === void 0 || e.field === "" ? h.Fixed : h.Proportional;
  }
  renderXVariable() {
    return r`<arcgis-charts-config-field-select .label=${y(this.layerFieldsInfo, this.model.getXAxisField() ?? "")} @click=${this.onXVariableSelectChange} ${a(this.xAxisElement)}></arcgis-charts-config-field-select>`;
  }
  renderYVariable() {
    return r`<arcgis-charts-config-field-select .label=${y(this.layerFieldsInfo, this.model.getYAxisField() ?? "")} @click=${this.onYVariableSelectChange} ${a(this.yAxisElement)}></arcgis-charts-config-field-select>`;
  }
  renderStatistics() {
    const [e, t, o, n] = [...this.model.getLinearTrendSymbol()?.color ?? C(0)];
    return r`<div class=${i(s.sectionContainer)}><calcite-label class=${i(s.label)} layout=inline-space-between>${this._messages.showLinearTrend}<calcite-switch class=${i(s.switchElement)} .checked=${this.model.getShowLinearTrend()} @calciteSwitchChange=${this.setShowTrendLine}></calcite-switch></calcite-label><calcite-list label selection-mode=single selection-appearance=border><calcite-list-item .label=${this._messages.trendLineStyle} value=selectTrendLine .hidden=${!this.model.getShowLinearTrend()} .selected=${this.selectedElement?.type === z.SLS} @click=${this.changeElementStyle} ${a(this.selectTrendLineElement)}><calcite-icon slot=content-end icon=line-solid style=${P({ color: `rgba(${e},${t},${o},${n / 255})` })} class=${i(s.iconSelect)} @click=${this.changeElementStyle}></calcite-icon></calcite-list-item></calcite-list><div class=${i(s.r2)} .hidden=${!this.model.getShowLinearTrend()}>${`${this._messages.r2}: ${Number.isNaN(this.r2) ? this.defaultR2Label : M(this.r2, V)}`}</div></div>`;
  }
  renderFixedSymbol() {
    return r`<calcite-label class=${i(s.label)}>${this._messages.size}<calcite-input type=number name=fixed-symbol-size class=${i(s.numberInput)} min=1 max=100 step=1 .value=${u(this.model.getFixedMarkerSymbol()?.size)} @calciteInputInput=${this.symbolSizeChange}></calcite-input></calcite-label>`;
  }
  renderSizeVariable() {
    return r`<arcgis-charts-config-field-select .label=${y(this.layerFieldsInfo, this.model.getSizePolicy()?.field ?? "")} .invalid=${this.layerFieldsInfo.find((e) => e.name === this.model.getSizePolicy()?.field) === void 0} @click=${this.onSizeVariableSelectChange} ${a(this.sizeVariableElement)}></arcgis-charts-config-field-select>`;
  }
  renderMinSizeInput() {
    return r`<calcite-input type=number name=proportional-symbol-min-size class=${i(s.numberInput)} min=1 .max=${this.model.getSizePolicy()?.maxSize ?? 100} step=1 .value=${u(this.model.getSizePolicy()?.minSize)} @calciteInputInput=${this.symbolSizeChange} ${a(this.minSizeInputElement)}></calcite-input>`;
  }
  renderMaxSizeInput() {
    return r`<calcite-input type=number name=proportional-symbol-max-size class=${i(s.numberInput)} .min=${this.model.getSizePolicy()?.minSize ?? 1} max=100 step=1 .value=${u(this.model.getSizePolicy()?.maxSize)} @calciteInputInput=${this.symbolSizeChange} ${a(this.maxSizeInputElement)}></calcite-input>`;
  }
  renderProportionalSymbol() {
    return r`<div class=${i(s.sectionContainer)}><calcite-label class=${i(s.label)}>${this._messages.numberRequired}${this.renderSizeVariable()}</calcite-label><div class=${i(s.multiInputSection)}><calcite-label class=${i(s.label)}>${this._messages.minSize}${this.renderMinSizeInput()}</calcite-label><calcite-label class=${i(s.label)}>${this._messages.maxSize}${this.renderMaxSizeInput()}</calcite-label></div><calcite-label><calcite-slider min=1 max=100 .minValue=${$(u(this.model.getSizePolicy()?.minSize))} .maxValue=${$(u(this.model.getSizePolicy()?.maxSize))} step=1 @calciteSliderInput=${this.symbolSizeRangeSliderInput}></calcite-slider></calcite-label></div>`;
  }
  renderSymbolSizeType() {
    return r`<calcite-label class=${i(s.label)}>${this._messages.size}<calcite-segmented-control name=symbolSizeType layout=horizontal scale=s @calciteSegmentedControlChange=${this.changeSymbolSizeTypeToggle} ${a(this.symbolSizeModeElement)}><calcite-segmented-control-item .value=${h.Fixed} .checked=${h.Fixed === this.selectedSizeType} ${a(this.segmentedControlRef)}>${this._messages.fixed}</calcite-segmented-control-item><calcite-segmented-control-item .value=${h.Proportional} .checked=${h.Proportional === this.selectedSizeType} ${a(this.segmentedControlRef)}>${this._messages.proportional}</calcite-segmented-control-item></calcite-segmented-control></calcite-label>`;
  }
  renderSymbol() {
    const [e, t, o, n] = [...this.model.getFixedMarkerSymbol()?.color ?? C(0)];
    return r`<div class=${i(s.sectionContainer)}>${this.renderSymbolSizeType()}${this.selectedSizeType === h.Proportional ? this.renderProportionalSymbol() : this.renderFixedSymbol()}<calcite-label class=${i(s.label)}>${this._messages.color}${this.isTableLayer !== !0 ? r`<calcite-segmented-control name=layerColor layout=horizontal scale=s @calciteSegmentedControlChange=${this.changeColorTypeToggle} ${a(this.colorModeElement)}><calcite-segmented-control-item .value=${this._messages.useLayerColors} .checked=${this.model.getColorMatch()} ${a(this.segmentedControlRef)}>${this._messages.useLayerColors}</calcite-segmented-control-item><calcite-segmented-control-item .value=${this._messages.singleColor} .checked=${!this.model.getColorMatch()} ${a(this.segmentedControlRef)}>${this._messages.singleColor}</calcite-segmented-control-item></calcite-segmented-control>` : null}</calcite-label><calcite-list label selection-mode=single selection-appearance=border><calcite-list-item .label=${this._messages.color} value=selectColor .hidden=${this.model.getColorMatch() && this.isTableLayer !== !0} .selected=${Array.isArray(this.selectedElement)} @click=${this.changeElementStyle} ${a(this.selectColorElement)}><calcite-icon slot=content-end icon=circle-f style=${P({ color: `rgba(${e},${t},${o},${n / 255})` })} class=${i(s.iconSelect)} @click=${this.changeElementStyle}></calcite-icon></calcite-list-item></calcite-list></div>`;
  }
  render() {
    return r`<div><h3 class=${i(s.sectionLabel)}>${this._messages.variables}</h3><calcite-label class=${i(s.label)}>${this._messages.xAxisNumber}${this.renderXVariable()}</calcite-label><calcite-label class=${i(s.label)}>${this._messages.yAxisNumber}${this.renderYVariable()}</calcite-label><h3 class=${i(s.sectionLabel)}>${this._messages.statistics}</h3>${this.renderStatistics()}<h3 class=${i(s.sectionLabel)}>${this._messages.symbol}</h3>${this.renderSymbol()}</div>`;
  }
}
E("arcgis-charts-config-scatter-plot-data", K);
export {
  K as ArcgisChartsConfigScatterplotData
};
