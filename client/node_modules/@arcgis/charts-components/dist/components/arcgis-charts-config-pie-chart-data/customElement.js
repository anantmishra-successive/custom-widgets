import { c as C } from "../../chunks/runtime.js";
import { keyed as f } from "lit-html/directives/keyed.js";
import { defaultPieFromFieldsName as n, WebChartStatisticType as u } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { c9 as m, b0 as v } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { c as b, r as y, P } from "../../chunks/popover-ui-utils.js";
import { a as g } from "../../chunks/common.js";
import { P as r } from "../../chunks/interfaces2.js";
import { u as F } from "../../chunks/useT9n.js";
import { html as a } from "lit";
import { createRef as c, ref as h } from "lit-html/directives/ref.js";
import { LitElement as $, createEvent as p, safeClassMap as o } from "@arcgis/lumina";
import { css as w } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const l = {
  label: "label",
  fieldList: "field-list",
  fab: "fab"
}, E = w`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin);margin-top:var(--arcgis-charts-top-section-margin)}.label,.disabled-label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.field-list{max-height:50vh;overflow-y:auto}.disabled-label{pointer-events:none}.fab{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:1.5rem;justify-content:center}`;
class N extends $ {
  constructor() {
    super(...arguments), this._messages = F(), this.pieChartPopover = null, this.sortOrderElement = c(), this.categoryElement = c(), this.numericFieldsElement = c(), this.onPieChartDataChange = async (e) => {
      try {
        if (e.detail !== null && e.detail?.value !== void 0) {
          const { contentKind: t } = e.detail, i = [...e.detail.value];
          switch (t) {
            case r.aggregation:
              await this.model.setAggregationType(i[0] !== u.NoAggregation ? i[0] : "");
              break;
            case r.category: {
              const s = i[0]?.trim() || "";
              this.updateMode(s);
              const d = this.model.getNumericFields();
              d.length > 1 && s !== n && await this.model.setNumericFields([d[0]]), await this.model.setCategory(s), this.model.setColorMatch(!0);
              break;
            }
            case r.numericFields:
              i.length > 1 && (this.updateMode(n), await this.model.setCategory(n)), await this.model.setNumericFields(i);
              break;
            case r.sortOrder:
              this.model.setSortOrder(i[0]);
              break;
            default:
              break;
          }
        }
      } catch (t) {
        throw this.arcgisChartsConfigDataChangeError.emit({ error: t, model: this.model }), t;
      }
      this.requestUpdate();
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.popoverClose = (e) => {
      this.pieChartPopover === e?.target && this.removePieChartDataPopover();
    }, this.layerFieldsInfo = [], this.arcgisChartsConfigDataChangeError = p(), this.arcgisChartsConfigPieChartDataNumericFieldValidate = p();
  }
  static {
    this.properties = { messageOverrides: 0, model: 0, layerFieldsInfo: 0, open: 7 };
  }
  static {
    this.styles = E;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model"));
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removePieChartDataPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, t) {
    t?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  buildNumericFieldItem(e) {
    return f(e, a`<calcite-list-item .label=${m(this.layerFieldsInfo, e)} .value=${e} closable @calciteListItemClose=${this.onRemoveNumericField}></calcite-list-item>`);
  }
  onSortOrderSelect() {
    this.contentKind = r.sortOrder, this.setupPopover();
  }
  onCategorySelect() {
    this.contentKind = r.category, this.setupPopover();
  }
  onAddNumericFields() {
    this.contentKind = r.numericFields, this.setupPopover();
  }
  async onRemoveNumericField(e) {
    const t = e.target.value;
    await this.model.setNumericFields(this.model.getNumericFields().filter((i) => i !== t));
  }
  onShowDataLabelsChange(e) {
    this.model.setDataLabelsVisibility(e.target.checked);
  }
  updateMode(e) {
    const t = e !== n && e.trim() !== "";
    this.model.setMode(t ? g.Category : g.Fields);
  }
  setupPopover() {
    this.removePieChartDataPopover();
    const e = {
      layerFieldsInfo: [...this.layerFieldsInfo],
      onPieChartDataChange: this.onPieChartDataChange,
      popoverClose: this.popoverClose
    };
    if (this.pieChartPopover = b(P.PieChartDataPopover, e), this.pieChartPopover !== null) {
      switch (this.contentKind) {
        case r.category:
          this.pieChartPopover.referenceElement = this.categoryElement.value, this.pieChartPopover.headingTitle = this._messages.categoryHeader, this.pieChartPopover.selectedContent = this.model.getCategory();
          break;
        case r.numericFields:
          this.pieChartPopover.referenceElement = this.numericFieldsElement.value, this.pieChartPopover.headingTitle = this._messages.numericFieldsMultipleHeader, this.pieChartPopover.selectedContent = this.model.getNumericFields();
          break;
        case r.sortOrder:
          this.pieChartPopover.referenceElement = this.sortOrderElement.value, this.pieChartPopover.headingTitle = this._messages.sortOrderHeader, this.pieChartPopover.selectedContent = this.model.getSortOrder();
          break;
      }
      this.pieChartPopover.contentKind = this.contentKind, this.pieChartPopover.open = !0, this.addPopover();
    }
  }
  addPopover() {
    !document.body.contains(this.pieChartPopover) && this.pieChartPopover !== null && document.body.appendChild(this.pieChartPopover);
  }
  getCorrectedCategoryValue() {
    return this.model.getCategory() === n || this.model.getCategory().trim() === "" ? "" : m(this.layerFieldsInfo, this.model.getCategory());
  }
  removePieChartDataPopover() {
    this.pieChartPopover !== null && (this.pieChartPopover.open = !1, this.pieChartPopover = y(this.pieChartPopover));
  }
  renderSorting() {
    return a`<arcgis-charts-config-field-select .label=${this._messages[this.model.getSortOrder()]} @click=${this.onSortOrderSelect} ${h(this.sortOrderElement)}></arcgis-charts-config-field-select>`;
  }
  renderCategory() {
    const e = this.getCorrectedCategoryValue();
    return a`<arcgis-charts-config-field-select .label=${e} @click=${this.onCategorySelect} ${h(this.categoryElement)}></arcgis-charts-config-field-select>`;
  }
  renderNumericFields(e) {
    const t = v(this.layerFieldsInfo), i = [];
    for (const s of e)
      s !== t && i.push(this.buildNumericFieldItem(s));
    return a`<calcite-list label class=${o(l.fieldList)} ${h(this.numericFieldsElement)}>${i}</calcite-list>`;
  }
  render() {
    const e = this.renderCategory(), t = this.renderSorting(), i = this.renderNumericFields([...this.model.getNumericFields()]);
    return a`<div><calcite-label class=${o(l.label)}>${this._messages.category}${e}</calcite-label>${[
      a`<calcite-label class=${o(l.label)}>${this._messages.numericFields}${i}</calcite-label>`,
      a`<div class=${o(l.fab)}><calcite-fab appearance=outline-fill kind=neutral scale=m .label=${this._messages.selectNumericFields} text-enabled .text=${this._messages.selectNumericFields} icon=plus @click=${this.onAddNumericFields}></calcite-fab></div>`
    ]}<calcite-label class=${o(l.label)} layout=inline-space-between>${this._messages.showDataLabels}<calcite-switch .checked=${this.model.getDataLabelsVisibility()} @calciteSwitchChange=${this.onShowDataLabelsChange}></calcite-switch></calcite-label><calcite-label class=${o(l.label)}>${this._messages.sortOrder}${t}</calcite-label></div>`;
  }
}
C("arcgis-charts-config-pie-chart-data", N);
export {
  N as ArcgisChartsConfigPieChartData
};
