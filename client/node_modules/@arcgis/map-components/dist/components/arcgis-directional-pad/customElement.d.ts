/// <reference types="@arcgis/core/interfaces.d.ts" />
/// <reference types="../../index.d.ts" />
import { Use } from '@arcgis/lumina/controllers';
import { default as DirectionalPadViewModel } from '@arcgis/core/widgets/DirectionalPad/DirectionalPadViewModel.js';
import { JsxNode, PublicLitElement as LitElement, TargetedEvent } from '@arcgis/lumina';
import { ArcgisReferenceElement } from '../../utils/component-utils';

declare const useDirectionalPadViewModel: (component: LitElement & Pick<DirectionalPadViewModel, never> & import('../../controllers/useViewModel').ViewModelControllerUses<DirectionalPadViewModel>) => DirectionalPadViewModel;
/**
 * A directional pad (D-Pad) component can be used to control the position and
 * rotation of the map. The D-Pad provides eight directions of movement, a small
 * compass which indicates the current orientation of the map and a slider for
 * rotating the map.
 *
 * It is also possible to disable the map's rotation controls or change the size
 * of the component.
 *
 * The Directional Pad component is not supported in 3D.
 *
 * [Read more...](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-directional-pad/)
 */
export declare class ArcgisDirectionalPad extends LitElement {
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporarily hide it. If this
     * is set, make sure to call the [destroy](https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-directional-pad/#destroy) method when you are done to
     * prevent memory leaks.
     *
     * @default false
     */
    autoDestroyDisabled: boolean;
    /**
     * Indicates whether interaction is allowed on the component. When `true`,
     * this property sets the component to a disabled state to disable any user
     * interaction.
     *
     * @default false
     */
    disabled: boolean;
    /**
     * Whether to hide directional pad buttons.
     *
     * @default false
     */
    hideDirectionalButtons: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     *
     * @see [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/)
     * @default "move"
     */
    icon?: string;
    /** The component's default label. */
    label?: string;
    /**
     * Replace localized message strings with your own strings.
     *
     * _**Note**: Individual message keys may change between releases._
     */
    messageOverrides?: typeof this.messages._overrides;
    /** @default "bottom-left" */
    position: __esri.UIPosition;
    /**
     * By assigning the `id` attribute of the Map or Scene component to this property, you can position a child component anywhere in the DOM while still maintaining a connection to the Map or Scene.
     *
     * @see [Associate components with a Map or Scene component](https://developers.arcgis.com/javascript/latest/programming-patterns/#associate-components-with-a-map-or-scene-component)
     */
    referenceElement?: ArcgisReferenceElement | string;
    /**
     * Whether to display the button to reset the rotation angle. This only takes
     * effect if showRotationSlider is true.
     *
     * @default false
     */
    showRotationResetButton: boolean;
    /**
     * Whether to display the map rotation slider.
     *
     * @default false
     */
    showRotationSlider: boolean;
    /** The current state of the component. */
    readonly state: "ready" | "disabled" | "moving";
    /**
     * Determines the size of directional pad buttons and the slider.
     *
     * In addition to this parameter, you can set the width on the component
     * container to dictate directional pad size.
     *
     * @default "s"
     */
    visualScale: HTMLCalciteButtonElement["scale"];
    /** Permanently destroy the component. */
    destroy(): Promise<void>;
    /** Emitted when the value of a property is changed. Use this to listen to changes to properties. */
    readonly arcgisPropertyChange: TargetedEvent<this, {
        name: "state";
    }>;
    /** Emitted when the component associated with a map or scene view is is ready to be interacted with. */
    readonly arcgisReady: TargetedEvent<this, void>;
    private messages: Partial<{
        componentLabel: string;
        northWest: string;
        north: string;
        northEast: string;
        east: string;
        southEast: string;
        south: string;
        southWest: string;
        west: string;
        heading: string;
        resetHeading: string;
        unsupported: string;
    }> & import('@arcgis/lumina/controllers').T9nMeta<{
        componentLabel: string;
        northWest: string;
        north: string;
        northEast: string;
        east: string;
        southEast: string;
        south: string;
        southWest: string;
        west: string;
        heading: string;
        resetHeading: string;
        unsupported: string;
    }>;
}
export {};
