import { c as L } from "../../chunks/runtime.js";
import { keyed as f } from "lit-html/directives/keyed.js";
import { b as d } from "../../chunks/common.js";
import { RESTSymbolType as T } from "@arcgis/charts-spec";
import { debounce as C, isEmpty as E, toNumber as G } from "lodash-es";
import "d3-array";
import { aP as S, V as $ } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as N, c as x, P as _ } from "../../chunks/popover-ui-utils.js";
import { U as I, d as D, e as O, s as p } from "../../chunks/chart-ui-utils2.js";
import { u as w } from "../../chunks/useT9n.js";
import { html as h } from "lit";
import { createRef as m, ref as g } from "lit-html/directives/ref.js";
import { LitElement as M, createEvent as P, safeStyleMap as b, safeClassMap as s } from "@arcgis/lumina";
import { css as k } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const o = {
  sectionLabel: "section-label",
  label: "label",
  sliceList: "slice-list",
  radioGroup: "radio-group",
  pieDonutLabelsContainer: "pie-donut-labels-container",
  sliderInputContainer: "slider-input-container",
  groupingLabelContainer: "grouping-label-container",
  numberInput: "number-input"
}, z = k`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.section-label{display:flex;margin:var(--arcgis-charts-config-margin-major) var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.label{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-minor);justify-content:space-between}.label .grouping-label-container{display:flex;justify-content:space-between}.label .slider-input-container{display:flex}.label .slider-input-container calcite-slider{--calcite-label-margin-bottom: var(--arcgis-charts-intra-section-margin) !important;margin-right:var(--arcgis-charts-config-margin-minor);flex-grow:1}.label .slider-input-container .number-input{width:8rem}.slice-list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.radio-group{margin-top:var(--arcgis-charts-config-margin-minor)}.pie-donut-labels-container{display:flex;justify-content:space-between;margin-top:calc(var(--arcgis-charts-config-margin-minor) * -3)}`;
class V extends M {
  constructor() {
    super(...arguments), this._messages = w(), this.slicesPopover = null, this.donutSizeSliderElement = m(), this.groupingThresholdElement = m(), this.groupingThresholdSliderElement = m(), this.labelCharacterLimitElement = m(), this.decimalPlacesElement = m(), this.onDonutSizeSliderChange = C(() => {
      this.donutSizeSliderElement.value && Number.isInteger(this.donutSizeSliderElement.value?.value) && this.model.setInnerRadiusSize(this.donutSizeSliderElement.value.value ?? S);
    }, I.SliderTimer), this.onGroupingThresholdSliderChange = C(() => {
      const e = this.groupingThresholdSliderElement.value?.value;
      e !== void 0 && !Number.isNaN(e) ? (this.groupingThresholdElement?.value && (this.groupingThresholdElement.value.value = e.toString()), this.groupingThresholdSliderElement.value && (this.groupingThresholdSliderElement.value.value = e), this.model.setGroupingThreshold(e)) : this.model.setGroupingThreshold(0);
    }, I.SliderTimer), this.sliceNameChange = (e) => {
      if (e.detail !== null || e.detail !== void 0) {
        const l = e.detail?.name, i = this.model.getSlices()?.findIndex((n) => n.sliceId === this.selectedSliceId), t = this.model.getSliceGrouping();
        i != null && i >= 0 ? this.model.setSliceName(l, i) : t?.sliceId === this.selectedSliceId && t !== void 0 && this.model.setSliceGrouping({
          ...t,
          label: l
        });
      }
    }, this.sliceColorChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { color: l } = e.detail, i = this.model.getSlices()?.findIndex((n) => n.sliceId === this.selectedSliceId), t = this.model.getSliceGrouping();
        i != null && i >= 0 ? (this.model.setColorMatch(!1), this.model.setSliceColor(l, i)) : t?.sliceId === this.selectedSliceId && t !== void 0 && (this.model.setColorMatch(!1), this.model.setSliceGrouping({
          ...t,
          fillSymbol: {
            ...t.fillSymbol,
            type: T.SFS,
            color: l
          }
        }));
      }
    }, this.slicesPopoverClose = () => {
      this.selectedSliceId = void 0, this.configSliceOpen = !1;
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.configSliceOpen = !1, this.popoverPlacement = "leading", this.arcgisChartsConfigPieChartSlicesPopoverChange = P(), this.arcgisChartsConfigPopoverOpenChange = P();
  }
  static {
    this.properties = { selectedSliceId: 16, messageOverrides: 0, model: 0, configSliceOpen: 5, popoverPlacement: 1, chartData: 0 };
  }
  static {
    this.styles = z;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("selectedSliceId") && this.selectedSliceIdChange();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeSlicesPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, l) {
    l?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  selectedSliceIdChange() {
    if (!E(this.selectedSliceId) && this.configSliceOpen) {
      if (this.setupSlicesPopover(), this.slicesPopover !== null) {
        const e = this.model.getSlices(), l = this.model.getSliceGrouping();
        if (this.selectedSliceId === l?.sliceId)
          this.slicesPopover.selectedName = l?.label, this.slicesPopover.selectedColor = l?.fillSymbol?.color;
        else if (e !== void 0) {
          const i = e.findIndex((t) => t.sliceId === this.selectedSliceId);
          this.slicesPopover.selectedName = this.model.getSliceName(i), this.slicesPopover.selectedColor = this.model.getSliceColor(i);
        }
        this.slicesPopover.open || (this.slicesPopover.open = !0);
      }
      this.addSlicesPopover();
    }
  }
  removeSlicesPopover() {
    this.slicesPopover !== void 0 && this.slicesPopover !== null && (this.slicesPopover.open = !1, this.slicesPopover.selectedName = void 0, this.slicesPopover.selectedColor = void 0, this.slicesPopover = N(this.slicesPopover)), this.slicesPopoverChange(!1);
  }
  buildSliceListItem() {
    let e = "#CCCCCC", l = "minus-square";
    const i = [];
    let t = this.model.getSlices();
    const n = this.chartData?.dataItems;
    n && (t = t?.filter((a) => n?.findIndex((c) => c.arcgis_charts_slice_id === a.sliceId) !== -1)), t?.forEach((a) => {
      if (a.fillSymbol?.color !== void 0) {
        l = "square-f";
        const [c, u, v, y] = [...a.fillSymbol.color];
        e = `rgba(${c},${u},${v},${y / 255})`;
      }
      if (a !== void 0 && !this.model.getGroupedSliceIds().includes(a.sliceId)) {
        let c = a.sliceId;
        c === $.emptySliceId ? c = this._messages.emptySlice ?? "" : c === $.nullSliceId && (c = this._messages.nullSlice ?? ""), i?.push(f(a.sliceId, h`<calcite-list-item .label=${a.label ?? a.sliceId} .description=${c} .value=${a.sliceId} .selected=${this.selectedSliceId === a.sliceId} @click=${this.openSlicesPopover}><calcite-icon slot=content-end .icon=${l} style=${b({ color: e })}></calcite-icon></calcite-list-item>`));
      }
    });
    const r = this.model.getSliceGrouping();
    if (r?.fillSymbol?.color !== void 0) {
      l = "square-f";
      const [a, c, u, v] = [...r.fillSymbol.color];
      e = `rgba(${a},${c},${u},${v / 255})`;
    }
    return this.model.getGroupedSliceIds().length > 0 && i?.push(f(r?.sliceId, h`<calcite-list-item .label=${r?.label ?? r?.sliceId ?? ""} .description=${this._messages.groupedSlices} .value=${r?.sliceId ?? ""} .selected=${this.selectedSliceId === r?.sliceId} @click=${this.openSlicesPopover}><calcite-icon slot=content-end .icon=${l} style=${b({ color: e })}></calcite-icon></calcite-list-item>`)), i;
  }
  buildGroupedSlicesListItem() {
    let e = "#CCCCCC", l = "minus-square";
    const i = [];
    return this.model.getSlices()?.forEach((t) => {
      if (t.fillSymbol?.color !== void 0) {
        l = "square-f";
        const [n, r, a, c] = [...t.fillSymbol.color];
        e = `rgba(${n},${r},${a},${c / 255})`;
      }
      t !== void 0 && this.model.getGroupedSliceIds().includes(t.sliceId) && i?.push(f(t.sliceId, h`<calcite-list-item .label=${t.label ?? t.sliceId} .description=${t.sliceId} .value=${t.sliceId} .selected=${this.selectedSliceId === t.sliceId} @click=${this.openSlicesPopover}><calcite-icon slot=content-end .icon=${l} style=${b({ color: e })}></calcite-icon></calcite-list-item>`));
    }), i;
  }
  buildSliceList() {
    return h`<calcite-list label class=${s(o.sliceList)} selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildSliceListItem()}</calcite-list>`;
  }
  buildGroupedSliceList() {
    return h`<calcite-list label class=${s(o.sliceList)} selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildGroupedSlicesListItem()}</calcite-list>`;
  }
  onGroupingThresholdChange(e) {
    const l = e.target.value;
    let i = Number.parseInt(l);
    i > 100 ? i = 100 : i < 0 && (i = 0), Number.isNaN(i) ? this.model.setGroupingThreshold(0) : (this.groupingThresholdElement?.value && (this.groupingThresholdElement.value.value = i.toString()), this.model.setGroupingThreshold(i), this.groupingThresholdSliderElement.value && (this.groupingThresholdSliderElement.value.value = i));
  }
  onLabelCharacterLimitChange(e) {
    const l = e.target.value;
    let i = Number.parseInt(l);
    i < 1 && (i = 1), Number.isNaN(i) ? this.model.setLabelCharacterLimit(null) : (this.labelCharacterLimitElement.value && (this.labelCharacterLimitElement.value.value = i.toString()), this.model.setLabelCharacterLimit(i));
  }
  onDecimalPlacesChange(e) {
    const l = e.target.value;
    let i = Number.parseInt(l);
    i < 0 ? i = 0 : i > 20 && (i = 20), Number.isNaN(i) ? this.model.setDecimalPlaces(0) : (this.decimalPlacesElement.value && (this.decimalPlacesElement.value.value = i.toString()), this.model.setDecimalPlaces(i));
  }
  onDisplayTypeChange(e) {
    const l = e.target.selectedItem;
    this.model.setDisplayType(l.value);
  }
  resetSlicesOriginal() {
    this.configSliceOpen = !1, this.selectedSliceId = void 0, this.model.setColorMatch(!0), this.model.resetSlices();
  }
  onCalciteListOrderChange(e) {
    if (e.detail !== null && e.detail !== void 0) {
      const { newIndex: l, oldIndex: i } = e.detail;
      this.model.moveSeries(i, l);
    }
  }
  slicesPopoverChange(e) {
    this.arcgisChartsConfigPieChartSlicesPopoverChange.emit({
      open: e,
      element: this.slicesPopover
    });
  }
  openSlicesPopover(e) {
    const l = e.target, i = l.localName === "calcite-list-item" ? l : l.parentNode, t = !this.configSliceOpen;
    this.configSliceOpen = this.selectedSliceId === i.value ? t : !0, this.configSliceOpen ? i.value === this.model.getSliceGrouping()?.sliceId ? this.selectedSliceId = this.model.getSliceGrouping()?.sliceId : this.selectedSliceId = i.value : this.selectedSliceId = void 0;
  }
  setupSlicesPopover() {
    if (this.slicesPopover === null && this.el !== void 0) {
      const e = {
        referenceElement: this.el,
        placement: this.popoverPlacement,
        sliceNameChange: this.sliceNameChange,
        sliceColorChange: this.sliceColorChange,
        openChange: this.openChange,
        popoverClose: this.slicesPopoverClose
      };
      this.slicesPopover = x(_.PieChartSlicesPopover, e);
    }
  }
  addSlicesPopover() {
    this.slicesPopover != null && !document.body.contains(this.slicesPopover) && document.body.appendChild(this.slicesPopover), this.slicesPopoverChange(!0);
  }
  createTooltip(e) {
    const l = e.target;
    this.tooltip = D(l), this.tooltip.innerHTML = this._messages.groupingInfo ?? "", document.body.appendChild(this.tooltip);
  }
  destroyTooltip() {
    O(this.tooltip);
  }
  render() {
    return h`<div class=${s(o.sectionLabel)}>${this._messages.settings}</div><calcite-label class=${s(o.label)}>${this._messages.shape}<calcite-slider min=0 max=100 step=1 snap .value=${this.model.getInnerRadiusSize() ?? S} @calciteSliderChange=${this.onDonutSizeSliderChange} ${g(this.donutSizeSliderElement)}></calcite-slider></calcite-label><div class=${s(o.pieDonutLabelsContainer)}><calcite-label class=${s(o.label)}>${this._messages.pie}</calcite-label><calcite-label class=${s(o.label)}>${this._messages.donut}</calcite-label></div><calcite-label class=${s(o.label)}><div class=${s(o.groupingLabelContainer)}><div>${this._messages.groupingPercent}</div><calcite-icon icon=information scale=s flip-rtl @mouseover=${this.createTooltip} @mouseout=${this.destroyTooltip}></calcite-icon></div><div class=${s(o.sliderInputContainer)}><calcite-slider min=0 max=50 step=1 snap .value=${G(p(this.model.getGroupingThreshold() ?? 0))} @calciteSliderChange=${this.onGroupingThresholdSliderChange} ${g(this.groupingThresholdSliderElement)}></calcite-slider><calcite-input class=${s(o.numberInput)} type=number min=0 max=100 step=1 suffix-text=% .value=${p(this.model.getGroupingThreshold() ?? 0)} @calciteInputInput=${this.onGroupingThresholdChange} @click=${(e) => {
      e.stopPropagation();
    }} ${g(this.groupingThresholdElement)}></calcite-input></div></calcite-label><div class=${s(o.sectionLabel)}>${this._messages.labels}</div><calcite-label class=${s(o.label)}>${this._messages.labelCharacterLimit}<calcite-input type=number min=1 step=1 .value=${p(this.model.getLabelCharacterLimit())} @calciteInputInput=${this.onLabelCharacterLimitChange} ${g(this.labelCharacterLimitElement)}></calcite-input></calcite-label><calcite-label class=${s(o.label)}>${this._messages.decimalPlaces}<calcite-input type=number min=0 max=20 step=1 .value=${p(this.model.getDecimalPlaces())} @calciteInputInput=${this.onDecimalPlacesChange} ${g(this.decimalPlacesElement)}></calcite-input></calcite-label><calcite-label class=${s(o.label)}>${this._messages.display}<calcite-radio-button-group class=${s(o.radioGroup)} name=display layout=vertical @calciteRadioButtonGroupChange=${this.onDisplayTypeChange}><calcite-label layout=inline><calcite-radio-button .value=${d.Value} .checked=${this.model.getDisplayType() === d.Value}></calcite-radio-button>${this._messages.value}</calcite-label><calcite-label layout=inline><calcite-radio-button .value=${d.Percentage} .checked=${this.model.getDisplayType() === d.Percentage}></calcite-radio-button>${this._messages.percentage}</calcite-label><calcite-label layout=inline><calcite-radio-button .value=${d.Both} .checked=${this.model.getDisplayType() === d.Both}></calcite-radio-button>${this._messages.both}</calcite-label></calcite-radio-button-group></calcite-label><div class=${s(o.sectionLabel)}>${this._messages.slices}<calcite-button @click=${this.resetSlicesOriginal} .disabled=${!this.model.resetAvailable()} appearance=transparent icon-end=reset>${this._messages.reset}</calcite-button></div>${this.buildSliceList()}<div class=${s(o.sectionLabel)}>${this._messages.groupedSlices}</div>${this.buildGroupedSliceList()}`;
  }
}
L("arcgis-charts-config-pie-chart-slices", V);
export {
  V as ArcgisChartsConfigPieChartSlices
};
