{
  "timestamp": "2025-09-05T23:24:47",
  "compiler": {
    "name": "@arcgis/lumina-compiler",
    "version": "4.33.19",
    "typescriptVersion": "5.8.3"
  },
  "components": [
    {
      "filePath": "src/components/chart/chart.tsx",
      "tag": "arcgis-chart",
      "overview": "",
      "readme": "",
      "usage": {},
      "docs": "The ArcGIS Chart component renders various chart types based on the provided model.\n\nSupported chart types include bar charts, line charts, pie charts, box plots, combo bar-line charts, gauges, scatterplots, histograms and radar charts.\n\nThe Chart component can be rendered using an [existing model](https://developers.arcgis.com/javascript/latest/charts-components-intro/#use-an-existing-model-from-a-webmap-or-feature-layer) from a web map or feature layer,\nor by [creating a new model](https://developers.arcgis.com/javascript/latest/charts-components-intro/#create-a-new-model).\n\nSee also:\n- [Introduction to Charts components](https://developers.arcgis.com/javascript/latest/charts-components-intro/)\n- [Tutorial: Display and create charts components](https://developers.arcgis.com/javascript/latest/tutorials/display-and-create-charts-components/)",
      "docsTags": [
        {
          "name": "superclass",
          "text": "{\"name\":\"LitElement\",\"package\":\"@arcgis/lumina\"}"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "actionMode",
          "type": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\" | \"none\" | \"zoom\"",
          "complexType": {
            "original": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\" | \"none\" | \"zoom\"",
            "resolved": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\" | \"none\" | \"zoom\"",
            "references": {}
          },
          "mutable": true,
          "attr": "action-mode",
          "reflectToAttr": true,
          "docs": "Not applicable to gauge.\nDefines the cursor behavior on the chart (zoom, selection...).",
          "docsTags": [
            {
              "name": "type",
              "text": "{ActionModes | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "value": "monoSelection",
              "type": "string"
            },
            {
              "value": "multiSelection",
              "type": "string"
            },
            {
              "value": "multiSelectionWithCtrlKey",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "zoom",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoDisposeChart",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "auto-dispose-chart",
          "reflectToAttr": true,
          "docs": "Auto-disposes the chart when a new one is created in the same container.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "chartLimits",
          "type": "ChartElementLimit",
          "complexType": {
            "original": "ChartElementLimit",
            "resolved": "ChartElementLimit",
            "references": {
              "ChartElementLimit": {
                "location": "local",
                "path": "dist/utils/defaults/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Used to customize the number maximum of bars allowed on the chart.\nThe chart's behavior once that limit is reached can be adjusted through the `behaviorAfterLimit` nested property, to either reject the creation\nor update of the chart, or render the elements up to the given limits.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{ChartElementLimit | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "chartWillRender",
          "type": "(((props: {\n    chartConfig: WebChart | WebGaugeChart;\n    data?: WebChartDataTypes | undefined;\n    slices?: Array<WebChartPieChartSlice> | undefined;\n}) => Promise<WebChart | WebGaugeChart>))",
          "complexType": {
            "original": "(((props: {\n    chartConfig: WebChart | WebGaugeChart;\n    data?: WebChartDataTypes | undefined;\n    slices?: Array<WebChartPieChartSlice> | undefined;\n}) => Promise<WebChart | WebGaugeChart>))",
            "resolved": "(((props: {\n    chartConfig: WebChart | WebGaugeChart;\n    data?: WebChartDataTypes | undefined;\n    slices?: Array<WebChartPieChartSlice> | undefined;\n}) => Promise<WebChart | WebGaugeChart>))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Lifecycle function executed after the data has been processed and before the chart renders.\nCan be used to alter the config from information extracted from the data for instance.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to gauge and pie chart only."
            },
            {
              "name": "type",
              "text": "{PreRenderCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "componentVersion",
          "type": "\"beta\" | \"stable\"",
          "complexType": {
            "original": "\"beta\" | \"stable\"",
            "resolved": "\"beta\" | \"stable\"",
            "references": {}
          },
          "mutable": true,
          "attr": "component-version",
          "reflectToAttr": false,
          "docs": "Whether to use the stable version of the component or the beta version.",
          "docsTags": [
            {
              "name": "type",
              "text": "{WebChartComponentVersion}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"stable\"",
          "values": [
            {
              "value": "beta",
              "type": "string"
            },
            {
              "value": "stable",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cursorRange",
          "type": "\"multi-axes\" | \"x-axis\" | \"y-axis\"",
          "complexType": {
            "original": "\"multi-axes\" | \"x-axis\" | \"y-axis\"",
            "resolved": "\"multi-axes\" | \"x-axis\" | \"y-axis\"",
            "references": {}
          },
          "mutable": true,
          "attr": "cursor-range",
          "reflectToAttr": true,
          "docs": "Sets the cursor range:\n- CursorRange.MultiAxes: allows to draw a free rectangle\n- CursorRange.XAxis: allows to draw a rectangle bound to the x-axis\n- CursorRange.YAxis: allows to draw a rectangle bound to the y-axis\n- undefined: defaults to a preset behavior according to the chart type and action mode",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge.\nApplies only when the action mode is set to zoom or multi-selection."
            },
            {
              "name": "type",
              "text": "{CursorRange | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "value": "multi-axes",
              "type": "string"
            },
            {
              "value": "x-axis",
              "type": "string"
            },
            {
              "value": "y-axis",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "dataLabelFormatter",
          "type": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((statValue: number, percent?: number | undefined) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
          "complexType": {
            "original": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((statValue: number, percent?: number | undefined) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
            "resolved": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((statValue: number, percent?: number | undefined) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the data labels. If the returned string contains HTML tags they will be interpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{BarAndLineDataLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string))"
            },
            {
              "type": "(((count: number, binMinValue: number, binMaxValue: number) => string))"
            },
            {
              "type": "(((statValue: number, percent?: number | undefined) => string))"
            },
            {
              "type": "(((x: number, y: number, sizePolicyValue?: number | undefined) => string))"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableInteractions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disable-interactions",
          "reflectToAttr": true,
          "docs": "Disables all interactions on the chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableTogglingLegendItems",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disable-toggling-legend-items",
          "reflectToAttr": true,
          "docs": "Disables the toggling of series via the legend items.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Only applicable to multi-series charts."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "enableConfiguration",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "enable-configuration",
          "reflectToAttr": true,
          "docs": "Whether to use features uniquely designed for a chart currently being configured by a user via the UI.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "enableResponsiveFeatures",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "enable-responsive-features",
          "reflectToAttr": true,
          "docs": "Enables the responsive features.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "errorPolicy",
          "type": "\"ignore\" | \"throw\"",
          "complexType": {
            "original": "\"ignore\" | \"throw\"",
            "resolved": "\"ignore\" | \"throw\"",
            "references": {}
          },
          "mutable": true,
          "attr": "error-policy",
          "reflectToAttr": true,
          "docs": "Whether to display an error alert and hide the chart when it can't be created or updated.",
          "docsTags": [
            {
              "name": "type",
              "text": "{ErrorPolicy}"
            }
          ],
          "default": "\"throw\"",
          "values": [
            {
              "value": "ignore",
              "type": "string"
            },
            {
              "value": "throw",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "featureIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "feature-index",
          "reflectToAttr": true,
          "docs": "The index of the feature to be rendered.\nOnly used when the gauge is a feature-based gauge.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to gauge only."
            },
            {
              "name": "type",
              "text": "{number | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterByExtent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-extent",
          "reflectToAttr": true,
          "docs": "When `true`, all chart elements are filtered based on view extent.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterBySelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-selection",
          "reflectToAttr": true,
          "docs": "When `true`, all chart elements are filtered based on selection.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "gaugeInnerLabelFormatter",
          "type": "(((value?: number | undefined) => string))",
          "complexType": {
            "original": "(((value?: number | undefined) => string))",
            "resolved": "(((value?: number | undefined) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the gauge inner label. If the returned string contains HTML tags they will be\ninterpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to gauge only."
            },
            {
              "name": "type",
              "text": "{GaugeInnerLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "guideTooltipFormatter",
          "type": "(((props: GuideTooltipFormatCallbackProps) => string))",
          "complexType": {
            "original": "(((props: GuideTooltipFormatCallbackProps) => string))",
            "resolved": "(((props: GuideTooltipFormatCallbackProps) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the axes guides tooltip. If the returned string contains HTML tags they will be interpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to pie chart."
            },
            {
              "name": "type",
              "text": "{GuideTooltipFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "hideEmptySeries",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hide-empty-series",
          "reflectToAttr": true,
          "docs": "When `true`, the empty series are completely hidden from the chart and the legend.\nFor example a series can be empty after applying a data filter, filter by attribute or geometry (as when using the filter by extent).",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideLicenseWatermark",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hide-license-watermark",
          "reflectToAttr": true,
          "docs": "Hides the license watermark.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hideLoaderAnimation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hide-loader-animation",
          "reflectToAttr": true,
          "docs": "Hides the loader animation (curtain and spinner), showed by default at every update.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ignoreSmoothRenderingLimit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "ignore-smooth-rendering-limit",
          "reflectToAttr": true,
          "docs": "When `true`, disables the default setting that uses debounce functions to handle the visibility of markers\nthat are outside of the plotting area when the min/max bound changes and/or when a zoom action is performed\n(via chart cursor or scrollbar), to increase performance.\nThis property will be set when the chart is created and cannot be updated after that.\nIt's recommended that this property should only be set to true for small datasets.\nWhen left `undefined`, will be treated as `false`.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to line chart only."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ignoreViewExtent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "ignore-view-extent",
          "reflectToAttr": true,
          "docs": "This property will be effective when the component's `view` is provided or when the `layer` is set to a FeatureLayerView.\nBy default the queries made by the chart will consider the view's extent as the unique geometry filter applicable. This implies ignoring any\ngeometry passed through the config (component.config.dataFilters) or the runtime filters (component.runtimeDataFilters).\nSetting this property to `false` signals the queries to ignore the view's extent, whether an additional geometry filter is provided or not.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layer",
          "type": "FeatureLayer | FeatureLayerView | SubtypeSublayer",
          "complexType": {
            "original": "FeatureLayer | FeatureLayerView | SubtypeSublayer",
            "resolved": "FeatureLayer | FeatureLayerView | SubtypeSublayer",
            "references": {
              "FeatureLayer": {
                "location": "import",
                "path": "@arcgis/core/interfaces.d.ts",
                "id": "notImplemented"
              },
              "FeatureLayerView": {
                "location": "import",
                "path": "@arcgis/core/interfaces.d.ts",
                "id": "notImplemented"
              },
              "SubtypeSublayer": {
                "location": "import",
                "path": "@arcgis/core/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Used to perform queries.\nIf the layer is a FeatureLayerView or if the layer and the `view` property are both provided, the queries will be executed client-side.",
          "docsTags": [
            {
              "name": "type",
              "text": "{SupportedLayer | FeatureLayerView | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "FeatureLayer"
            },
            {
              "type": "FeatureLayerView"
            },
            {
              "type": "SubtypeSublayer"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layerFieldsChangePolicy",
          "type": "\"ignore\" | \"refresh\"",
          "complexType": {
            "original": "\"ignore\" | \"refresh\"",
            "resolved": "\"ignore\" | \"refresh\"",
            "references": {}
          },
          "mutable": true,
          "attr": "layer-fields-change-policy",
          "reflectToAttr": true,
          "docs": "Allows the chart to update automatically when the layer's fields change.\nApplies when the field list (`fields`) in the feature layer is updated.",
          "docsTags": [
            {
              "name": "type",
              "text": "{LayerFieldsChangePolicy}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"refresh\"",
          "values": [
            {
              "value": "ignore",
              "type": "string"
            },
            {
              "value": "refresh",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layerFilterChangePolicy",
          "type": "\"ignore\" | \"refresh\"",
          "complexType": {
            "original": "\"ignore\" | \"refresh\"",
            "resolved": "\"ignore\" | \"refresh\"",
            "references": {}
          },
          "mutable": true,
          "attr": "layer-filter-change-policy",
          "reflectToAttr": true,
          "docs": "Whether the chart should be refreshed when the layer's filter (`definitionExpression`) changes.",
          "docsTags": [
            {
              "name": "type",
              "text": "{LayerFilterChangePolicy}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"refresh\"",
          "values": [
            {
              "value": "ignore",
              "type": "string"
            },
            {
              "value": "refresh",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "layerRendererChangePolicy",
          "type": "\"ignore\" | \"refresh\"",
          "complexType": {
            "original": "\"ignore\" | \"refresh\"",
            "resolved": "\"ignore\" | \"refresh\"",
            "references": {}
          },
          "mutable": true,
          "attr": "layer-renderer-change-policy",
          "reflectToAttr": true,
          "docs": "Allows the chart to update automatically when the layer's renderer changes.\nApplies when the color match feature is enabled.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Even though that property is set to Ignore the chart will use the layer's renderer information when the data is updated."
            },
            {
              "name": "type",
              "text": "{LayerRendererChangePolicy}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"refresh\"",
          "values": [
            {
              "value": "ignore",
              "type": "string"
            },
            {
              "value": "refresh",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "legendPosition",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-position",
          "reflectToAttr": true,
          "docs": "Used to set the legend's position on the chart.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{WebChartLegendPositions | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "legendValueLabelFormatter",
          "type": "(((value?: number | undefined, percent?: number | undefined) => string))",
          "complexType": {
            "original": "(((value?: number | undefined, percent?: number | undefined) => string))",
            "resolved": "(((value?: number | undefined, percent?: number | undefined) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the legend value labels. If the returned string contains HTML tags they will be\ninterpreted as such.\nIf provided, the formatter will be used if at least `WebChartPieChartLegend.displayNumericValue` or `WebChartPieChartLegend.displayPercentage` is true.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to pie chart only."
            },
            {
              "name": "type",
              "text": "{PieChartLegendValueLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "legendVisibility",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-visibility",
          "reflectToAttr": true,
          "docs": "When `true`, the legend is visible on the chart.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loaderColors",
          "type": "LoaderColors",
          "complexType": {
            "original": "LoaderColors",
            "resolved": "LoaderColors",
            "references": {
              "LoaderColors": {
                "location": "local",
                "path": "dist/utils/misc/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Defines the colors for the loader animation.",
          "docsTags": [
            {
              "name": "type",
              "text": "{ LoaderColors  | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "messageOptions",
          "type": "MessageOptions",
          "complexType": {
            "original": "MessageOptions",
            "resolved": "MessageOptions",
            "references": {
              "MessageOptions": {
                "location": "local",
                "path": "dist/chart-rendering/common/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Used to set the options available to handle specific messages displayed by the chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{MessageOptions | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "model",
          "type": "ChartModel | WebChart",
          "complexType": {
            "original": "ChartModel | WebChart",
            "resolved": "ChartModel | WebChart",
            "references": {
              "ChartModel": {
                "location": "local",
                "path": "dist/model/chart-model/chart-model.d.ts",
                "id": "notImplemented"
              },
              "WebChart": {
                "location": "import",
                "path": "@arcgis/charts-spec/types/web-chart.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Instance of an ArcGIS Chart Model. Provides an API to interact with the chart's configuration.\n\n**Note:** This property has a union type of `ChartModel | WebChart` meaning a raw chart config object can be passed to it instead, however it is recommended to use a `ChartModel` instance whenever possible.",
          "docsTags": [
            {
              "name": "type",
              "text": "{ChartModel | WebChart | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "ChartModel"
            },
            {
              "type": "WebChart"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "placeholder",
          "reflectToAttr": true,
          "docs": "A placeholder string to provides a brief hint to the user indicating needed information for creating a chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{string | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "queueChartCreation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "queue-chart-creation",
          "reflectToAttr": true,
          "docs": "Builds the charts one by one rather than all at the same time.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "replaceNoValueCategoryWithZero",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "replace-no-value-category-with-zero",
          "reflectToAttr": true,
          "docs": "When `true`, the chart's dataItems associated with empty (no value) categories (from only a `Count` aggregation)\nwill be populated with 0s, via the `completeDataForEmptyCategoriesWithZeros` method.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "returnFeaturesExtent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "return-features-extent",
          "reflectToAttr": true,
          "docs": "When `true`, the features extent will be returned through the `arcgisDataProcessComplete` and `arcgisSelectionComplete` events payload.\nApplies only to:\n- charts using an aggregation\n- data source using a feature layer compatible with envelope aggregation\nThe extent (IExtent) is returned through a property called `arcgis_charts_features_extent`.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "returnSelectionIndexes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "return-selection-indexes",
          "reflectToAttr": true,
          "docs": "When `true`, the selection indexes will be computed whenever a selection is made on or passed to the chart.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "returnSelectionOIDs",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "return-selection-oi-ds",
          "reflectToAttr": true,
          "docs": "When `true`, the object ids will be computed whenever a selection is made on or passed to the chart.\nOnly considered for a data source using a feature layer.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rotation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "rotation",
          "reflectToAttr": true,
          "docs": "Applicable to bar chart, line chart, combo bar-line and box plot.\nWhen `true`, the chart is rotated 90 degrees so that the x-axis becomes vertical and the y-axis becomes horizontal.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "runtimeDataFilters",
          "type": "{\n    distance?: number | undefined;\n    gdbVersion?: string | undefined;\n    geometry?: IExtent | IEnvelope | IPoint | IPolygon | IPolygonWithCurves | IPolyline | undefined;\n    objectIds?: Array<number> | undefined;\n    spatialRelationship?: \"intersects\" | \"contains\" | \"crosses\" | \"disjoint\" | \"envelope-intersects\" | \"index-intersects\" | \"overlaps\" | \"touches\" | \"within\" | \"relation\" | undefined;\n    timeExtent?: [number, number] | undefined;\n    units?: RESTUnits | undefined;\n    where?: string | undefined;\n}",
          "complexType": {
            "original": "{\n    distance?: number | undefined;\n    gdbVersion?: string | undefined;\n    geometry?: IExtent | IEnvelope | IPoint | IPolygon | IPolygonWithCurves | IPolyline | undefined;\n    objectIds?: Array<number> | undefined;\n    spatialRelationship?: \"intersects\" | \"contains\" | \"crosses\" | \"disjoint\" | \"envelope-intersects\" | \"index-intersects\" | \"overlaps\" | \"touches\" | \"within\" | \"relation\" | undefined;\n    timeExtent?: [number, number] | undefined;\n    units?: RESTUnits | undefined;\n    where?: string | undefined;\n}",
            "resolved": "{\n    distance?: number | undefined;\n    gdbVersion?: string | undefined;\n    geometry?: IExtent | IEnvelope | IPoint | IPolygon | IPolygonWithCurves | IPolyline | undefined;\n    objectIds?: Array<number> | undefined;\n    spatialRelationship?: \"intersects\" | \"contains\" | \"crosses\" | \"disjoint\" | \"envelope-intersects\" | \"index-intersects\" | \"overlaps\" | \"touches\" | \"within\" | \"relation\" | undefined;\n    timeExtent?: [number, number] | undefined;\n    units?: RESTUnits | undefined;\n    where?: string | undefined;\n}",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Applies runtime data filters to the chart's.",
          "docsTags": [
            {
              "name": "type",
              "text": "{WebChartDataFilters | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "secondaryYAxisLabelFormatter",
          "type": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
          "complexType": {
            "original": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "resolved": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the secondary y-axis labels. If the returned string contains HTML tags they will be interpreted as such.\nThe property will be effective only if 3 axes are defined (dual axis chart).",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to pie chart nor gauge."
            },
            {
              "name": "type",
              "text": "{AxisLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "selectionData",
          "type": "SelectionData",
          "complexType": {
            "original": "SelectionData",
            "resolved": "SelectionData",
            "references": {
              "SelectionData": {
                "location": "local",
                "path": "dist/utils/misc/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "When this property is set, it will apply a selection on the chart matching the provided selection.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{SelectionData | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "selectionTheme",
          "type": "SelectionTheme",
          "complexType": {
            "original": "SelectionTheme",
            "resolved": "SelectionTheme",
            "references": {
              "SelectionTheme": {
                "location": "local",
                "path": "dist/utils/misc/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Used to provide a customized theme for the selected and non selected elements.\nIf no style is provided for the selected elements, a default selection is applied.\nIf no style is provided for the non selected elements, the chart's style is applied.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{SelectionTheme | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "setTimeBinningInfoWhenNotProvided",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "set-time-binning-info-when-not-provided",
          "reflectToAttr": true,
          "docs": "When `true`, the series properties `unit` and `size` become optional and will be automatically set to values that fit the data set. Used when creating or updating a chart compatible with time binning.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Only applicable to charts using the temporal binning feature (bar and line chart)."
            },
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "syncSelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "sync-selection",
          "reflectToAttr": true,
          "docs": "Whether to synchronize the selection between chart components from the same layer.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "syncSelectionsBetweenChartAndLayerViewPolicy",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "sync-selections-between-chart-and-layer-view-policy",
          "reflectToAttr": true,
          "docs": "Determines whether the selections from the chart should be synchronized with the layer view and vice versa.",
          "docsTags": [
            {
              "name": "type",
              "text": "{SyncSelectionsBetweenChartAndLayerViewPolicy}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"disabled",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "timeZone",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "time-zone",
          "reflectToAttr": true,
          "docs": "Used to set a custom time zone for the chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{MapView[\"timeZone\"] | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipFormatter",
          "type": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((props: BarAndLineTooltipFormatCallbackProps) => string)) | (((props: BoxPlotTooltipFormatCallbackProps) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
          "complexType": {
            "original": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((props: BarAndLineTooltipFormatCallbackProps) => string)) | (((props: BoxPlotTooltipFormatCallbackProps) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
            "resolved": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string)) | (((count: number, binMinValue: number, binMaxValue: number) => string)) | (((props: BarAndLineTooltipFormatCallbackProps) => string)) | (((props: BoxPlotTooltipFormatCallbackProps) => string)) | (((x: number, y: number, sizePolicyValue?: number | undefined) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the tooltips. If the returned string contains HTML tags they will be interpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "type",
              "text": "{BarAndLineTooltipFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "(((category: string, value?: number | undefined, percent?: number | undefined, originalCategory?: WebChartDataItemValue) => string))"
            },
            {
              "type": "(((count: number, binMinValue: number, binMaxValue: number) => string))"
            },
            {
              "type": "(((props: BarAndLineTooltipFormatCallbackProps) => string))"
            },
            {
              "type": "(((props: BoxPlotTooltipFormatCallbackProps) => string))"
            },
            {
              "type": "(((x: number, y: number, sizePolicyValue?: number | undefined) => string))"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "updateSplitBySeries",
          "type": "MissingSplitBySeriesProps",
          "complexType": {
            "original": "MissingSplitBySeriesProps",
            "resolved": "MissingSplitBySeriesProps",
            "references": {
              "MissingSplitBySeriesProps": {
                "location": "local",
                "path": "dist/utils/components/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Whether to update the series when the data updates while the chart uses a split-by field configuration.\nIf `addMissingSeries` is set to `true` the missing series will be added to cover the split-by values not referenced\nby the config.\nThe default information from the property `updateSplitBySeries.seriesTemplate` will be applied to the new series.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Only applicable to bar chart, line chart and box plot, when they use a split-by field."
            },
            {
              "name": "type",
              "text": "{MissingSplitBySeriesProps | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "useAnimatedCharts",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "use-animated-charts",
          "reflectToAttr": true,
          "docs": "Enables the animations on the chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "usePopupTemplateFieldsInfo",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "use-popup-template-fields-info",
          "reflectToAttr": true,
          "docs": "Allows the use of the fields alias from the layer.popupTemplate when rendering the field names on the chart (e.g. tooltips, axes, legend).",
          "docsTags": [
            {
              "name": "type",
              "text": "{boolean | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "view",
          "type": "MapView | SceneView",
          "complexType": {
            "original": "MapView | SceneView",
            "resolved": "MapView | SceneView",
            "references": {
              "MapView": {
                "location": "import",
                "path": "@arcgis/core/interfaces.d.ts",
                "id": "notImplemented"
              },
              "SceneView": {
                "location": "import",
                "path": "@arcgis/core/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Used to access the LayerView instance in order to perform client-side queries.",
          "docsTags": [
            {
              "name": "type",
              "text": "{MapView | SceneView | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "MapView"
            },
            {
              "type": "SceneView"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "viewTimeExtentChangePolicy",
          "type": "\"ignore\" | \"refresh\"",
          "complexType": {
            "original": "\"ignore\" | \"refresh\"",
            "resolved": "\"ignore\" | \"refresh\"",
            "references": {}
          },
          "mutable": true,
          "attr": "view-time-extent-change-policy",
          "reflectToAttr": true,
          "docs": "Whether the chart should be refreshed when the view's time extent changes.\nThis is not currently supported on histogram. Setting the property to \"refresh\" won't have any effect on that chart.",
          "docsTags": [
            {
              "name": "type",
              "text": "{ViewTimeExtentChangePolicy}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "\"ignore\"",
          "values": [
            {
              "value": "ignore",
              "type": "string"
            },
            {
              "value": "refresh",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "xAxisLabelFormatter",
          "type": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
          "complexType": {
            "original": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "resolved": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Indicates whether to show the ArcGIS charts notify panel. False by default\nA callback function used to format the x-axis labels. If the returned string contains HTML tags they will be interpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to pie chart."
            },
            {
              "name": "type",
              "text": "{AxisLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "yAxisLabelFormatter",
          "type": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
          "complexType": {
            "original": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "resolved": "(((value: string | number | Date | null, originalValue?: WebChartDataItemValue) => string))",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "A callback function used to format the y-axis labels. If the returned string contains HTML tags they will be interpreted as such.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to pie chart nor gauge."
            },
            {
              "name": "type",
              "text": "{AxisLabelFormatCallback | undefined}"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clearSelection",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(): Promise<void>",
            "parameters": [],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "clearSelection(): Promise<void>",
          "parameters": [],
          "docs": "Clears all selection on the chart.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        },
        {
          "name": "componentOnReady",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(): Promise<void>",
            "parameters": [],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "componentOnReady(): Promise<void>",
          "parameters": [],
          "docs": "Create a promise that resolves once component is fully loaded.",
          "docsTags": [
            {
              "name": "example",
              "text": "```js\nconst arcgisChart = document.querySelector(\"arcgis-chart\");\ndocument.body.append(arcgisChart);\nawait arcgisChart.componentOnReady();\nconsole.log(\"arcgis-chart is ready to go!\");\n```"
            },
            {
              "name": "inheritedFrom",
              "text": "{\"name\":\"LitElement\",\"package\":\"@arcgis/lumina\"}"
            }
          ]
        },
        {
          "name": "errorAlert",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(errorMessage?: string): Promise<void>",
            "parameters": [
              {
                "name": "errorMessage",
                "type": "string | undefined",
                "docs": ""
              }
            ],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "errorAlert(errorMessage?: string): Promise<void>",
          "parameters": [
            {
              "name": "errorMessage",
              "type": "string | undefined",
              "docs": ""
            }
          ],
          "docs": "Triggers an alert to display an error message.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "param",
              "text": "errorMessage"
            }
          ]
        },
        {
          "name": "exportAsCSV",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options?: CSVOptions): Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "CSVOptions | undefined",
                "docs": ""
              }
            ],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              },
              "CSVOptions": {
                "location": "local",
                "path": "dist/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "exportAsCSV(options?: CSVOptions): Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "CSVOptions | undefined",
              "docs": ""
            }
          ],
          "docs": "Export the current chart's data as a CSV file.",
          "docsTags": [
            {
              "name": "param",
              "text": "options The options to use when exporting the data.\n\nNOTE: This method won't work for scatter plot series. The support charts for this method are:\n- Bar chart\n- Line chart\n- Combo bar-line chart\n- Box plot\n- Histogram\n- Pie chart\n\nThe `Options` object can contain the following properties:\n- `columns` - An array of column to include in the CSV file.\n- `delimiter` - The delimiter to use in the CSV file. Default is `,`.\n- `includeHeader` - Whether to include the header row in the CSV file. Default is `true`.\n- `quoteAll` - Whether to quote all values in the CSV file. Default is `false`."
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        },
        {
          "name": "exportAsImage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(format?: DownloadableChartImagesTypes): Promise<void>",
            "parameters": [
              {
                "name": "format",
                "type": "\"jpeg\" | \"png\" | \"svg\"",
                "docs": ""
              }
            ],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "exportAsImage(format?: DownloadableChartImagesTypes): Promise<void>",
          "parameters": [
            {
              "name": "format",
              "type": "\"jpeg\" | \"png\" | \"svg\"",
              "docs": ""
            }
          ],
          "docs": "Export the current chart as an image.",
          "docsTags": [
            {
              "name": "param",
              "text": "format The format of the image to download."
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        },
        {
          "name": "notify",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(message?: string, heading?: string, options?: NotifyOptions): Promise<void>",
            "parameters": [
              {
                "name": "message",
                "type": "string | undefined",
                "docs": ""
              },
              {
                "name": "heading",
                "type": "string | undefined",
                "docs": ""
              },
              {
                "name": "options",
                "type": "NotifyOptions | undefined",
                "docs": ""
              }
            ],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              },
              "NotifyOptions": {
                "location": "local",
                "path": "dist/chart-rendering/common/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "notify(message?: string, heading?: string, options?: NotifyOptions): Promise<void>",
          "parameters": [
            {
              "name": "message",
              "type": "string | undefined",
              "docs": ""
            },
            {
              "name": "heading",
              "type": "string | undefined",
              "docs": ""
            },
            {
              "name": "options",
              "type": "NotifyOptions | undefined",
              "docs": ""
            }
          ],
          "docs": "Notify method allows passing external messages to the chart component.\nIt can be used to pass validation or information messages.\nIn a situation where a config update is overriding your notification modal,\nconsider waiting for the `arcgisUpdateComplete` event.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "param",
              "text": "message The message to display in the notification panel."
            },
            {
              "name": "param",
              "text": "heading The heading to display in the notification panel."
            },
            {
              "name": "param",
              "text": "options The options to apply to the notification panel."
            }
          ]
        },
        {
          "name": "refresh",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }): Promise<void>",
            "parameters": [
              {
                "name": "props",
                "type": "undefined | {\n    updateData?: boolean | undefined;\n    resetAxesBounds?: boolean | undefined;\n    updateExtent?: boolean | undefined;\n}",
                "docs": ""
              }
            ],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "refresh(props?: { updateData?: boolean; resetAxesBounds?: boolean; updateExtent?: boolean; }): Promise<void>",
          "parameters": [
            {
              "name": "props",
              "type": "undefined | {\n    updateData?: boolean | undefined;\n    resetAxesBounds?: boolean | undefined;\n    updateExtent?: boolean | undefined;\n}",
              "docs": ""
            }
          ],
          "docs": "Re-render the chart.",
          "docsTags": [
            {
              "name": "param",
              "text": "props.updateData Indicates whether to fetch new data. Default: true."
            },
            {
              "name": "param",
              "text": "props.updateExtent Indicates whether the view's extent is to update. Default: false."
            },
            {
              "name": "param",
              "text": "props.resetAxesBounds Option to reset the axes bounds along with the refresh. Default: false;"
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        },
        {
          "name": "resetZoom",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(): Promise<void>",
            "parameters": [],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "resetZoom(): Promise<void>",
          "parameters": [],
          "docs": "Resets the chart zoom to bring it back to full extent",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Applicable to XY charts only."
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        },
        {
          "name": "switchSelection",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(): Promise<void>",
            "parameters": [],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "switchSelection(): Promise<void>",
          "parameters": [],
          "docs": "Switches the selection on the chart.",
          "docsTags": [
            {
              "name": "remarks",
              "text": "Not applicable to gauge."
            },
            {
              "name": "category",
              "text": "Public"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "arcgisAxesMinMaxChange",
          "detail": "{\n    bounds: Array<CalculatedMinMaxBoundsPayload>;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    bounds: Array<CalculatedMinMaxBoundsPayload>;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    bounds: Array<CalculatedMinMaxBoundsPayload>;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once the chart axes min/max values are computed",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<AxesMinMaxChangePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisBadDataWarningRaise",
          "detail": "DataWarningObject",
          "bubbles": true,
          "complexType": {
            "original": "DataWarningObject",
            "resolved": "DataWarningObject",
            "references": {
              "DataWarningObject": {
                "location": "local",
                "path": "dist/utils/chart-config/validator/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when an error is detected with the data set",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<DataWarningObject>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisConfigChange",
          "detail": "{\n    newConfig: WebChart | undefined;\n    oldConfig: WebChart | undefined;\n    functionCalled: string | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    newConfig: WebChart | undefined;\n    oldConfig: WebChart | undefined;\n    functionCalled: string | undefined;\n}",
            "resolved": "{\n    newConfig: WebChart | undefined;\n    oldConfig: WebChart | undefined;\n    functionCalled: string | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when the chart config is changed",
          "docsTags": [
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisDataFetchComplete",
          "detail": "WebChartBoxPlotDataItem | WebChartGenericDataItem | WebChartHistogramDataItem | WebChartScatterplotDataItem",
          "bubbles": true,
          "complexType": {
            "original": "WebChartBoxPlotDataItem | WebChartGenericDataItem | WebChartHistogramDataItem | WebChartScatterplotDataItem",
            "resolved": "WebChartBoxPlotDataItem | WebChartGenericDataItem | WebChartHistogramDataItem | WebChartScatterplotDataItem",
            "references": {
              "WebChartBoxPlotDataItem": {
                "location": "import",
                "path": "@arcgis/charts-spec/types/data-source.d.ts",
                "id": "notImplemented"
              },
              "WebChartGenericDataItem": {
                "location": "import",
                "path": "@arcgis/charts-spec/types/data-source.d.ts",
                "id": "notImplemented"
              },
              "WebChartHistogramDataItem": {
                "location": "import",
                "path": "@arcgis/charts-spec/types/data-source.d.ts",
                "id": "notImplemented"
              },
              "WebChartScatterplotDataItem": {
                "location": "import",
                "path": "@arcgis/charts-spec/types/data-source.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once the chart data has been fetched but not yet fully processed.\nFor instance it can be useful for a pie chart to see all the slices before they get grouped into an 'other' slice during the post-processing step.",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<WebChartDataTypes>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisDataProcessComplete",
          "detail": "{\n    chartData: WebChartDataTypes;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    chartData: WebChartDataTypes;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    chartData: WebChartDataTypes;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once the chart data has been processed",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<DataProcessCompletePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisDataProcessError",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when an error occurred while fetching of processing the data for the chart",
          "docsTags": [
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisLegendItemVisibilityChange",
          "detail": "{\n    legendItemVisibility: LegendItemVisibility;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    legendItemVisibility: LegendItemVisibility;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    legendItemVisibility: LegendItemVisibility;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once a legend item visibility has been changed",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<LegendItemVisibilityChangePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisNoRenderPropChange",
          "detail": "{\n    propName: string;\n    value: boolean | WebChartLegendPositions;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    propName: string;\n    value: boolean | WebChartLegendPositions;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    propName: string;\n    value: boolean | WebChartLegendPositions;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when a no-render prop is changed",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<NoRenderPropChangePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisRuntimeError",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when an error occurred that prevents the chart from being created or updated",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisSelectionComplete",
          "detail": "{\n    selectionData: SelectionData;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    selectionData: SelectionData;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    selectionData: SelectionData;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when a selection is applied to the chart",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<SelectionCompletePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisSeriesColorChange",
          "detail": "{\n    data: PieSlicesSymbols | SeriesSymbolsMap;\n    colorMatchApplied: boolean;\n    model: ChartModel | undefined;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    data: PieSlicesSymbols | SeriesSymbolsMap;\n    colorMatchApplied: boolean;\n    model: ChartModel | undefined;\n}",
            "resolved": "{\n    data: PieSlicesSymbols | SeriesSymbolsMap;\n    colorMatchApplied: boolean;\n    model: ChartModel | undefined;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once the chart series color have been assigned",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<SeriesColorChangePayload>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisSeriesOrder",
          "detail": "Array<string>",
          "bubbles": true,
          "complexType": {
            "original": "Array<string>",
            "resolved": "Array<string>",
            "references": {
              "Array": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event carrying the series id as they have been sorted following the `orderOptions` instructions",
          "docsTags": [
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisUpdateComplete",
          "detail": "ValidationStatus",
          "bubbles": true,
          "complexType": {
            "original": "ValidationStatus",
            "resolved": "ValidationStatus",
            "references": {
              "ValidationStatus": {
                "location": "local",
                "path": "dist/utils/chart-config/validator/interfaces.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once the chart is updated",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<ValidationStatus>}"
            },
            {
              "name": "event"
            }
          ]
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "action-bar",
          "docs": "Slot for adding a `charts-action-bar` component or `calcite-action-bar`."
        }
      ],
      "parts": [],
      "listeners": []
    },
    {
      "filePath": "src/components/charts-action-bar/charts-action-bar.tsx",
      "tag": "arcgis-charts-action-bar",
      "overview": "",
      "readme": "",
      "usage": {},
      "docs": "The ArcGIS charts action bar component enhances chart functionality by offering context-specific actions such as rotation, zooming, and filtering.\nIt also supports general actions like exporting the chart as an image or CSV.\nThis component is designed to be used with a chart component and is not intended for standalone use.\n\nSee also:\n- [Tutorial: Charts components with Map components using charts action bar](https://developers.arcgis.com/javascript/latest/tutorials/charts-components-with-map-components/)",
      "docsTags": [
        {
          "name": "superclass",
          "text": "{\"name\":\"LitElement\",\"package\":\"@arcgis/lumina\"}"
        }
      ],
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "actionBarSelectionMode",
          "type": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\"",
          "complexType": {
            "original": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\"",
            "resolved": "\"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\"",
            "references": {}
          },
          "mutable": true,
          "attr": "action-bar-selection-mode",
          "reflectToAttr": true,
          "docs": "Action bar selection mode. Defines which selection mode the slotted action bar should use.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{Extract<ActionModes, \"monoSelection\" | \"multiSelection\" | \"multiSelectionWithCtrlKey\">}"
            }
          ],
          "default": "\"multiSelectionWithCtrlKey\"",
          "values": [
            {
              "value": "monoSelection",
              "type": "string"
            },
            {
              "value": "multiSelection",
              "type": "string"
            },
            {
              "value": "multiSelectionWithCtrlKey",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "chartElement",
          "type": "HTMLArcgisChartElement",
          "complexType": {
            "original": "HTMLArcgisChartElement",
            "resolved": "HTMLArcgisChartElement",
            "references": {
              "HTMLArcgisChartElement": {
                "location": "local",
                "path": "index.js",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Chart element reference with which the action bar is associated.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{HTMLArcgisChartElement}"
            }
          ],
          "default": "undefined",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "chartType",
          "type": "\"barSeries\" | \"boxPlotSeries\" | \"comboLineAndBarSeries\" | \"gaugeSeries\" | \"histogramSeries\" | \"lineSeries\" | \"pieSeries\" | \"radarSeries\" | \"scatterSeries\"",
          "complexType": {
            "original": "\"barSeries\" | \"boxPlotSeries\" | \"comboLineAndBarSeries\" | \"gaugeSeries\" | \"histogramSeries\" | \"lineSeries\" | \"pieSeries\" | \"radarSeries\" | \"scatterSeries\"",
            "resolved": "\"barSeries\" | \"boxPlotSeries\" | \"comboLineAndBarSeries\" | \"gaugeSeries\" | \"histogramSeries\" | \"lineSeries\" | \"pieSeries\" | \"radarSeries\" | \"scatterSeries\"",
            "references": {}
          },
          "mutable": true,
          "attr": "chart-type",
          "reflectToAttr": true,
          "docs": "Chart type used to determine which default actions to display.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{SupportedCharts | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "value": "barSeries",
              "type": "string"
            },
            {
              "value": "boxPlotSeries",
              "type": "string"
            },
            {
              "value": "comboLineAndBarSeries",
              "type": "string"
            },
            {
              "value": "gaugeSeries",
              "type": "string"
            },
            {
              "value": "histogramSeries",
              "type": "string"
            },
            {
              "value": "lineSeries",
              "type": "string"
            },
            {
              "value": "pieSeries",
              "type": "string"
            },
            {
              "value": "radarSeries",
              "type": "string"
            },
            {
              "value": "scatterSeries",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "clearSelectionState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "clear-selection-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the clear selection action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "clearSelectionTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "clear-selection-title",
          "reflectToAttr": true,
          "docs": "Custom title for the clear selection action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "clearSelectionToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "clear-selection-toggle",
          "reflectToAttr": true,
          "docs": "When active, the clear selection action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disableCSVExportForChartTypes",
          "type": "Array<\"number\" | \"cursorCrosshair\" | \"chartText\" | \"category\" | \"date\" | \"chartAxis\" | \"chartLegend\" | \"chartOverlay\" | \"sizeScale\" | \"chartOverlays\" | \"scatterSeries\" | \"chart\" | \"gaugeAxisTick\" | \"gaugeNeedle\" | \"chartGuide\" | \"pieSeries\" | \"pieTick\" | \"gaugeSeries\" | \"lineSeries\" | \"barSeries\" | \"histogramSeries\" | \"boxPlotSeries\" | \"radarSeries\" | \"comboLineAndBarSeries\" | \"buffer\">",
          "complexType": {
            "original": "Array<\"number\" | \"cursorCrosshair\" | \"chartText\" | \"category\" | \"date\" | \"chartAxis\" | \"chartLegend\" | \"chartOverlay\" | \"sizeScale\" | \"chartOverlays\" | \"scatterSeries\" | \"chart\" | \"gaugeAxisTick\" | \"gaugeNeedle\" | \"chartGuide\" | \"pieSeries\" | \"pieTick\" | \"gaugeSeries\" | \"lineSeries\" | \"barSeries\" | \"histogramSeries\" | \"boxPlotSeries\" | \"radarSeries\" | \"comboLineAndBarSeries\" | \"buffer\">",
            "resolved": "Array<\"number\" | \"cursorCrosshair\" | \"chartText\" | \"category\" | \"date\" | \"chartAxis\" | \"chartLegend\" | \"chartOverlay\" | \"sizeScale\" | \"chartOverlays\" | \"scatterSeries\" | \"chart\" | \"gaugeAxisTick\" | \"gaugeNeedle\" | \"chartGuide\" | \"pieSeries\" | \"pieTick\" | \"gaugeSeries\" | \"lineSeries\" | \"barSeries\" | \"histogramSeries\" | \"boxPlotSeries\" | \"radarSeries\" | \"comboLineAndBarSeries\" | \"buffer\">",
            "references": {
              "Array": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": true,
          "docs": "The CSV export action is disabled for certain chart types.\n\nModify this property to add or remove chart types from the list of disabled types.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{WebChartTypes[]}"
            }
          ],
          "default": "[WebChartTypes.ScatterSeries, WebChartTypes.BoxPlotSeries]",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "disabledExportAction",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled-export-action",
          "reflectToAttr": true,
          "docs": "When `true`, the export action is disabled.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{boolean}"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "editChartState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "edit-chart-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the edit chart action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"disabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "editChartTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "edit-chart-title",
          "reflectToAttr": true,
          "docs": "Custom title for the edit chart action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "editChartToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "edit-chart-toggle",
          "reflectToAttr": true,
          "docs": "When active, the edit chart action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "When `true`, the action bar is expanded.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{boolean}"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "exportAsCSVState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "export-as-csv-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the download CSV is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "exportAsCSVTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "export-as-csv-title",
          "reflectToAttr": true,
          "docs": "Custom title for the download CSV action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "exportAsImageState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "export-as-image-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the download image is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "exportAsImageTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "export-as-image-title",
          "reflectToAttr": true,
          "docs": "Custom title for the download chart action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterByExtentState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-extent-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the filter by extent action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterByExtentTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-extent-title",
          "reflectToAttr": true,
          "docs": "Custom title for the filter by extent action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterByExtentToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-extent-toggle",
          "reflectToAttr": true,
          "docs": "When active, the filter by extent action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterBySelectionState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-selection-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the filter by selection action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterBySelectionTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-selection-title",
          "reflectToAttr": true,
          "docs": "Custom title for the filter by selection action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "filterBySelectionToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "filter-by-selection-toggle",
          "reflectToAttr": true,
          "docs": "When active, the filter by selection action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public\ntype {ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "forceDisableActions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "force-disable-actions",
          "reflectToAttr": true,
          "docs": "When `true`, overrides the individual settings for each action to instead force disable them all.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{boolean}"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullExtentState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "full-extent-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the full extent action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullExtentTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "full-extent-title",
          "reflectToAttr": true,
          "docs": "Custom title for the full extent action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "fullExtentToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "full-extent-toggle",
          "reflectToAttr": true,
          "docs": "When active, the full extent action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hiddenActions",
          "type": "Array<\"zoom\" | \"legend\" | \"fullExtent\" | \"filterBySelection\" | \"filterByExtent\" | \"rotateChart\" | \"selection\" | \"clearSelection\" | \"switchSelection\" | \"editChart\" | \"exportAsImage\" | \"exportAsCSV\">",
          "complexType": {
            "original": "Array<\"zoom\" | \"legend\" | \"fullExtent\" | \"filterBySelection\" | \"filterByExtent\" | \"rotateChart\" | \"selection\" | \"clearSelection\" | \"switchSelection\" | \"editChart\" | \"exportAsImage\" | \"exportAsCSV\">",
            "resolved": "Array<\"zoom\" | \"legend\" | \"fullExtent\" | \"filterBySelection\" | \"filterByExtent\" | \"rotateChart\" | \"selection\" | \"clearSelection\" | \"switchSelection\" | \"editChart\" | \"exportAsImage\" | \"exportAsCSV\">",
            "references": {
              "Array": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Holds a list of actions to hide from the action bar.\n\n**Note:** The edit chart action is hidden by default. To show it, remove its value from this array.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{DefaultChartActions[]}"
            }
          ],
          "default": "[\"editChart\"]",
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "legendState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the legend action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "legendTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-title",
          "reflectToAttr": true,
          "docs": "Custom title for the legend action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "legendToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "legend-toggle",
          "reflectToAttr": true,
          "docs": "When active, the legend action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "messageOverrides",
          "type": "Record<string, unknown>",
          "complexType": {
            "original": "Record<string, unknown>",
            "resolved": "Record<string, unknown>",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Overwrite localized strings for this component",
          "docsTags": [],
          "values": [],
          "optional": true,
          "required": false
        },
        {
          "name": "rotateChartState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "rotate-chart-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the rotate chart action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rotateChartTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "rotate-chart-title",
          "reflectToAttr": true,
          "docs": "Custom title for the rotate chart action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rotateChartToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "rotate-chart-toggle",
          "reflectToAttr": true,
          "docs": "When active, the rotate chart action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectionState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "selection-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the selection action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectionTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selection-title",
          "reflectToAttr": true,
          "docs": "Custom title for the selection action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectionToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "selection-toggle",
          "reflectToAttr": true,
          "docs": "When active, the selection action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "switchSelectionState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "switch-selection-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the switch selection action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "switchSelectionTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "switch-selection-title",
          "reflectToAttr": true,
          "docs": "Custom title for the switch selection action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "switchSelectionToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "switch-selection-toggle",
          "reflectToAttr": true,
          "docs": "When active, the switch selection action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "zoomState",
          "type": "\"disabled\" | \"enabled\"",
          "complexType": {
            "original": "\"disabled\" | \"enabled\"",
            "resolved": "\"disabled\" | \"enabled\"",
            "references": {}
          },
          "mutable": true,
          "attr": "zoom-state",
          "reflectToAttr": true,
          "docs": "When disabled, interaction with the zoom action is prevented and the component is displayed with lower opacity.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionState}"
            }
          ],
          "default": "\"enabled\"",
          "values": [
            {
              "value": "disabled",
              "type": "string"
            },
            {
              "value": "enabled",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "zoomTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "zoom-title",
          "reflectToAttr": true,
          "docs": "Custom title for the zoom action.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{string | undefined}"
            }
          ],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "zoomToggle",
          "type": "\"active\" | \"inactive\"",
          "complexType": {
            "original": "\"active\" | \"inactive\"",
            "resolved": "\"active\" | \"inactive\"",
            "references": {}
          },
          "mutable": true,
          "attr": "zoom-toggle",
          "reflectToAttr": true,
          "docs": "When active, the zoom action is highlighted.",
          "docsTags": [
            {
              "name": "category",
              "text": "Public"
            },
            {
              "name": "type",
              "text": "{ActionToggle}"
            }
          ],
          "default": "\"inactive\"",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "inactive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "componentOnReady",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(): Promise<void>",
            "parameters": [],
            "return": "Promise<void>",
            "references": {
              "Promise": {
                "location": "import",
                "path": "typescript/lib/lib.es5.d.ts",
                "id": "notImplemented"
              }
            }
          },
          "signature": "componentOnReady(): Promise<void>",
          "parameters": [],
          "docs": "Create a promise that resolves once component is fully loaded.",
          "docsTags": [
            {
              "name": "example",
              "text": "```js\nconst arcgisChartsActionBar = document.querySelector(\"arcgis-charts-action-bar\");\ndocument.body.append(arcgisChartsActionBar);\nawait arcgisChartsActionBar.componentOnReady();\nconsole.log(\"arcgis-charts-action-bar is ready to go!\");\n```"
            },
            {
              "name": "inheritedFrom",
              "text": "{\"name\":\"LitElement\",\"package\":\"@arcgis/lumina\"}"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "arcgisActionBarToggle",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once action bar expand is toggled",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<boolean>}"
            },
            {
              "name": "event"
            }
          ]
        },
        {
          "event": "arcgisDefaultActionSelect",
          "detail": "{\n    actionId: DefaultChartActions;\n    actionActive: boolean;\n}",
          "bubbles": true,
          "complexType": {
            "original": "{\n    actionId: DefaultChartActions;\n    actionActive: boolean;\n}",
            "resolved": "{\n    actionId: DefaultChartActions;\n    actionActive: boolean;\n}",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered once a default action is selected",
          "docsTags": [
            {
              "name": "type",
              "text": "{EventEmitter<DefaultActionSelectPayload>}"
            },
            {
              "name": "event"
            }
          ]
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "custom-action-top",
          "docs": "A slot for adding custom `calcite-action` to the top of the default actions."
        },
        {
          "name": "custom-action-below",
          "docs": "A slot for adding custom `calcite-action` to the bottom of the default actions."
        }
      ],
      "parts": [],
      "listeners": []
    }
  ],
  "typeLibrary": {}
}