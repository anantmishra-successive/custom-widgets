import { SupportedLayer, WebChart } from '@arcgis/charts-spec';
import { default as FeatureLayer } from '@arcgis/core/layers/FeatureLayer';
import { default as SubtypeGroupLayer } from '@arcgis/core/layers/SubtypeGroupLayer';
import { default as SubtypeSublayer } from '@arcgis/core/layers/support/SubtypeSublayer';
import { default as FeatureLayerView } from '@arcgis/core/views/layers/FeatureLayerView';
import { QueryObject } from '../interfaces';
/**
 * Indicates whether the input object is a feature collection.
 * @param queryObject
 */
export declare function isFeatureCollectionLayer(queryObject: QueryObject): queryObject is FeatureLayerView;
/**
 * Indicates whether the input object is an instance of `FeatureLayerView`.
 * @param queryObject
 */
export declare function isFeatureLayerView(queryObject: QueryObject): queryObject is FeatureLayerView;
/**
 * Indicates whether the input object is an instance of `FeatureLayer`.
 * @param queryObject
 */
export declare function isFeatureLayer(queryObject: QueryObject): queryObject is FeatureLayer;
/**
 * Indicates whether the input object is an instance of `SubtypeGroupLayer`.
 * @param queryObject
 */
export declare function isSubtypeGroupLayer(queryObject: QueryObject | SubtypeGroupLayer): queryObject is SubtypeGroupLayer;
/**
 * Indicates whether the input object is an instance of `SubtypeSublayer`.
 * @param queryObject
 */
export declare function isSubtypeSublayer(queryObject: QueryObject): queryObject is SubtypeSublayer;
/**
 * Indicates whether the input object is an instance of `SupportedLayer` (`FeatureLayer` or `SubtypeSublayer`).
 * @param queryObject
 */
export declare function isSupportedLayer(queryObject: QueryObject): queryObject is SupportedLayer;
/**
 * Returns the main `Layer` instance associated with the layer being used.
 *
 * Only needed for the case where the layer is a `SubtypeSublayer`, in which case we use the parent layer which is a `SubtypeGroupLayer`.
 *
 * @param layer
 */
export declare function getMainLayer(layer: SupportedLayer): FeatureLayer | SubtypeGroupLayer;
export declare function getMainLayer(layer: SupportedLayer | undefined): FeatureLayer | SubtypeGroupLayer | null | undefined;
/**
 * Indicates whether a layer supports queries with a `distance` parameter
 * @param layer The layer to test
 * @returns A boolean
 */
export declare function doesLayerSupportQueryWithDistance(layer: SupportedLayer): boolean;
/**
 * Indicates whether a layer supports the queryBins operation for the temporal data use case.
 * We currently only use the "date" operation.
 * If a split-by field is provided we verify whether `stackBy` parameter is supported (refer to `mapAttributeBinsQuery()`).
 * @param layer The layer to test
 * @param splitByField The split-by field
 * @returns A boolean indicating whether the operation is supported
 */
export declare function doesLayerSupportsQueryBinsForTemporalData(layer: FeatureLayer | SubtypeGroupLayer, splitByField?: string): boolean;
/**
 * Indicates whether the layer supports the cacheHint parameter for the queryBins operation
 * @param queryObject The layer or feature layer view
 */
export declare function doesLayerSupportsCacheHintForQueryBins(queryObject: QueryObject): boolean;
/**
 * Indicates whether the layer supports the query bins operation for scatterplot:
 * - supports queryBins
 * - supports the type `fixedIntervalBin`
 * - statistics: supports MAX and COUNT
 * @param queryObject The layer or feature layer view
 */
export declare function doesLayerSupportsQueryBinsForScatterplot(queryObject: QueryObject): boolean;
/**
 * Returns a feature layer from a QueryObject instance.
 * It will use the QueryObject itself if it's a Feature Layer, or the `layer` property from it if it's a Feature Layer View.
 * @param queryObject
 */
export declare function getLayerFromLayerOrLayerView(layerOrLayerView: FeatureLayerView | SupportedLayer): SupportedLayer;
/**
 * Returns a feature layer from a QueryObject instance.
 * It will use the QueryObject itself if it's a Feature Layer, or the `layer` property from it if it's a Feature Layer View.
 * @param queryObject
 */
export declare function getLayerFromQueryObject(queryObject: QueryObject): SupportedLayer;
/**
 * Computes a feature layer capabilities regarding its spatial aggregation statistics.
 * Only considers the 'EnvelopeAggregate' for now.
 * @param layer The layer instance
 * @returns A sum up of the capabilities
 */
export declare function getLayerSpatialAggregationStatisticsCapabilities(layer: SupportedLayer): boolean;
/**
 * Adds a iLayer to a WebChart.
 * If the `queryObject` prop is provided an `iLayer` is added to the config.
 * @param props.chartConfig The chart config with no iLayer
 * @param props.queryObject The layer or feature layer view instance. Its information are **not** used to create the iLayer.
 * @returns The update chart config with a `iLayer` property
 */
export declare function addILayer<T extends WebChart>(props: {
    chartConfig: T;
    queryObject?: FeatureLayerView | SupportedLayer;
}): T & WebChart;
