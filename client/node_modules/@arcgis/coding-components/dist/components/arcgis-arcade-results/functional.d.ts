/// <reference types="@arcgis/core/interfaces.d.ts" />
import { h, JsxNode } from '@arcgis/lumina';
import { IArcadeResultArray, IArcadeResultFeatureSet, ArcadeResult, IArcadeRuntimeDictionary } from '../../utils';
declare const strings: (value: {
    close: string;
    console: string;
    output: string;
    log: string;
    consolemessage: string;
    lastexecutionformat: string;
    compilationtimeformat: string;
    executiontimeformat: string;
    runscriptmessage: string;
    showingfirstitemsformat: string;
    executionerrorformat: string;
}) => {
    close: string;
    console: string;
    output: string;
    log: string;
    consolemessage: string;
    lastexecutionformat: string;
    compilationtimeformat: string;
    executiontimeformat: string;
    runscriptmessage: string;
    showingfirstitemsformat: string;
    executionerrorformat: string;
};
export declare const treeProps: h.JSX.IntrinsicElements["calcite-tree"];
export declare const DictionaryProperty: ({ name }: {
    name: number | string;
}) => JsxNode;
export declare const DictionaryAsJsonTree: ({ value, subtree, }: {
    value: IArcadeRuntimeDictionary;
    subtree?: boolean;
}) => JsxNode;
export declare const GeometryTree: ({ value, subtree }: {
    value: __esri.Geometry;
    subtree?: boolean;
}) => JsxNode;
export declare const SimpleValue: ({ arcadeResult }: {
    arcadeResult: ArcadeResult;
}) => JsxNode;
export declare const ArrayHeader: ({ arcadeResult, t9nStrings, }: {
    arcadeResult: IArcadeResultArray;
    t9nStrings: Partial<ReturnType<typeof strings>>;
}) => JsxNode;
export declare const DictionaryTree: ({ value, subtree, t9nStrings, }: {
    value: IArcadeRuntimeDictionary;
    t9nStrings: Partial<ReturnType<typeof strings>>;
    subtree?: boolean;
}) => JsxNode;
export declare const FeatureSetLabel: ({ arcadeResult, t9nStrings, }: {
    arcadeResult: IArcadeResultFeatureSet;
    t9nStrings: Partial<ReturnType<typeof strings>>;
}) => JsxNode;
export declare const ArrayTree: ({ items, subtree, t9nStrings, }: {
    items: unknown[];
    subtree?: boolean;
    t9nStrings: Partial<ReturnType<typeof strings>>;
}) => JsxNode;
export declare const FeatureSetTable: ({ arcadeResult }: {
    arcadeResult: IArcadeResultFeatureSet;
}) => JsxNode;
export declare const exportsForTests: {
    TreeItem: ({ arcadeResult, name, expanded, t9nStrings, }: {
        arcadeResult: ArcadeResult;
        name: number | string;
        t9nStrings: Partial<ReturnType<typeof strings>>;
        expanded?: boolean;
    }) => JsxNode;
};
export {};
