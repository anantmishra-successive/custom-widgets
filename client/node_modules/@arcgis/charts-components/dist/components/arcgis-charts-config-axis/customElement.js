import { c as b } from "../../chunks/runtime.js";
import { WebChartTypes as u } from "@arcgis/charts-spec";
import { debounce as c } from "lodash-es";
import { g as f, s as N } from "../../chunks/store.js";
import { b as m, m as g, c as a, U as M, s as x } from "../../chunks/chart-ui-utils2.js";
import { A as B } from "../../chunks/axis-model-wrapper.js";
import { u as p } from "../../chunks/useT9n.js";
import { html as s } from "lit";
import { createRef as r, ref as h } from "lit-html/directives/ref.js";
import { LitElement as v, safeClassMap as d } from "@arcgis/lumina";
import { css as C } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const o = {
  linkContainer: "link-container",
  label: "label",
  mb2: "mb-2"
}, w = C`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}calcite-block{width:var(--arcgis-charts-config-calcite-block-width, var(--arcgis-charts-config-calcite-block-default-width));height:var(--arcgis-charts-config-calcite-block-height, var(--arcgis-charts-config-calcite-block-default-height));border:0px;-webkit-box-shadow:0 0 0 0;box-shadow:0 0}.text{display:flex;margin-left:var(--arcgis-charts-config-margin-minor);width:calc(100% - 1.5rem);height:2rem;margin-bottom:var(--arcgis-charts-config-margin-minor)}.label{display:flex;justify-content:space-between}.mb-2{margin-bottom:var(--arcgis-charts-config-margin-minor)}.link-container{display:flex;justify-content:flex-end;margin-top:-.75rem}`;
class I extends v {
  constructor() {
    super(...arguments), this._messages = p(), this.commonStrings = p({ name: "common", blocking: !0 }), this.axisModel = new B(), this.minBoundInputElement = r(), this.maxBoundInputElement = r(), this.showLogScaleSwitch = r(), this.defaultMinBound = Number.NaN, this.defaultMaxBound = Number.NaN, this.onMaxBoundsChange = async () => {
      const t = this.maxBoundInputElement.value?.value;
      let e = this.maxBoundInputElement.value?.status;
      if (t !== void 0 && t !== "") {
        const n = this.maxBoundInputElement.value?.min === void 0 ? this.axisModel.getMinBound() : Math.max(this.maxBoundInputElement.value.min, this.axisModel.getMinBound()), i = Number.parseFloat(t);
        if (i !== this.axisModel.getMinBound() && m(i, n, this.maxBoundInputElement.value?.max)) {
          if (i !== this.axisModel.getMaxBound()) {
            await this.axisModel.setMaxBound(i);
            const l = this.getAxisBoundsFromStateStore();
            l && (l.currMaxBound = i);
          }
          e = a.IDLE;
        } else
          e = a.INVALID;
      } else
        e = a.IDLE;
      this.maxBoundInputElement.value && g({
        inputElement: this.maxBoundInputElement.value,
        status: e
      }), e !== a.INVALID && this.minBoundInputElement.value?.status === a.INVALID && await this.onMinBoundsChange(), this.requestUpdate();
    }, this.onMaxBoundsChangeDebounced = c(this.onMaxBoundsChange, M.DebounceTimer), this.onMinBoundsChange = async () => {
      const t = this.minBoundInputElement.value?.value;
      let e = this.minBoundInputElement.value?.status;
      if (t !== void 0 && t !== "") {
        const n = this.minBoundInputElement.value?.max === void 0 ? this.axisModel.getMaxBound() : Math.min(this.minBoundInputElement.value.max, this.axisModel.getMaxBound()), i = Number.parseFloat(t);
        if (i !== this.axisModel.getMaxBound() && m(i, this.minBoundInputElement.value?.min, n)) {
          if (i !== this.axisModel.getMinBound()) {
            await this.axisModel.setMinBound(i);
            const l = this.getAxisBoundsFromStateStore();
            l && (l.currMinBound = i);
          }
          e = a.IDLE;
        } else
          e = a.INVALID;
      } else
        e = a.IDLE;
      this.minBoundInputElement.value && g({
        inputElement: this.minBoundInputElement.value,
        status: e
      }), e !== a.INVALID && this.maxBoundInputElement.value?.status === a.INVALID && await this.onMaxBoundsChange(), await this.updateEnableLogarithmic(this.axisModel.getLogarithmic() && (this.dataMinValue ?? Number.NaN) > 0), this.requestUpdate();
    }, this.onMinBoundsChangeDebounced = c(this.onMinBoundsChange, M.DebounceTimer), this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.disableMaxBoundResetBtn = !0, this.disableMinBoundResetBtn = !0, this.isXAxis = !1, this.axisTitle = "";
  }
  static {
    this.properties = { disableMaxBoundResetBtn: 16, disableMinBoundResetBtn: 16, messageOverrides: 0, model: 0, isXAxis: 5, axisTitle: 1, maxBoundMaxLimit: 9, maxBoundMinLimit: 9, minBoundMinLimit: 9, minBoundMaxLimit: 9, showMaxBoundOption: 5, showMinBoundOption: 5, showEnableLogOption: 5, dataMaxValue: 9, dataMinValue: 9, initialMaxBound: 9, initialMinBound: 9 };
  }
  static {
    this.styles = w;
  }
  load() {
    this.modelChange(this.model), this.dataMinValue !== void 0 && this.dataMinValueChange(this.dataMinValue, Number.NaN), this.dataMaxValue !== void 0 && this.dataMaxValueChange(this.dataMaxValue, Number.NaN);
  }
  willUpdate(t) {
    t.has("model") && this.modelChange(this.model, t.get("model")), t.has("dataMinValue") && this.dataMinValueChange(this.dataMinValue ?? Number.NaN, t.get("dataMinValue")), t.has("dataMaxValue") && this.dataMaxValueChange(this.dataMaxValue ?? Number.NaN, t.get("dataMaxValue")), t.has("initialMaxBound") && this.initialMaxBoundChange(), t.has("initialMinBound") && this.initialMinBoundChange();
  }
  updated() {
    this.disableResetButtons();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(t, e) {
    this.axisModel = new B(this.model, this.isXAxis), e?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), t?.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  dataMinValueChange(t, e) {
    Number.isNaN(e) && !Number.isNaN(t) && (this.defaultMinBound = t);
  }
  dataMaxValueChange(t, e) {
    Number.isNaN(e) && !Number.isNaN(t) && (this.defaultMaxBound = t);
  }
  initialMaxBoundChange() {
    Number.isNaN(this.axisModel.getMaxBound()) || this.axisModel.setMaxBound(this.axisModel.getMaxBound());
  }
  initialMinBoundChange() {
    Number.isNaN(this.axisModel.getMinBound()) || this.axisModel.setMinBound(this.axisModel.getMinBound());
  }
  getAxisBoundsFromStateStore() {
    let t;
    const e = N.chartAxesBoundDataMap, n = this.model.getChartId();
    if (n) {
      const i = f({
        chartId: n,
        isXAxis: this.isXAxis,
        isLogarithmic: this.axisModel.getLogarithmic()
      });
      t = e[n]?.[i];
    }
    return t;
  }
  disableResetButtons() {
    const t = this.getAxisBoundsFromStateStore();
    t && (this.disableMaxBoundResetBtn = t.defaultMaxBound === t.currMaxBound, this.disableMinBoundResetBtn = t.defaultMinBound === t.currMinBound);
  }
  async onShowLogScaleMouseEnter() {
    this.showLogScaleTooltip?.remove(), this.showLogScaleSwitch.value?.disabled && (this.showLogScaleTooltip = document.createElement(
      // TODO: [MIGRATION] If this is dynamically creating a web component, please read the docs: https://qawebgis.esri.com/components/lumina/jsx#rendering-jsx-outside-the-component
      "calcite-tooltip"
    ), this.showLogScaleTooltip.textContent = this.commonStrings.tooltips?.logDisabled ?? "", this.showLogScaleTooltip.open = !0, this.showLogScaleTooltip.referenceElement = this.showLogScaleSwitch.value, document.body.appendChild(this.showLogScaleTooltip));
  }
  onShowLogScaleMouseLeave() {
    this.showLogScaleTooltip?.remove();
  }
  async onCategoryFormatChange(t) {
    await this.axisModel.setValueFormat(t.target.categoryFormat);
  }
  async updateEnableLogarithmic(t) {
    t !== this.axisModel.getLogarithmic() && (await this.axisModel.setLogarithmic(t), this.requestUpdate());
  }
  async onNumberFormatChange(t) {
    await this.axisModel.setValueFormat({
      type: u.NumberAxisFormat,
      intlOptions: t.detail
    }), this.requestUpdate();
  }
  async onRevertMaxBoundsToDefault() {
    if (this.maxBoundInputElement.value?.status === a.INVALID || this.axisModel.getMaxBound() !== this.defaultMaxBound) {
      const t = this.getAxisBoundsFromStateStore();
      this.axisModel.getMinBound() > this.defaultMaxBound && await this.axisModel.setMinBound(t?.defaultMinBound ?? Number.NaN), await this.axisModel.setMaxBound(t?.defaultMaxBound ?? Number.NaN), this.requestUpdate();
    }
  }
  async onRevertMinBoundsToDefault() {
    (this.minBoundInputElement.value?.status === a.INVALID || this.axisModel.getMinBound() !== this.defaultMinBound) && (this.axisModel.getMaxBound() < this.defaultMinBound && await this.axisModel.setMaxBound(Number.NaN), await this.axisModel.setMinBound(Number.NaN), this.requestUpdate());
  }
  async enableLogScale(t) {
    const { checked: e } = t.target;
    await this.axisModel.setLogarithmic(e && (this.dataMinValue ?? Number.NaN) > 0), this.requestUpdate();
  }
  render() {
    return s`<div><calcite-block .hidden=${this.axisModel.getValueFormat()?.type === u.DateAxisFormat} open .heading=${this.axisTitle}>${this.renderAxis()}</calcite-block></div>`;
  }
  renderAxis() {
    let t = null;
    const e = { ...this.axisModel.getValueFormat() };
    switch (this.axisModel.getValueFormat()?.type) {
      case u.CategoryAxisFormat:
        t = s`<arcgis-charts-config-category-format .categoryFormat=${e} @arcgisChartsConfigCategoryFormatChange=${this.onCategoryFormatChange}></arcgis-charts-config-category-format>`;
        break;
      case u.NumberAxisFormat:
        t = s`<div>${this.renderShowLogScale()}${this.renderMinBound()}${this.renderMaxBound()}<arcgis-charts-config-number-format .numberFormat=${{ ...e.intlOptions }} @arcgisChartsConfigNumberFormatChange=${this.onNumberFormatChange}></arcgis-charts-config-number-format></div>`;
        break;
      case u.DateAxisFormat:
        t = null;
        break;
    }
    return t;
  }
  renderMaxBound() {
    let t;
    if (!this.showMaxBoundOption)
      t = null;
    else {
      const e = x(this.axisModel.getMaxBound(), this.initialMaxBound);
      t = s`<div><calcite-label class=${d(o.label)}>${this._messages.maxBounds}<calcite-input type=number number-button-type=none .min=${this.maxBoundMinLimit ?? Number.MIN_SAFE_INTEGER} .max=${this.maxBoundMaxLimit ?? Number.MAX_SAFE_INTEGER} step=any .value=${e} @calciteInputInput=${this.onMaxBoundsChangeDebounced} ${h(this.maxBoundInputElement)}></calcite-input></calcite-label><div class=${d(o.linkContainer)}><calcite-button .disabled=${this.disableMaxBoundResetBtn} @click=${this.onRevertMaxBoundsToDefault} appearance=transparent icon-end=reset>${this._messages.revertToDefault}</calcite-button></div></div>`;
    }
    return t;
  }
  renderMinBound() {
    let t;
    if (!this.showMinBoundOption)
      t = null;
    else {
      const e = x(this.axisModel.getMinBound(), this.initialMinBound ?? void 0);
      t = s`<div><calcite-label class=${d(o.label)}>${this._messages.minBounds}<calcite-input type=number number-button-type=none .min=${this.minBoundMinLimit ?? Number.MIN_SAFE_INTEGER} .max=${this.minBoundMaxLimit ?? Number.MAX_SAFE_INTEGER} step=any .value=${e} @calciteInputInput=${this.onMinBoundsChangeDebounced} ${h(this.minBoundInputElement)}></calcite-input></calcite-label><div class=${d(o.linkContainer)}><calcite-button .disabled=${this.disableMinBoundResetBtn} appearance=transparent icon-end=reset @click=${this.onRevertMinBoundsToDefault}>${this._messages.revertToDefault}</calcite-button></div></div>`;
    }
    return t;
  }
  renderShowLogScale() {
    let t;
    return this.showEnableLogOption && (t = s`<calcite-label layout=inline-space-between class=${d({
      [o.label]: !0,
      [o.mb2]: !0
    })}>${this._messages.logScale}<div @mouseenter=${this.onShowLogScaleMouseEnter} @mouseleave=${this.onShowLogScaleMouseLeave}><calcite-switch .checked=${this.axisModel.getLogarithmic() && (this.dataMinValue ?? Number.NaN) > 0} .disabled=${(this.dataMinValue ?? Number.NaN) <= 0} @calciteSwitchChange=${this.enableLogScale} ${h(this.showLogScaleSwitch)}></calcite-switch></div></calcite-label>`), t;
  }
}
b("arcgis-charts-config-axis", I);
export {
  I as ArcgisChartsConfigAxis
};
