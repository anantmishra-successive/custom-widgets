import { c as I } from "../../chunks/runtime.js";
import { html as l } from "lit-html";
import { keyed as $ } from "lit-html/directives/keyed.js";
import { WebChartBoxPlotMultipleSeriesKinds as h } from "@arcgis/charts-spec";
import { isNil as M } from "lodash-es";
import "d3-array";
import { cs as g } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { r as C, c as y, P as B } from "../../chunks/popover-ui-utils.js";
import { repeat as O } from "lit-html/directives/repeat.js";
import { d as w, e as T } from "../../chunks/chart-ui-utils2.js";
import { u as N } from "../../chunks/useT9n.js";
import { LitElement as _, createEvent as S, safeStyleMap as v, safeClassMap as a } from "@arcgis/lumina";
import { css as k } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const n = {
  topSection: "top-section",
  sectionLabel: "section-label",
  list: "list",
  infoIcon: "info-icon"
}, E = k`:host{display:flex;flex-direction:column;width:var(--arcgis-charts-config-calcite-block-default-width);margin:var(--arcgis-charts-config-calcite-block-default-margin)}.top-section{margin-top:var(--arcgis-charts-config-margin-minor)}.section-label{display:flex;margin-bottom:var(--arcgis-charts-config-margin-major);margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);justify-content:space-between;align-items:center;font-weight:var(--calcite-font-weight-medium);font-size:var(--calcite-font-size-0)}.list{margin-left:var(--arcgis-charts-config-margin-minor);margin-right:var(--arcgis-charts-config-margin-minor);margin-bottom:var(--arcgis-charts-config-margin-major)}.info-icon{margin:auto 1rem;pointer-events:auto}`;
class W extends _ {
  constructor() {
    super(...arguments), this._messages = N(), this.resetSeriesOriginal = () => {
      this.configSeriesOpen = !1, this.selectedSeriesIndex = void 0, this.model.resetSeriesStyling(), this.seriesOrderResetCounter += 1;
    }, this.onMultipleSeriesSelect = async (e) => {
      if (!this.shouldDisableMeanLinesOption()) {
        const i = e.target, t = i.value ?? i.parentElement.value ?? "";
        await this.model.setShowMeanLines(t === h.MeanLines);
      }
    }, this.seriesNameChange = (e) => {
      if (e.detail !== null || e.detail !== void 0) {
        const i = e.detail?.name;
        this.model.setSeriesName(i, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesColorChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { color: i } = e.detail;
        i !== void 0 && (this.meanLinesBoxColorIsSelected ? this.model.setMeanLinesBoxColor(i) : (this.model.setColorMatch(!1), this.model.setSeriesColor(i, this.selectedSeriesIndex ?? -1)));
      }
    }, this.seriesLineStyleChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { style: i } = e.detail;
        i !== void 0 && this.model.setSeriesLineStyle(i, this.selectedSeriesIndex ?? -1);
      }
    }, this.seriesLineWidthChange = (e) => {
      if (e.detail !== null && e.detail !== void 0) {
        const { width: i } = e.detail;
        i !== void 0 && this.model.setSeriesLineWidth(i, this.selectedSeriesIndex ?? -1);
      }
    }, this.onCalciteListOrderChange = (e) => {
      const i = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown();
      if (e.detail !== null && e.detail !== void 0) {
        const { newIndex: t, oldIndex: r } = e.detail;
        let s = r, o = t;
        i !== -1 && (s = r >= i ? r + 1 : r, o = t >= i ? t + 1 : t), this.model.moveSeries(s, o), this.seriesOrderResetCounter += 1;
      }
    }, this.seriesPopoverClose = () => {
      this.selectedSeriesIndex = void 0, this.meanLinesBoxColorIsSelected = !1, this.configSeriesOpen = !1, this.seriesPopover = C(this.seriesPopover);
    }, this.seriesPopoverChange = (e) => {
      this.arcgisChartsConfigBoxPlotSeriesPopoverChange.emit({
        open: e,
        element: this.seriesPopover
      });
    }, this.openSeriesPopOver = (e) => {
      const i = e.target, t = i.localName === "calcite-list-item" ? i : i.parentNode, r = !this.configSeriesOpen, s = this.model.getSeriesIndex(t.value);
      if (s !== void 0 && s !== -1)
        this.configSeriesOpen = this.selectedSeriesIndex === s ? r : !0, this.configSeriesOpen ? this.selectedSeriesIndex = s : this.selectedSeriesIndex = void 0, this.meanLinesBoxColorIsSelected = !1;
      else if (t.value === "box-plot-color") {
        const o = !this.meanLinesBoxColorIsSelected;
        this.configSeriesOpen = o, this.meanLinesBoxColorIsSelected = o, this.selectedSeriesIndex = void 0;
      }
    }, this.createTooltip = (e, i) => {
      const t = e.target;
      this.tooltip = w(t), this.tooltip.innerHTML = i, document.body.appendChild(this.tooltip);
    }, this.destroyTooltip = () => {
      T(this.tooltip);
    }, this.onModelConfigChange = () => {
      this.requestUpdate();
    }, this.openChange = (e) => {
      this.arcgisChartsConfigPopoverOpenChange.emit(e.detail);
    }, this.meanLinesBoxColorIsSelected = !1, this.seriesOrderResetCounter = 0, this.configSeriesOpen = !1, this.activeColorMatch = !1, this.popoverPlacement = "leading", this.arcgisChartsConfigBoxPlotSeriesPopoverChange = S(), this.arcgisChartsConfigPopoverOpenChange = S({
      composed: !0,
      cancelable: !0,
      bubbles: !0
    });
  }
  static {
    this.properties = { selectedSeriesIndex: 16, meanLinesBoxColorIsSelected: 16, seriesOrderResetCounter: 16, messageOverrides: 0, model: 0, configSeriesOpen: 5, activeColorMatch: 5, popoverPlacement: 1 };
  }
  static {
    this.styles = E;
  }
  load() {
    this.modelChange(this.model), this.onModelConfigChange();
  }
  willUpdate(e) {
    e.has("model") && this.modelChange(this.model, e.get("model")), e.has("selectedSeriesIndex") && this.selectedSeriesIndexChange(), e.has("meanLinesBoxColorIsSelected") && this.meanLinesBoxColorIsSelectedChange();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.removeSeriesPopover(), this.model.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  modelChange(e, i) {
    i?.removeEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange), e.addEventListener("arcgisChartsModelConfigChange", this.onModelConfigChange);
  }
  selectedSeriesIndexChange() {
    this.selectedSeriesIndex !== void 0 && this.configSeriesOpen ? (this.setupSeriesPopover(), this.seriesPopover && (this.seriesPopover.selectedName = this.model.getSeriesName(this.selectedSeriesIndex), this.seriesPopover.selectedColor = this.model.getSeriesColor(this.selectedSeriesIndex), this.seriesPopover.isLineSymbol = this.model.getShowMeanLines() === !0, this.seriesPopover.selectedLineStyle = this.model.getSeriesLineStyle(this.selectedSeriesIndex), this.seriesPopover.selectedLineWidth = this.model.getSeriesLineWidth(this.selectedSeriesIndex), this.seriesPopover.open || (this.seriesPopover.open = !0)), this.addSeriesPopover()) : this.removeSeriesPopover();
  }
  meanLinesBoxColorIsSelectedChange() {
    this.meanLinesBoxColorIsSelected && this.configSeriesOpen ? (this.setupSeriesPopover(), this.seriesPopover && (this.seriesPopover.selectedColor = this.model.getMeanLinesBoxColor(), this.seriesPopover.isLineSymbol = !1, this.seriesPopover.open || (this.seriesPopover.open = !0)), this.addSeriesPopover()) : this.removeSeriesPopover();
  }
  removeSeriesPopover() {
    this.seriesPopover !== null && this.seriesPopover !== void 0 && (this.seriesPopover.open = !1, this.seriesPopover = C(this.seriesPopover)), this.seriesPopoverChange(!1);
  }
  buildSeriesListItems() {
    const e = this.model.getSeriesLength(), i = this.model.getBoxPlotSeriesIndexWhenMeanLinesShown(), t = Array.from({ length: e }, (s, o) => o);
    return O(t, (s) => this.model.getSeriesId(s), (s) => {
      const o = this.model.getSeriesId(s), c = this.model.getSeriesColor(s), f = this.model.getSeriesName(s), d = this.model.getChartSubType(), u = d === g.BoxPlotMonoField || d === g.BoxPlotMultiFields ? this._messages.series : o;
      let m = "#CCCCCC", p = "minus-square";
      if ((e > 1 || !this.activeColorMatch) && c !== void 0) {
        p = this.model.getShowMeanLines() === !0 ? "line-solid" : "square-f";
        const [L, x, P, b] = [...c];
        m = `rgba(${L},${x},${P},${b / 255})`;
      }
      return i !== s ? l`<calcite-list-item .label=${f ?? o ?? ""} .description=${u} .value=${o} .selected=${this.selectedSeriesIndex === s} @click=${this.openSeriesPopOver}><calcite-icon slot=content-end .icon=${p} style=${v({ color: m })}></calcite-icon></calcite-list-item>` : null;
    });
  }
  buildSeriesList() {
    return $(this.seriesOrderResetCounter, l`<calcite-list label class=${a(n.list)} drag-enabled selection-mode=single selection-appearance=border @calciteListOrderChange=${this.onCalciteListOrderChange}>${this.buildSeriesListItems()}</calcite-list>`);
  }
  setupSeriesPopover() {
    if (M(this.seriesPopover) && this.el !== void 0) {
      const e = {
        seriesNameChange: this.seriesNameChange,
        seriesColorChange: this.seriesColorChange,
        seriesLineStyleChange: this.seriesLineStyleChange,
        seriesLineWidthChange: this.seriesLineWidthChange,
        openChange: this.openChange,
        hostElement: this.el,
        placement: this.popoverPlacement,
        labelCanBeConfigured: !this.meanLinesBoxColorIsSelected,
        popoverClose: this.seriesPopoverClose
      };
      this.seriesPopover = y(B.BoxPlotSeriesPopover, e);
    }
  }
  addSeriesPopover() {
    this.seriesPopover && !document.body.contains(this.seriesPopover) && document.body.appendChild(this.seriesPopover), this.seriesPopoverChange(!0);
  }
  shouldDisableMeanLinesOption() {
    return this.model.getSplitByField() === "" || this.model.getSplitByField() === void 0;
  }
  renderMeanLinesBoxColorItem() {
    let e = "#CCCCCC", i = "minus-square";
    const t = this.model.getMeanLinesBoxColor();
    if (t !== void 0) {
      i = "square-f";
      const [r, s, o, c] = [...t];
      e = `rgba(${r},${s},${o},${c / 255})`;
    }
    return l`<calcite-list label class=${a(n.list)}><calcite-list-item value=box-plot-color .label=${this._messages.boxPlotColor} .selected=${this.meanLinesBoxColorIsSelected} @click=${this.openSeriesPopOver}><calcite-icon slot=content-end .icon=${i} style=${v({ color: e })}></calcite-icon></calcite-list-item></calcite-list>`;
  }
  renderMultipleSeriesOption() {
    const e = this.shouldDisableMeanLinesOption();
    return e ? [] : [
      l`<div class=${`${n.sectionLabel} ${n.topSection}`}>${this._messages.displayMultipleSeries}</div>`,
      l`<calcite-list label class=${a(n.list)} selection-mode=single-persist selection-appearance=border @click=${this.onMultipleSeriesSelect}><calcite-list-item .label=${this._messages.sideBySide} .value=${h.Side} .selected=${this.model.getShowMeanLines() !== !0}><calcite-icon slot=content-start scale=l icon=graph-box-side-by-side></calcite-icon><calcite-icon class=${a(n.infoIcon)} slot=actions-end icon=information scale=s flip-rtl @mouseover=${(i) => this.createTooltip(i, this._messages.sideBySideTooltip ?? "")} @mouseout=${this.destroyTooltip}></calcite-icon></calcite-list-item><calcite-list-item .label=${this._messages.meanLines} .value=${h.MeanLines} .disabled=${e} .selected=${this.model.getShowMeanLines() === !0}><calcite-icon slot=content-start scale=l icon=graph-box-mean-lines></calcite-icon><calcite-icon class=${a(n.infoIcon)} slot=actions-end icon=information scale=s flip-rtl @mouseover=${(i) => this.createTooltip(i, this._messages.meanLinesTooltip ?? "")} @mouseout=${this.destroyTooltip}></calcite-icon></calcite-list-item></calcite-list>`,
      this.model.getShowMeanLines() === !0 ? this.renderMeanLinesBoxColorItem() : null
    ];
  }
  render() {
    return l`${this.renderMultipleSeriesOption()}<div class=${a(n.sectionLabel)}>${this._messages.series}<calcite-button @click=${this.resetSeriesOriginal} .disabled=${!this.model.resetAvailable()} appearance=transparent icon-end=reset>${this._messages.reset}</calcite-button></div>${this.buildSeriesList()}`;
  }
}
I("arcgis-charts-config-box-plot-series", W);
export {
  W as ArcgisChartsConfigBoxPlotSeries
};
