import { c as k } from "../../chunks/runtime.js";
import { repeat as h } from "lit-html/directives/repeat.js";
import { keyed as g } from "lit-html/directives/keyed.js";
import { RESTFieldType as v } from "@arcgis/charts-spec";
import { isEqual as f } from "lodash-es";
import "d3-array";
import { aL as $, c9 as y, b3 as L, b1 as P } from "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { e as F } from "../../chunks/popover-ui-utils.js";
import { P as c } from "../../chunks/common.js";
import { P as a } from "../../chunks/interfaces2.js";
import { p as u, U as I, i as p, h as x } from "../../chunks/chart-ui-utils2.js";
import { u as w } from "../../chunks/useT9n.js";
import { html as n } from "lit";
import { createRef as b, ref as m } from "lit-html/directives/ref.js";
import { LitElement as D, createEvent as C, safeClassMap as l } from "@arcgis/lumina";
import { css as T } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const o = {
  jsAppFlyout: "js-app-flyout",
  name: "pie-chart-data-popover",
  numericFieldPickList: "pie-chart-data-numeric-fields-pick-list",
  header: "header",
  fab: "fab",
  pickListItemLabel: "pick-list-item-label",
  flipClass: "sort-counter-clockwise",
  panel: "panel"
}, E = T`.hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0;left:0}.am5-modal-curtain{top:0;left:0;width:100%;height:100%;position:absolute;background:#fff!important;z-index:100}.am5-modal-wrapper{top:0;left:0;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:#ffffff80;z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:start;white-space:normal;background:#fff;border-radius:4px;box-shadow:#00000073 0 0 36px;color:#000}.am5-layer-1000{z-index:1000!important}.arcgis-charts-modal{box-shadow:none!important}.arcgis-charts-modal-header{background-color:#0000000d;font-weight:700;padding:4px;align-content:center}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.dim-text{color:var(--arcgis-charts-dim-text)}.name{display:flex;flex-direction:column;margin:.5rem;padding:.5rem;background:#fff;min-width:250px}.header{margin:0;font-weight:bolder}.fab{display:flex;justify-content:stretch}.pick-list-item-label{font-size:small}.sort-icon-color{color:#000}.sort-counter-clockwise{transform:scaleX(-1)}.panel{max-height:60vh}`;
class A extends D {
  constructor() {
    super(...arguments), this._messages = w(), this.picklist = b(), this.popoverElement = b(), this.placement = "leading", this.offsetDistance = -200, this.pickListHasChanged = !1, this.aggregationLabels = [], this.layerFieldsInfo = [], this.arcgisChartsConfigPieChartDataPopoverChange = C(), this.arcgisChartsConfigPopoverClose = C();
  }
  static {
    this.properties = { aggregationLabels: 16, messageOverrides: 0, headingTitle: 3, referenceElement: 2, open: 7, contentKind: 1, layerFieldsInfo: 0, selectedContent: 1 };
  }
  static {
    this.styles = E;
  }
  async reposition() {
    await this.popoverElement.value?.reposition();
  }
  async willUpdate(e) {
    e.has("selectedContent") && this.selectedContentChange(this.selectedContent, e.get("selectedContent"));
    const t = await Promise.all(u.map(async (i) => await $(i)));
    f(this.aggregationLabels, t) || (this.aggregationLabels = t);
  }
  async updated() {
    setTimeout(async () => {
      await this.picklist.value?.setFocus();
    }, I.PopoverTimer), F(this.popoverElement.value, this.open);
  }
  selectedContentChange(e, t) {
    this.pickListHasChanged = !f(e, t);
  }
  buildAggregationPickListItems() {
    return h(u, (e) => e, (e, t) => n`<calcite-list-item .label=${this.aggregationLabels[t]} .value=${e} .selected=${p(e, this.selectedContent)}></calcite-list-item>`);
  }
  buildSortOrder() {
    const e = Object.keys(c);
    return e.splice(e.indexOf(c.customSort), 1), h(e, (t) => t, (t) => {
      let i = "string";
      const r = "rotate";
      let s = "";
      switch (t) {
        case c.labelAsc:
          i = "string";
          break;
        case c.labelDesc:
          i = "string", s = o.flipClass;
          break;
        case c.valueAsc:
          i = "number";
          break;
        case c.valueDesc:
          i = "number", s = o.flipClass;
          break;
        // Do nothing for customSort for now
        case c.customSort:
      }
      return n`<calcite-list-item .selected=${this.selectedContent === t} .label=${this._messages[t]} .value=${c[t]}><calcite-icon slot=content-end .icon=${i}></calcite-icon><calcite-icon class=${l(s)} slot=content-end .icon=${r}></calcite-icon></calcite-list-item>`;
    });
  }
  buildPickListItem(e) {
    return g(e.name, n`<calcite-list-item .label=${y(this.layerFieldsInfo, e.name)} .value=${e.name} .selected=${p(e.name, this.selectedContent)}></calcite-list-item>`);
  }
  buildPickListItems(e) {
    const t = this.layerFieldsInfo?.length ?? 0, i = [];
    switch (e) {
      case a.numericFields: {
        for (let r = 0; r < t; r += 1) {
          const s = this.layerFieldsInfo[r];
          P(s) && i.push(this.buildPickListItem(s));
        }
        break;
      }
      case a.category: {
        const r = g(" ", n`<calcite-list-item label=" " value=" " .selected=${p("", this.selectedContent)}></calcite-list-item>`);
        i.push(r);
        for (let s = 0; s < t; s += 1) {
          const d = this.layerFieldsInfo[s];
          (L(d) || d.type === v.String) && i.push(this.buildPickListItem(d));
        }
        break;
      }
    }
    return i;
  }
  closePopover() {
    if (this.contentKind === a.numericFields && this.pickListHasChanged) {
      const e = {
        pickListElement: this.picklist.value,
        eventEmitter: this.arcgisChartsConfigPieChartDataPopoverChange,
        contentKind: this.contentKind
      };
      x(e);
    }
    this.open = !1, this.arcgisChartsConfigPopoverClose.emit();
  }
  onDataContentTypeChange(e) {
    this.pickListHasChanged = !0;
    const t = e.target.selectedItems;
    this.arcgisChartsConfigPieChartDataPopoverChange.emit({
      contentKind: this.contentKind,
      value: t.map((i) => i.value)
    }), this.open = !1;
  }
  onNumericFieldsChange(e) {
    e.target !== null && (this.selectedContent = e.target.selectedItems.map((t) => t.value));
  }
  onNumericFieldSelectionDone() {
    this.pickListHasChanged && this.closePopover();
  }
  renderAggregationType() {
    const e = this.buildAggregationPickListItems();
    return n`<calcite-list label class=${l(o.pickListItemLabel)} selection-mode=single selection-appearance=border @calciteListChange=${this.onDataContentTypeChange}>${e}</calcite-list>`;
  }
  renderCategory() {
    const e = this.buildPickListItems(a.category);
    return n`<calcite-list label class=${l(o.pickListItemLabel)} selection-mode=single selection-appearance=border filter-enabled @calciteListChange=${this.onDataContentTypeChange} ${m(this.picklist)}>${e}</calcite-list>`;
  }
  renderNumericFields() {
    const e = this.buildPickListItems(a.numericFields);
    return n`<calcite-list label class=${l(o.numericFieldPickList)} selection-mode=multiple filter-enabled @calciteListChange=${this.onNumericFieldsChange} ${m(this.picklist)}>${e}</calcite-list>`;
  }
  renderSortOrder() {
    const e = this.buildSortOrder();
    return n`<calcite-list label selection-mode=single selection-appearance=border @calciteListChange=${this.onDataContentTypeChange}>${e}</calcite-list>`;
  }
  renderPopoverInfo() {
    let e;
    switch (this.contentKind) {
      case a.aggregation:
        e = this.renderAggregationType();
        break;
      case a.category:
        e = this.renderCategory();
        break;
      case a.numericFields:
        e = this.renderNumericFields();
        break;
      case a.sortOrder:
        e = this.renderSortOrder();
        break;
    }
    return e;
  }
  render() {
    let e;
    return this.contentKind === a.numericFields && (e = n`<div slot=footer><calcite-fab class=${l(o.fab)} appearance=outline-fill kind=neutral icon .label=${this._messages.selectionDone} scale=s text-enabled .text=${this._messages.selectionDone} @click=${this.onNumericFieldSelectionDone}></calcite-fab></div>`), n`<div class=${l(o.jsAppFlyout)}><calcite-popover class=${l(o.name)} .referenceElement=${this.referenceElement ?? document.body} .placement=${this.placement} @calcitePopoverClose=${this.closePopover} .offsetDistance=${this.offsetDistance} .open=${this.open} label ${m(this.popoverElement)}><calcite-panel class=${l(o.panel)} closable .closed=${!this.open} @calcitePanelClose=${this.closePopover}><div slot=header-content class=${l(o.header)}>${this.headingTitle ?? ""}</div>${this.renderPopoverInfo()}${e}</calcite-panel></calcite-popover></div>`;
  }
}
k("arcgis-charts-config-pie-chart-popover", A);
export {
  A as ArcgisChartsConfigPieChartPopover
};
