import { ChartConfig } from '../../../utils';
import { ValueConversion, GaugeChartSubTypes } from '@arcgis/charts-spec';
import { LayerInfo, ModelTypes } from '../../interfaces/common';
/**
 * Gets the conversion to apply to the gauge value
 * @param {ChartConfig<typeof ModelTypes.Gauge>} config The gauge chart configuration object
 * @returns {ValueConversion | undefined}
 */
export declare const getValueConversion: (config: ChartConfig<typeof ModelTypes.Gauge>) => ValueConversion | undefined;
/**
 * Sets the conversion to apply to the gauge value
 * @param {ValueConversion} valueConversion The conversion to apply
 * @param {ChartConfig<typeof ModelTypes.Gauge>} config The gauge chart configuration object
 */
export declare const setValueConversion: (valueConversion: ValueConversion, config: ChartConfig<typeof ModelTypes.Gauge>) => void;
/**
 * Gets the index of the feature to be rendered.
 * @param {ChartConfig<typeof ModelTypes.Gauge>} config The gauge chart configuration object
 * @returns {number | undefined} The index of the feature to be rendered
 * @remarks
 * This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
 * For feature-based gauge, if this property is not present, the first feature will be used (featureIndex = 0)
 */
export declare const getFeatureIndex: (config: ChartConfig<typeof ModelTypes.Gauge>) => number | undefined;
/**
 * Sets the index of the feature to be rendered.
 * @param {number | null} featureIndex The index of the feature to be rendered
 * @param {ChartConfig<typeof ModelTypes.Gauge>} config The gauge chart configuration object
 * @param {LayerInfo} layerInfo The layer information
 * @remarks This property will be ignored for a statistic gauge (indicated via `WebGaugeChart.subType` property).
 */
export declare const setFeatureIndex: (featureIndex: number | null, config: ChartConfig<typeof ModelTypes.Gauge>, layerInfo: LayerInfo) => Promise<void>;
/**
 * Gets the type of Gauge chart, like FeatureGauge and StatisticGauge.
 * @param {ChartConfig<typeof ModelTypes.Gauge>} config Tthe chart configuration
 * @returns {GaugeChartSubTypes}
 * @remarks When this property is not specified, it will be defaulted to GaugeChartSubTypes.StatisticGauge.
 */
export declare const getGaugeSubType: (config: ChartConfig<typeof ModelTypes.Gauge>) => GaugeChartSubTypes;
