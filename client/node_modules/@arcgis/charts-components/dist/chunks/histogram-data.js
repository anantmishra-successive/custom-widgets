import { WebChartDataTransformations as d } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import { aH as t, a3 as i, c9 as b, bR as u, aF as o, ab as r } from "./interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { u as S, f as D, s as p, a as c, b as O, c as M } from "./data.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
const l = (s) => {
  p(s, null), c(s, null), O(s, null), M(s, null);
}, q = (s) => s.series[0]?.x ?? "", z = async (s, e, a) => {
  const { layerFieldsInfo: n } = a;
  l(e), e?.series?.[0] && (e.series[0].x = s);
  const y = b(n, s);
  S(e, 0, y);
  const m = await D(), v = u(m.titleLabels.distributionOfField, { valueField: y });
  e?.title && (e.title.content.text = v);
}, I = (s) => s.series[0]?.dataTransformationType ?? d.None, R = (s, e) => {
  l(e), e?.series?.[0] && (e.series[0].dataTransformationType = s);
}, W = (s) => s.series[0]?.binCount ?? 32, E = (s, e) => {
  l(e), e?.series?.[0] && (e.series[0].binCount = s);
}, G = (s) => s.series[0]?.fillSymbol ?? t().fillSymbol, J = (s, e) => {
  e?.series?.[0] && (e.series[0].fillSymbol = {
    ...e.series[0].fillSymbol,
    ...s
  });
}, T = (s) => s.series[0]?.overlays?.comparisonDistribution?.symbol ?? t().overlays.comparisonDistribution?.symbol ?? i(), K = (s, e) => {
  e.series[0].overlays ??= o(), e.series[0].overlays.comparisonDistribution ??= r(4), e.series[0].overlays.comparisonDistribution.symbol = {
    ...e.series[0].overlays.comparisonDistribution.symbol,
    ...s
  };
}, x = (s) => s.series[0]?.overlays?.mean?.symbol ?? t().overlays.mean?.symbol ?? i(), P = (s, e) => {
  e.series[0].overlays ??= o(), e.series[0].overlays.mean ??= r(1), e.series[0].overlays.mean.symbol = {
    ...e.series[0].overlays.mean.symbol,
    ...s
  };
}, B = (s) => s.series[0]?.overlays?.median?.symbol ?? t().overlays.median?.symbol ?? i(), Q = (s, e) => {
  e.series[0].overlays ??= o(), e.series[0].overlays.median ??= r(2), e.series[0].overlays.median.symbol = {
    ...e.series[0].overlays.median.symbol,
    ...s
  };
}, h = (s) => s.series[0]?.overlays?.standardDeviation?.symbol ?? t().overlays.standardDeviation?.symbol ?? i(), U = (s, e) => {
  e.series[0].overlays ??= o(), e.series[0].overlays.standardDeviation ??= r(3), e.series[0].overlays.standardDeviation.symbol = {
    ...e.series[0].overlays.standardDeviation.symbol,
    ...s
  };
}, V = (s) => (s.series[0]?.overlays?.comparisonDistribution?.created ?? !1) && (s.series[0]?.overlays?.comparisonDistribution?.visible ?? !1), Z = (s, e) => {
  const a = r(0);
  a.created = s, a.visible = s, a.symbol = T(e), e?.series?.[0]?.overlays && (e.series[0].overlays.comparisonDistribution = a);
}, _ = (s) => (s.series[0]?.overlays?.mean?.created ?? !1) && (s.series[0]?.overlays?.mean?.visible ?? !1), $ = (s, e) => {
  const a = r(1);
  a.created = s, a.visible = s, a.symbol = x(e), e?.series?.[0]?.overlays && (e.series[0].overlays.mean = a);
}, g = (s) => (s.series[0]?.overlays?.median?.created ?? !1) && (s.series[0]?.overlays?.median?.visible ?? !1), ss = (s, e) => {
  const a = r(2);
  a.created = s, a.visible = s, a.symbol = B(e), e?.series?.[0]?.overlays && (e.series[0].overlays.median = a);
}, es = (s) => (s.series[0]?.overlays?.standardDeviation?.created ?? !1) && (s.series[0]?.overlays?.standardDeviation?.visible ?? !1), as = (s, e) => {
  const a = r(3);
  a.created = s, a.visible = s, a.symbol = h(e), e?.series?.[0]?.overlays && (e.series[0].overlays.standardDeviation = a);
}, rs = (s) => s?.series?.[0]?.overlays, ts = (s, e) => {
  e?.series?.[0] !== void 0 && (e.series[0].overlays = s);
};
export {
  W as a,
  E as b,
  G as c,
  J as d,
  I as e,
  R as f,
  q as g,
  x as h,
  P as i,
  B as j,
  Q as k,
  T as l,
  K as m,
  h as n,
  U as o,
  V as p,
  Z as q,
  _ as r,
  z as s,
  $ as t,
  g as u,
  ss as v,
  es as w,
  as as x,
  rs as y,
  ts as z
};
