import { ISimpleLineSymbol } from '@arcgis/charts-spec';
import { ChartConfig } from '../../../utils';
import { ModelTypes, PieChartSlicesDisplay } from '../../interfaces/common';
/**
 * Gets the inner radius size of the pie chart.
 * @param config The chart configuration.
 * @returns {number | null | undefined}
 */
export declare const getInnerRadiusSize: (config: ChartConfig<typeof ModelTypes.PieChart>) => number | null | undefined;
/**
 * Sets the inner radius size of the pie chart.
 * @param radius The inner radius size for the pie chart.
 * @param config The chart configuration.
 */
export declare const setInnerRadiusSize: (radius: number, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the label character limit from the chart config.
 * @param config The chart configuration.
 * @returns {number | null | undefined}
 */
export declare const getLabelCharacterLimit: (config: ChartConfig<typeof ModelTypes.PieChart>) => number | null | undefined;
/**
 * Sets the label character limit for the pie chart.
 * @param characterLimit The character limit for the labels.
 * @param config The chart configuration.
 */
export declare const setLabelCharacterLimit: (characterLimit: number | null, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the start angle of the pie chart.
 * @param config The chart configuration.
 * @returns {number | null | undefined}
 */
export declare const getStartAngle: (config: ChartConfig<typeof ModelTypes.PieChart>) => number | null | undefined;
/**
 * Sets the start angle of the pie chart.
 * @param angle The start angle for the pie chart.
 * @param config The chart configuration.
 */
export declare const setStartAngle: (angle: number, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the end angle of the pie chart.
 * @param config The chart configuration.
 * @returns {number | null | undefined}
 */
export declare const getEndAngle: (config: ChartConfig<typeof ModelTypes.PieChart>) => number | null | undefined;
/**
 * Sets the end angle of the pie chart.
 * @param angle The end angle for the pie chart.
 * @param config The chart configuration.
 */
export declare const setEndAngle: (angle: number, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the display category value on tooltip setting from the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `true`.
 */
export declare const getDisplayCategoryValueOnTooltip: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Gets the display category value on data label setting from the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `true`.
 */
export declare const getDisplayCategoryOnDataLabel: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the display category value on data label setting in the chart config.
 * @param display The boolean value to set the displayCategoryOnDataLabel to
 * @param config The chart configuration.
 */
export declare const setDisplayCategoryOnDataLabel: (display: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the display numeric value on tooltip setting from the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `true`.
 */
export declare const getDisplayNumericValueOnTooltip: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the display category value on tooltip setting in the chart config.
 * @param display The boolean value to set the displayCategoryOnTooltip to
 * @param config The chart configuration.
 */
export declare const setDisplayCategoryOnTooltip: (display: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Sets the display numeric value on tooltip setting in the chart config.
 * @param display The boolean value to set the displayNumericValueOnTooltip to
 * @param config The chart configuration.
 */
export declare const setDisplayNumericValueOnTooltip: (display: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the display percentage on tooltip setting from the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `true`.
 */
export declare const getDisplayPercentageOnTooltip: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the display percentage on tooltip setting in the chart config.
 * @param display The boolean value to set the displayPercentageOnTooltip to
 * @param config The chart configuration.
 */
export declare const setDisplayPercentageOnTooltip: (display: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the prefix for the slice values in the chart config.
 * @param config The chart configuration.
 * @returns {string | undefined}
 */
export declare const getValuePrefix: (config: ChartConfig<typeof ModelTypes.PieChart>) => string | undefined;
/**
 * Set the prefix for the slice values in the chart config.
 * @param prefix The prefix to set for the values in the chart config.
 * @param config The chart configuration.
 */
export declare const setValuePrefix: (prefix: string, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the suffix for the slice values in the chart config.
 * @param config The chart configuration.
 * @returns {string | undefined}
 */
export declare const getValueSuffix: (config: ChartConfig<typeof ModelTypes.PieChart>) => string | undefined;
/**
 * Sets the suffix for the slice values in the chart config.
 * @param suffix The suffix to set for the slice values in the chart config.
 * @param config The chart configuration.
 */
export declare const setValueSuffix: (suffix: string, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the prefix for the slice percentage values in the chart config.
 * @param config The chart configuration.
 * @returns {string | undefined}
 */
export declare const getPercentagePrefix: (config: ChartConfig<typeof ModelTypes.PieChart>) => string | undefined;
/**
 * Sets the prefix for the slice percentage values in the chart config.
 * @param prefix The prefix to set for the slice percentage values in the chart config.
 * @param config The chart configuration.
 */
export declare const setPercentagePrefix: (prefix: string, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the suffix for the slice percentage values in the chart config.
 * @param config The chart configuration.
 * @returns {string | undefined}
 */
export declare const getPercentageSuffix: (config: ChartConfig<typeof ModelTypes.PieChart>) => string | undefined;
/**
 * Sets the suffix for the slice percentage values in the chart config.
 * @param suffix The suffix to set for the slice percentage values in the chart config.
 * @param config The chart configuration.
 */
export declare const setPercentageSuffix: (suffix: string, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the display type for the slices in the pie chart.
 * @param config The chart configuration.
 * @returns {PieChartSlicesDisplay}
 */
export declare const getDisplayType: (config: ChartConfig<typeof ModelTypes.PieChart>) => PieChartSlicesDisplay;
/**
 * Sets the display type for the slices in the pie chart.
 * @param type The display type for the slices in the pie chart.
 * @param config The chart configuration.
 */
export declare const setDisplayType: (type: PieChartSlicesDisplay, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the setting for aligning the data labels in the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `false`.
 */
export declare const getAlignDataLabels: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the setting for aligning the data labels in the chart config.
 * @param align The boolean value to set the alignDataLabels to
 * @param config The chart configuration.
 */
export declare const setAlignDataLabels: (align: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the setting for placing the data labels inside of the slices from the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `false`.
 */
export declare const getDataLabelsInside: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the setting for placing the data labels inside of the slices in the chart config.
 * @param align The boolean value to set the dataLabelsInside to
 * @param config The chart configuration.
 */
export declare const setDataLabelsInside: (align: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the data labels offset from the chart config.
 * @param config The chart configuration.
 * @returns {number}
 * @remarks If the setting is not found in the config, it will default to `10`.
 */
export declare const getDataLabelsOffset: (config: ChartConfig<typeof ModelTypes.PieChart>) => number;
/**
 * Sets the data labels offset in the chart config.
 * @param offset The offset to set for the data labels in the chart config.
 * @param config The chart configuration.
 */
export declare const setDataLabelsOffset: (offset: number, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the decimal places limit from the chart config.
 * @param config The chart configuration.
 * @returns {number | undefined}
 */
export declare const getDecimalPlaces: (config: ChartConfig<typeof ModelTypes.PieChart>) => number | undefined;
/**
 * Sets the decimal places limit for numeric value and percent value formats in the chart config.
 * @param decimalPlaces The decimal places limit to set in the chart config.
 * @param config The chart configuration.
 */
export declare const setDecimalPlaces: (decimalPlaces: number, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the setting for optimizing data labels overlapping in the chart config.
 * @param config The chart configuration.
 * @returns {boolean}
 * @remarks If the setting is not found in the config, it will default to `false`.
 */
export declare const getOptimizeDataLabelsOverlapping: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the setting for optimizing data labels overlapping in the chart config.
 * @param optimize The boolean value to set the optimizeDataLabelsOverlapping to
 * @param config The chart configuration.
 */
export declare const setOptimizeDataLabelsOverlapping: (optimize: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the ticks' visible setting from the chart config.
 * @param config - The chart configuration.
 * @returns {boolean}
 */
export declare const getTicksVisibility: (config: ChartConfig<typeof ModelTypes.PieChart>) => boolean;
/**
 * Sets the ticks' visible setting in the chart config.
 * @param visibility - The visibility setting for the ticks.
 * @param config - The chart configuration.
 */
export declare const setTicksVisibility: (visibility: boolean, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
/**
 * Gets the ticks' symbol from the chart config.
 * @param config The chart configuration.
 * @returns {ISimpleLineSymbol | undefined}
 */
export declare const getTicksSymbol: (config: ChartConfig<typeof ModelTypes.PieChart>) => ISimpleLineSymbol | undefined;
/**
 * Sets the ticks' symbol in the chart config.
 * @param config The chart configuration.
 * @param linesSymbol The ticks' symbol to set.
 */
export declare const setTicksSymbol: (linesSymbol: ISimpleLineSymbol | undefined, config: ChartConfig<typeof ModelTypes.PieChart>) => void;
