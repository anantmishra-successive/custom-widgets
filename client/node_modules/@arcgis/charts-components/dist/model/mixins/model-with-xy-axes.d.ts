import { XYChartTypes } from '../../utils';
import { CategoryFormatOptions, DateTimeFormatOptions, NumberFormatOptions, WebChartAxisScrollBar, WebChartTextSymbol, ISimpleLineSymbol, WebChartLabelBehavior, WebChartCursorCrosshair } from '@arcgis/charts-spec';
import { ModelWithBasicXAxis } from './model-with-basic-x-axis';
export declare abstract class ModelWithXYAxes extends ModelWithBasicXAxis {
    protected _chartType: XYChartTypes;
    /**
     * Gets the Y-axis title text.
     * @returns {string}
     */
    getYAxisTitleText(): string;
    /**
     * Sets the Y-axis title text.
     * @param {string} titleText The Y-axis title text.
     */
    setYAxisTitleText(titleText: string): void;
    /**
     * Gets the visibility of the Y-axis title.
     *
     * `true`: The Y-axis title is visible.
     *
     * `false`: The Y-axis title is hidden.
     *
     * @returns {boolean}
     */
    getYAxisTitleVisibility(): boolean;
    /**
     * Sets the visibility of the Y-axis title.
     *
     * `true`: Show the Y-axis title.
     *
     * `false`: Hide the Y-axis title.
     *
     * @param {boolean} visibility The visibility state of the Y-axis title.
     */
    setYAxisTitleVisibility(visibility: boolean): void;
    /**
     * Gets the maximum bound for the y-axis.
     * @returns {number | null}
     */
    getMaxYBound(): number | null;
    /**
     * Sets the maximum bound for the y-axis.
     * @param {number | null} maxBound The maximum bound for the y-axis. If `null`, the maximum bound is automatically calculated.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMaxYBound(maxBound: number | null): Promise<void>;
    /**
     * Gets the minimum bound for the y-axis.
     * @returns {number | null}
     */
    getMinYBound(): number | null;
    /**
     * Sets the minimum bound for the y-axis.
     * @param {number | null} minBound The minimum bound for the y-axis. If `null`, the minimum bound is automatically calculated.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setMinYBound(minBound: number | null): Promise<void>;
    /**
     * Gets the value format options for the x-axis.
     * @returns {CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined}
     */
    getXAxisValueFormat(): CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined;
    /**
     * Sets the value format options for the x-axis.
     * @param {CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined} valueFormat The value format options for the x-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXAxisValueFormat(valueFormat: CategoryFormatOptions | DateTimeFormatOptions | NumberFormatOptions | undefined): Promise<void>;
    /**
     * Gets the value format options for the y-axis.
     * @returns {NumberFormatOptions | undefined}
     */
    getYAxisValueFormat(): NumberFormatOptions | undefined;
    /**
     * Sets the value format options for the y-axis.
     * @param {NumberFormatOptions | undefined} valueFormat The value format options for the y-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYAxisValueFormat(valueFormat: NumberFormatOptions | undefined): Promise<void>;
    /**
     * Gets whether logarithmic scale is enabled for the x-axis.
     *
     * `true`: Logarithmic scale is enabled for the x-axis.
     *
     * `false`: Logarithmic scale is disabled for the x-axis.
     *
     * @returns {boolean}
     */
    getXLogarithmic(): boolean;
    /**
     * Sets whether logarithmic scale is enabled for the x-axis.
     *
     * `true`: Enable logarithmic scale for the x-axis.
     *
     * `false`: Disable logarithmic scale for the x-axis.
     *
     * @param {boolean} logarithmicState The state of the logarithmic scale for the x-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setXLogarithmic(logarithmicState: boolean): Promise<void>;
    /**
     * Gets whether logarithmic scale is enabled for the y-axis.
     *
     * `true`: Logarithmic scale is enabled for the y-axis.
     *
     * `false`: Logarithmic scale is disabled for the y-axis.
     *
     * @returns {boolean}
     */
    getYLogarithmic(): boolean;
    /**
     * Sets whether logarithmic scale is enabled for the y-axis.
     *
     * `true`: Enable logarithmic scale for the y-axis.
     *
     * `false`: Disable logarithmic scale for the y-axis.
     *
     * @param {boolean} logarithmicState The state of the logarithmic scale for the y-axis.
     * @async **This method is `async` and must be awaited for the changes to take effect.**
     */
    setYLogarithmic(logarithmicState: boolean): Promise<void>;
    /**
     * Gets the x-axis scrollbar configuration.
     * @returns {WebChartAxisScrollBar | undefined}
     */
    getXAxisScrollbar(): WebChartAxisScrollBar | undefined;
    /**
     * Sets the x-axis scrollbar configuration.
     * @param {WebChartAxisScrollBar} scrollbar The x-axis scrollbar configuration.
     */
    setXAxisScrollbar(scrollbar: WebChartAxisScrollBar): void;
    /**
     * Gets the y-axis scrollbar configuration.
     * @returns {WebChartAxisScrollBar | undefined}
     */
    getYAxisScrollbar(): WebChartAxisScrollBar | undefined;
    /**
     * Sets the y-axis scrollbar configuration.
     * @param {WebChartAxisScrollBar} scrollbar The y-axis scrollbar configuration.
     */
    setYAxisScrollbar(scrollbar: WebChartAxisScrollBar): void;
    /**
     * Gets the y-axis title text symbol. Contains styling information such as font, color, and symbol style.
     * @returns {WebChartTextSymbol | undefined}
     */
    getYAxisTitleSymbol(): WebChartTextSymbol | undefined;
    /**
     * Sets the y-axis title text symbol. Contains styling information such as font, color, and symbol style.
     * @param {WebChartTextSymbol | undefined} titleSymbol The y-axis title text symbol.
     */
    setYAxisTitleSymbol(titleSymbol: WebChartTextSymbol | undefined): void;
    /**
     * Gets the horizontal axis labels behavior for the chart.
     * @returns {WebChartLabelBehavior}
     */
    getHorizontalAxisLabelsBehavior(): WebChartLabelBehavior;
    /**
     * Sets the horizontal axis labels behavior for the chart.
     * @param horizontalBehavior The behavior for the horizontal axis labels.
     */
    setHorizontalAxisLabelsBehavior(horizontalBehavior: WebChartLabelBehavior): void;
    /**
     * Gets the vertical axis labels behavior for the chart.
     * @returns {WebChartLabelBehavior}
     */
    getVerticalAxisLabelsBehavior(): WebChartLabelBehavior;
    /**
     * Sets the vertical axis labels behavior for the chart.
     * @param verticalBehavior The behavior for the vertical axis labels.
     */
    setVerticalAxisLabelsBehavior(verticalBehavior: WebChartLabelBehavior): void;
    /**
     * Gets the grid lines symbol. Contains styling information such as line width, line style, and line color.
     * @returns {ISimpleLineSymbol | undefined}
     */
    getGridLinesSymbol(): ISimpleLineSymbol | undefined;
    /**
     * Sets the grid lines symbol. Contains styling information such as line width, line style, and line color.
     * @param {ISimpleLineSymbol | undefined} linesSymbol The grid lines symbol.
     */
    setGridLinesSymbol(linesSymbol: ISimpleLineSymbol | undefined): void;
    /**
     * Gets the display zero line setting for the specified axis.
     * @param axisIndex The index of the axis to get the display zero line for.
     * @returns {boolean}
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     * c. If the displayZeroLine is not set on the axis, the default value of `false` will be returned.
     */
    getDisplayZeroLine(axisIndex: number): boolean;
    /**
     * Sets the display zero line setting for the specified axis.
     * @param displayZeroLine The display zero line setting for the axis.
     * @param axisIndex The index of the axis to set the display zero line for.
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    setDisplayZeroLine(displayZeroLine: boolean, axisIndex: number): void;
    /**
     * Gets the display cursor tooltip setting for the specified axis.
     * @param axisIndex The index of the axis to get the display cursor tooltip for.
     * @returns {boolean}
     * @remarks
     * a. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     * b. If the displayCursorTooltip is not set on the axis, the default value of `false` will be returned.
     */
    getDisplayCursorTooltip(axisIndex: number): boolean;
    /**
     * Sets the display cursor tooltip setting for the specified axis.
     * @param displayCursorTooltip The display cursor tooltip setting for the axis.
     * @param axisIndex The index of the axis to set the display cursor tooltip for.
     * @remarks
     * a. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    setDisplayCursorTooltip(displayCursorTooltip: boolean, axisIndex: number): void;
    /**
     * Gets the buffer setting for the specified axis.
     * @param axisIndex The index of the axis
     * @returns {boolean}
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     * c. If the `buffer` is not set on the axis, the default value of `false` will be returned.
     */
    getBuffer(axisIndex: number): boolean;
    /**
     * Sets the buffer for the specified axis.
     * @param buffer The setting for the buffer
     * @param axisIndex The index of the axis
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    setBuffer(buffer: boolean, axisIndex: number): void;
    /**
     * Gets the tick spacing setting for the specified axis.
     * @param axisIndex The index of the axis
     * @returns {number}
     * @remarks
     * a. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    getTickSpacing(axisIndex: number): number | undefined;
    /**
     * Sets the tick spacing for the specified axis.
     * @param tickSpacing The value to set for the tick spacing
     * @param axisIndex The index of the axis
     * @remarks
     * a. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    setTickSpacing(tickSpacing: number, axisIndex: number): void;
    /**
     * Gets the integer only values setting for the specified axis.
     * @param axisIndex The index of the axis
     * @returns {boolean}
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To get the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     * c. If the `integerOnlyValues` is not set on the axis, the default value of `false` will be returned.
     */
    getIntegerOnlyValues(axisIndex: number): boolean;
    /**
     * Sets the integer only values setting for the specified axis.
     * @param integerOnlyValues The boolean value to set for the integer only values setting
     * @param axisIndex The index of the axis
     * @remarks
     * a. This setting is only applicable to the axis of type ValueAxis.
     * b. To set the setting for the x-axis, the axisIndex should be `0`. For the y-axis, the axisIndex should be `1`.
     */
    setIntegerOnlyValues(integerOnlyValues: boolean, axisIndex: number): void;
    /**
     * Gets the visibility of the horizontal line of the cursor's crosshair.
     * @returns {boolean}
     * @remarks if the cursor crosshair or its horizontal line visibility is not set, the default value of `false` will be returned.
     */
    getCursorCrosshairHorizontalLineVisibility(): boolean;
    /**
     * Sets the visibility of the horizontal line of the cursor's crosshair.
     * @param visibility The visibility to set for the cursor's crosshair horizontal line
     * @remarks if the cursor crosshair is not set, it will be created with the default values.
     */
    setCursorCrosshairHorizontalLineVisibility(visibility: boolean): void;
    /**
     * Gets the visibility of the vertical line of the cursor's crosshair.
     * @returns {boolean}
     * @remarks if the cursor crosshair or its vertical line visibility is not set, the default value of `false` will be returned.
     */
    getCursorCrosshairVerticalLineVisibility(): boolean;
    /**
     * Sets the visibility of the vertical line of the cursor's crosshair.
     * @param visibility The visibility to set for the cursor's crosshair vertical line
     * @remarks if the cursor crosshair is not set, it will be created with the default values.
     */
    setCursorCrosshairVerticalLineVisibility(visibility: boolean): void;
    /**
     * Gets the style of the cursor's crosshair from the chart config.
     * @param config The chart configuration
     * @returns {boolean}
     */
    getCursorCrosshairStyle(): ISimpleLineSymbol | undefined;
    /**
     * Sets the style of the cursor's crosshair in the chart config.
     * @param style The style to set for the cursor's crosshair
     * @param config The chart configuration
     */
    setCursorCrosshairStyle(style: ISimpleLineSymbol): void;
    /**
     * Gets the cursor crosshair from the chart config.
     * @param config The chart configuration object
     * @returns {WebChartCursorCrosshair | undefined}
     */
    getCursorCrosshair(): WebChartCursorCrosshair | undefined;
    /**
     * Sets the cursor crosshair in the chart config.
     * @param cursorCrosshair The cursor crosshair to set
     * @param config The chart configuration object
     */
    setCursorCrosshair(cursorCrosshair: WebChartCursorCrosshair): void;
}
