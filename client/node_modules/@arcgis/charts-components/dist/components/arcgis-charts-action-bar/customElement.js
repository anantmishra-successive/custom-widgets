import { c as I } from "../../chunks/runtime.js";
import { html as l } from "lit-html";
import { WebChartTypes as S } from "@arcgis/charts-spec";
import "lodash-es";
import "d3-array";
import "../../chunks/interfaces.js";
import "@arcgis/core/geometry/support/jsonUtils.js";
import "@arcgis/core/rest/support/AttributeBinsQuery.js";
import "@arcgis/core/rest/support/Query.js";
import "@arcgis/core/rest/support/StatisticDefinition.js";
import "@arcgis/core/time/TimeExtent.js";
import "@arcgis/core/core/promiseUtils.js";
import "@arcgis/core/request.js";
import { b as t, c as o, A as E, D as e } from "../../chunks/index2.js";
import { f as $ } from "../../chunks/interfaces2.js";
import { d as n, c as b, g as w } from "../../chunks/action-bar-utils.js";
import { u as C } from "../../chunks/useT9n.js";
import { createRef as y, ref as B } from "lit-html/directives/ref.js";
import { LitElement as M, createEvent as D, safeClassMap as O, nothing as s } from "@arcgis/lumina";
import { css as _ } from "@lit/reactive-element/css-tag.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
function z(h) {
  return h?.tagName.toLowerCase() === "arcgis-chart";
}
const V = {
  actionBar: "action-bar"
}, F = _`.action-bar{display:flex;flex-direction:column;height:100%;border-right:1px solid var(--calcite-color-border-2);overflow-x:hidden}:host{z-index:1001}`;
class L extends M {
  constructor() {
    super(...arguments), this.calciteActionBar = y(), this.exportCalciteActionBar = y(), this.expandAction = null, this._messages = C(), this.commonStrings = C({ name: "common", blocking: !0 }), this.handleMouseOver = (c) => {
      if (this.calciteActionBar.value && !this.calciteActionBar.value?.expanded) {
        const a = c.target;
        this.actionTooltip !== void 0 && (this.actionTooltip = n(this.actionTooltip));
        let i;
        a?.tagName === "CALCITE-ACTION" ? i = a : (a?.tagName === "CALCITE-ACTION-MENU" || a?.tagName === "DIV") && (i = a.firstChild), i !== void 0 && (this.actionTooltip = b(i.text, i), this.actionTooltip.open = !0);
      } else
        this.actionTooltip = n(this.actionTooltip);
    }, this.actionTooltip = null, this.forceDisableActions = !1, this.editChartToggle = t.Inactive, this.editChartState = o.Disabled, this.legendToggle = t.Inactive, this.legendState = o.Enabled, this.rotateChartToggle = t.Inactive, this.rotateChartState = o.Enabled, this.filterBySelectionToggle = t.Inactive, this.filterBySelectionState = o.Enabled, this.filterByExtentToggle = t.Inactive, this.filterByExtentState = o.Enabled, this.actionBarSelectionMode = E.MultiSelectionWithCtrlKey, this.selectionToggle = t.Inactive, this.selectionState = o.Enabled, this.zoomToggle = t.Inactive, this.zoomState = o.Enabled, this.fullExtentToggle = t.Inactive, this.fullExtentState = o.Enabled, this.clearSelectionToggle = t.Inactive, this.clearSelectionState = o.Enabled, this.switchSelectionToggle = t.Inactive, this.switchSelectionState = o.Enabled, this.exportAsImageState = o.Enabled, this.exportAsCSVState = o.Enabled, this.disableCSVExportForChartTypes = [
      S.ScatterSeries,
      S.BoxPlotSeries
    ], this.disabledExportAction = !1, this.expanded = !1, this.hiddenActions = [e.EditChart], this.arcgisActionBarToggle = D(), this.arcgisDefaultActionSelect = D();
  }
  static {
    this.properties = { actionTooltip: 16, messageOverrides: 0, chartType: 3, chartElement: 0, forceDisableActions: 7, editChartToggle: 3, editChartState: 3, editChartTitle: 3, legendToggle: 3, legendState: 3, legendTitle: 3, rotateChartToggle: 3, rotateChartState: 3, rotateChartTitle: 3, filterBySelectionToggle: 3, filterBySelectionState: 3, filterBySelectionTitle: 3, filterByExtentToggle: 3, filterByExtentState: 3, filterByExtentTitle: 3, actionBarSelectionMode: 3, selectionToggle: 3, selectionState: 3, selectionTitle: 3, zoomToggle: 3, zoomState: 3, zoomTitle: 3, fullExtentToggle: 3, fullExtentState: 3, fullExtentTitle: 3, clearSelectionToggle: 3, clearSelectionState: 3, clearSelectionTitle: 3, switchSelectionToggle: 3, switchSelectionState: 3, switchSelectionTitle: 3, exportAsImageState: 3, exportAsImageTitle: 3, exportAsCSVState: 3, exportAsCSVTitle: 3, disableCSVExportForChartTypes: 2, disabledExportAction: 7, expanded: 7, hiddenActions: 0 };
  }
  static {
    this.styles = F;
  }
  async load() {
    this.chartElement = z(this.el.parentElement) ? this.el.parentElement : void 0;
  }
  updated() {
    this.handleExpandTooltip();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.actionTooltip?.remove();
  }
  async onDefaultActionClick(c) {
    const a = c.currentTarget, i = {
      actionId: a.id,
      actionActive: !1
    };
    switch (a.id) {
      case e.EditChart:
        this.editChartToggle = this.editChartToggle === t.Active ? t.Inactive : t.Active, i.actionActive = this.editChartToggle === t.Active;
        break;
      case e.Legend:
        this.legendToggle = this.legendToggle === t.Active ? t.Inactive : t.Active, i.actionActive = this.legendToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.legendVisibility = i.actionActive);
        break;
      case e.RotateChart:
        this.rotateChartToggle = this.rotateChartToggle === t.Active ? t.Inactive : t.Active, i.actionActive = this.rotateChartToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.rotation = i.actionActive);
        break;
      case e.FilterBySelection:
        this.filterBySelectionToggle = this.filterBySelectionToggle === t.Active ? t.Inactive : t.Active, i.actionActive = this.filterBySelectionToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.filterBySelection = i.actionActive);
        break;
      case e.FilterByExtent:
        this.filterByExtentToggle = this.filterByExtentToggle === t.Active ? t.Inactive : t.Active, i.actionActive = this.filterByExtentToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.filterByExtent = i.actionActive);
        break;
      case e.Selection:
        this.selectionToggle = t.Active, this.zoomToggle = t.Inactive, i.actionActive = this.selectionToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.actionMode = this.actionBarSelectionMode);
        break;
      case e.Zoom:
        this.zoomToggle = t.Active, this.selectionToggle = t.Inactive, i.actionActive = this.zoomToggle === t.Active, this.chartElement !== void 0 && (this.chartElement.actionMode = E.Zoom);
        break;
      case e.ClearSelection:
        i.actionActive = this.clearSelectionToggle === t.Active, this.chartElement?.clearSelection();
        break;
      case e.FullExtent:
        i.actionActive = this.fullExtentToggle === t.Active, this.chartElement?.resetZoom();
        break;
      case e.SwitchSelection:
        i.actionActive = this.switchSelectionToggle === t.Active, this.chartElement?.switchSelection();
        break;
      case e.ExportAsImage:
        i.actionActive = !0, await this.chartElement?.exportAsImage();
        break;
      case e.ExportAsCSV:
        i.actionActive = !0, await this.chartElement?.exportAsCSV();
        break;
    }
    this.arcgisDefaultActionSelect.emit(i);
  }
  handleCalciteActionBarToggle() {
    this.expanded = this.calciteActionBar.value?.expanded ?? !1, this.setCustomActionsExpanded(), this.arcgisActionBarToggle.emit(this.expanded);
  }
  handleMouseOut() {
    this.actionTooltip !== null && (this.actionTooltip = n(this.actionTooltip));
  }
  handleSlotChange(c) {
    const i = c.currentTarget.assignedElements();
    for (const r of i)
      r.onmouseover = this.handleMouseOver;
  }
  setCustomActionsExpanded() {
    this.el.querySelectorAll("calcite-action").forEach((c) => {
      const a = c;
      a.textEnabled = this.expanded;
    });
  }
  handleExpandTooltip() {
    this.expandAction === null && (this.expandAction = this.calciteActionBar.value?.shadowRoot?.querySelector("calcite-action") ?? null, this.expandAction !== null && (this.expandAction.addEventListener("mouseenter", () => {
      !this.calciteActionBar.value?.expanded && this.expandAction !== null && !document.body.contains(this.actionTooltip) && (this.actionTooltip = b(this._messages.expand ?? "", this.expandAction), this.actionTooltip.open = !0);
    }), this.expandAction.addEventListener("mouseleave", () => {
      !this.calciteActionBar.value?.expanded && this.actionTooltip !== null && (this.actionTooltip = n(this.actionTooltip));
    }), this.expandAction.addEventListener("click", () => {
      this.calciteActionBar.value?.expanded && this.actionTooltip !== null && (this.actionTooltip = n(this.actionTooltip));
    })));
  }
  renderDefaultActions() {
    const c = w(this.chartType).filter((k) => !this.hiddenActions?.includes(k)), a = this.chartElement?.layer && "isTable" in this.chartElement.layer ? this.chartElement.layer.isTable : !1, i = c.includes(e.EditChart), r = c.includes(e.Legend), d = c.includes(e.RotateChart), g = c.includes(e.FilterBySelection), A = c.includes(e.FilterByExtent) && !a, m = c.includes(e.Zoom), v = c.includes(e.Selection), u = c.includes(e.ClearSelection), p = c.includes(e.FullExtent), T = c.includes(e.SwitchSelection), f = c.includes(e.ExportAsImage), x = c.includes(e.ExportAsCSV);
    return [
      r || d ? l`<calcite-action-group>${i ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.EditChart ?? s} icon=gear .text=${this.commonStrings?.actions?.editChart ?? ""} .active=${this.editChartToggle === t.Active} .disabled=${this.editChartState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${r ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.Legend ?? s} .text=${this.legendTitle ?? this._messages?.legend ?? ""} .active=${this.legendToggle === t.Active} .disabled=${this.legendState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}><calcite-icon icon=legend scale=s flip-rtl></calcite-icon></calcite-action></div>` : null}${d ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.RotateChart ?? s} icon=rotate .text=${this.rotateChartTitle ?? this._messages?.rotateChart ?? ""} .active=${this.rotateChartToggle === t.Active} .disabled=${this.rotateChartState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}</calcite-action-group>` : null,
      g || A ? l`<calcite-action-group>${g ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.FilterBySelection ?? s} icon=selection-filter .text=${this.filterBySelectionTitle ?? this._messages?.filterBySelection ?? ""} .active=${this.filterBySelectionToggle === t.Active} .disabled=${this.filterBySelectionState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${A ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.FilterByExtent ?? s} icon=extent-filter .text=${this.filterByExtentTitle ?? this._messages?.filterByExtent ?? ""} .active=${this.filterByExtentToggle === t.Active} .disabled=${this.filterByExtentState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}</calcite-action-group>` : null,
      v || m || p || u || T ? l`<calcite-action-group>${m ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.Zoom ?? s} icon=magnifying-glass .text=${this.zoomTitle ?? this._messages?.zoom ?? ""} .active=${this.zoomToggle === t.Active} .disabled=${this.zoomState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${v ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.Selection ?? s} icon=cursor-selection .text=${this.selectionTitle ?? this._messages?.selection ?? ""} .active=${this.selectionToggle === t.Active} .disabled=${this.selectionState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${u ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.ClearSelection ?? s} icon=erase .text=${this.clearSelectionTitle ?? this._messages?.clearSelection ?? ""} .active=${this.clearSelectionToggle === t.Active} .disabled=${this.clearSelectionState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${p ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.FullExtent ?? s} icon=zoom-out-fixed .text=${this.fullExtentTitle ?? this._messages?.fullExtent ?? ""} .active=${this.fullExtentToggle === t.Active} .disabled=${this.fullExtentState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}${T ? l`<div @mouseover=${this.handleMouseOver}><calcite-action id=${e.SwitchSelection ?? s} icon=arrow-right-left .text=${this.switchSelectionTitle ?? this._messages?.switchSelection ?? ""} .active=${this.switchSelectionToggle === t.Active} .disabled=${this.switchSelectionState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick}></calcite-action></div>` : null}</calcite-action-group>` : null,
      f || x ? l`<calcite-action-menu .label=${this._messages?.export ?? ""} ${B(this.exportCalciteActionBar)}><calcite-action id=export icon=export .text=${this._messages?.export ?? ""} .disabled=${this.disabledExportAction} @mouseover=${this.handleMouseOver} slot=trigger></calcite-action>${f ? l`<div><calcite-action id=${e.ExportAsImage ?? s} icon=graph-bar .text=${this.exportAsImageTitle ?? this._messages?.exportAsImage ?? ""} .disabled=${this.exportAsImageState === o.Disabled || this.forceDisableActions} @click=${this.onDefaultActionClick} text-enabled></calcite-action></div>` : null}${x ? l`<div><calcite-action id=${e.ExportAsCSV ?? s} icon=table .text=${this.exportAsCSVTitle ?? this._messages?.exportAsTable ?? ""} .disabled=${this.exportAsCSVState === o.Disabled || this.forceDisableActions || this.chartType && this.disableCSVExportForChartTypes.includes(this.chartType)} @click=${this.onDefaultActionClick} text-enabled></calcite-action></div>` : null}</calcite-action-menu>` : null
    ];
  }
  render() {
    return l`<calcite-action-bar class=${O(V.actionBar)} @calciteActionBarToggle=${this.handleCalciteActionBarToggle} @mouseout=${this.handleMouseOut} .expanded=${this.expanded} .messageOverrides=${{ expand: this._messages.expand, collapse: this._messages.collapse }} overflow-actions-disabled ${B(this.calciteActionBar)}><slot name=${$.customActionTop} @slotchange=${this.handleSlotChange}></slot>${this.renderDefaultActions()}<slot name=${$.customActionBelow} @slotchange=${this.handleSlotChange}></slot></calcite-action-bar>`;
  }
}
I("arcgis-charts-action-bar", L);
export {
  L as ArcgisChartsActionBar
};
