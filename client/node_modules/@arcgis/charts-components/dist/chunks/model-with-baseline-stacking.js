import { C as s } from "./model-with-y-guides.js";
import { s as a } from "./serial-chart-model.js";
import { g as n, a as o, e as g, b as l, f as h, s as f, h as c, c as S, i as d, d as k, j as C, k as M, t as m, u as _, l as L, m as t, n as u, o as p, p as V, q as b, r as y } from "./baseline-stacking.js";
/*! All material copyright Esri, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
v4.33.19 */
class v extends s {
  /**
   * Gets the line style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
   * @param {number} seriesIndex The index of the series.
   * @returns {RESTSimpleLineSymbolStyle | undefined}
   */
  getSeriesLineStyle(e) {
    return n(e, this._config);
  }
  /**
   * Sets the line style of the series based on the series index.
   * @param {RESTSimpleLineSymbolStyle | undefined} style The new style for the series.
   * @param {number} seriesIndex The index of the series.
   */
  setSeriesLineStyle(e, i) {
    o(e, i, this._config), this.emitConfigUpdate("setSeriesLineStyle");
  }
  /**
   * Gets the line width of the series based on the series index. If the index is out of bounds, it will return `undefined`.
   * @param {number} seriesIndex The index of the series.
   * @returns {number | undefined}
   */
  getSeriesLineWidth(e) {
    return g(e, this._config);
  }
  /**
   * Sets the line width of the series based on the series index.
   * @param {number | undefined} width The new width for the series.
   * @param {number} seriesIndex The index of the series.
   */
  setSeriesLineWidth(e, i) {
    l(e, i, this._config), this.emitConfigUpdate("setSeriesLineWidth");
  }
  /**
   * Gets the marker color of the series based on the series index. If the index is out of bounds, it will return `undefined`.
   * @param {number} seriesIndex The index of the series.
   * @returns {Color | undefined}
   */
  getSeriesMarkerColor(e) {
    return h(e, this._config);
  }
  /**
   * Sets the marker color of the series based on the series index.
   * @param {Color | undefined} color The new color for the series.
   * @param {number} seriesIndex The index of the series.
   */
  setSeriesMarkerColor(e, i) {
    f(e, i, this._config), this.emitConfigUpdate("setSeriesMarkerColor");
  }
  /**
   * Gets the marker style of the series based on the series index. If the index is out of bounds, it will return `undefined`.
   * @param {number} seriesIndex The index of the series.
   * @returns {RESTSimpleMarkerSymbolStyle | undefined}
   */
  getSeriesMarkerStyle(e) {
    return c(e, this._config);
  }
  /**
   * Sets the marker style of the series based on the series index.
   * @param {RESTSimpleMarkerSymbolStyle | undefined} style The new style for the series.
   * @param {number} seriesIndex The index of the series.
   */
  setSeriesMarkerStyle(e, i) {
    S(e, i, this._config), this.emitConfigUpdate("setSeriesMarkerStyle");
  }
  /**
   * Gets the marker size of the series based on the series index. If the index is out of bounds, it will return `undefined`.
   * @param {number} seriesIndex The index of the series.
   * @returns {number | undefined}
   */
  getSeriesMarkerSize(e) {
    return d(e, this._config);
  }
  /**
   * Sets the marker size of the series based on the series index.
   * @param {number | undefined} size The new size for the series.
   * @param {number} seriesIndex The index of the series.
   */
  setSeriesMarkerSize(e, i) {
    k(e, i, this._config), this.emitConfigUpdate("setSeriesMarkerSize");
  }
  /**
   * Specify whether line segments of the series should be smoothed.
   * @param {number} seriesIndex - The index of the series.
   *
   * @default false
   * @returns {boolean}
   */
  isLineSmoothed(e) {
    return C(e, this._config);
  }
  /**
   * Specify whether line segments of the series should be smoothed.
   * @param {boolean} props.smoothed - `true` if line segment of the series should be smoothed, `false` otherwise.
   * @param {number} props.seriesIndex - The index of the series.
   */
  setLineSmoothed(e, i) {
    M({
      smoothed: e,
      seriesIndex: i,
      config: this._config
    }), this.emitConfigUpdate("setLineSmoothed");
  }
  /**
   * Specify the color of the filled area for line chart.
   * @param {number} seriesIndex - The index of the series.
   *
   * @returns {boolean | undefined}
   */
  getConnectLines(e) {
    return m(e, this._config);
  }
  /**
   * Specify the color of the filled area for line chart.
   * @param {boolean | undefined} props.color - The color of the filled area for line chart.
   * @param {number} props.seriesIndex - The index of the series.
   *
   * NOTE: Can be overridden by the temporal data setting `nullPolicy`.
   *
   */
  setConnectLines(e, i) {
    _({
      connect: e,
      seriesIndex: i,
      config: this._config
    }), this.emitConfigUpdate("setConnectLines");
  }
  /**
   * Specify whether the line series should show area.
   * @param {number} seriesIndex - The index of the series.
   *
   * @default false
   * @returns {boolean}
   */
  isAreaVisible(e) {
    return L(e, this._config);
  }
  /**
   * Specify whether the line series should show area.
   * @param {boolean} props.visible - `true` if the line series should show area, `false` otherwise.
   * @param {number} props.seriesIndex - The index of the series.
   */
  setAreaVisible(e, i) {
    t({
      visible: e,
      seriesIndex: i,
      config: this._config
    }), this.emitConfigUpdate("setAreaVisible");
  }
  /**
   * Indicate whether to show or hide the markers/bullets of the line series.
   * @param {number} seriesIndex - The index of the series.
   *
   * @default true
   * @returns {boolean}
   */
  isMarkerVisible(e) {
    return u(e, this._config);
  }
  /**
   * Indicate whether to show or hide the markers/bullets of the line series.
   * @param {boolean} props.visible - `true` if the markers/bullets of the line series should be shown, `false` otherwise.
   * @param {number} props.seriesIndex - The index of the series.
   */
  setMarkerVisible(e, i) {
    p({
      visible: e,
      seriesIndex: i,
      config: this._config
    }), this.emitConfigUpdate("setMarkerVisible");
  }
  /**
   * Specify the color of the filled area for line chart.
   * @param {number} seriesIndex - The index of the series.
   *
   * NOTE: areaColor will be applied only if `showArea` is true, and is defaulted to the line color if not provided.
   *
   * @returns {Color | undefined}
   */
  getAreaColor(e) {
    return V(e, this._config);
  }
  /**
   * Specify the color of the filled area for line chart.
   * @param {Color | undefined} props.color - The color of the filled area for line chart.
   * @param {number} props.seriesIndex - The index of the series.
   */
  setAreaColor(e, i) {
    t({
      visible: !0,
      seriesIndex: i,
      config: this._config
    }), a(e, i, this._config), this.emitConfigUpdate("setAreaColor");
  }
}
class B extends s {
  /**
   * Specify how negative values are treated in stacked series.
   * @param {number} seriesIndex - The index of the series.
   *
   * NOTE: If true, negative values will be stacked on the base line.
   * If false, negative values will be stacked in relation to their previous values in the stack.
   *
   * @default true
   * @returns {boolean}
   */
  isNegativeValuesStackedToBaseline(e) {
    return b(e, this._config);
  }
  /**
   * Specify how negative values are treated in stacked series.
   * @param {boolean} props.stackedToBaseline - `true` if negative values should be stacked on the base line, `false` otherwise.
   * @param {number} props.seriesIndex - The index of the series.
   *
   * NOTE: If true, negative values will be stacked on the base line.
   * If false, negative values will be stacked in relation to their previous values in the stack.
   *
   */
  setNegativeValuesStackedToBaseline(e, i) {
    y({
      stackNegativeValuesToBaseline: e,
      seriesIndex: i,
      config: this._config
    }), this.emitConfigUpdate("setNegativeValuesStackedToBaseline");
  }
}
export {
  B as M,
  v as a
};
